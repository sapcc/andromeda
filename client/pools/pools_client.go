// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package pools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new pools API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pools API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeletePoolsPoolID(params *DeletePoolsPoolIDParams, opts ...ClientOption) (*DeletePoolsPoolIDNoContent, error)

	GetPools(params *GetPoolsParams, opts ...ClientOption) (*GetPoolsOK, error)

	GetPoolsPoolID(params *GetPoolsPoolIDParams, opts ...ClientOption) (*GetPoolsPoolIDOK, error)

	PostPools(params *PostPoolsParams, opts ...ClientOption) (*PostPoolsCreated, error)

	PutPoolsPoolID(params *PutPoolsPoolIDParams, opts ...ClientOption) (*PutPoolsPoolIDAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeletePoolsPoolID deletes a pool
*/
func (a *Client) DeletePoolsPoolID(params *DeletePoolsPoolIDParams, opts ...ClientOption) (*DeletePoolsPoolIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePoolsPoolIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeletePoolsPoolID",
		Method:             "DELETE",
		PathPattern:        "/pools/{pool_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePoolsPoolIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePoolsPoolIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeletePoolsPoolIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetPools lists pools
*/
func (a *Client) GetPools(params *GetPoolsParams, opts ...ClientOption) (*GetPoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPoolsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPools",
		Method:             "GET",
		PathPattern:        "/pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPoolsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPoolsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetPoolsPoolID shows pool detail
*/
func (a *Client) GetPoolsPoolID(params *GetPoolsPoolIDParams, opts ...ClientOption) (*GetPoolsPoolIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPoolsPoolIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPoolsPoolID",
		Method:             "GET",
		PathPattern:        "/pools/{pool_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPoolsPoolIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPoolsPoolIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPoolsPoolIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostPools creates new pool
*/
func (a *Client) PostPools(params *PostPoolsParams, opts ...ClientOption) (*PostPoolsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPoolsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostPools",
		Method:             "POST",
		PathPattern:        "/pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPoolsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPoolsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostPoolsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutPoolsPoolID updates a pool
*/
func (a *Client) PutPoolsPoolID(params *PutPoolsPoolIDParams, opts ...ClientOption) (*PutPoolsPoolIDAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPoolsPoolIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutPoolsPoolID",
		Method:             "PUT",
		PathPattern:        "/pools/{pool_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutPoolsPoolIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutPoolsPoolIDAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutPoolsPoolIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
