// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package pools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sapcc/andromeda/models"
)

// PostPoolsReader is a Reader for the PostPools structure.
type PostPoolsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostPoolsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostPoolsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostPoolsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPostPoolsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostPoolsCreated creates a PostPoolsCreated with default headers values
func NewPostPoolsCreated() *PostPoolsCreated {
	return &PostPoolsCreated{}
}

/*
PostPoolsCreated describes a response with status code 201, with default header values.

Created pool.
*/
type PostPoolsCreated struct {
	Payload *PostPoolsCreatedBody
}

// IsSuccess returns true when this post pools created response has a 2xx status code
func (o *PostPoolsCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post pools created response has a 3xx status code
func (o *PostPoolsCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post pools created response has a 4xx status code
func (o *PostPoolsCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post pools created response has a 5xx status code
func (o *PostPoolsCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post pools created response a status code equal to that given
func (o *PostPoolsCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post pools created response
func (o *PostPoolsCreated) Code() int {
	return 201
}

func (o *PostPoolsCreated) Error() string {
	return fmt.Sprintf("[POST /pools][%d] postPoolsCreated  %+v", 201, o.Payload)
}

func (o *PostPoolsCreated) String() string {
	return fmt.Sprintf("[POST /pools][%d] postPoolsCreated  %+v", 201, o.Payload)
}

func (o *PostPoolsCreated) GetPayload() *PostPoolsCreatedBody {
	return o.Payload
}

func (o *PostPoolsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostPoolsCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPoolsBadRequest creates a PostPoolsBadRequest with default headers values
func NewPostPoolsBadRequest() *PostPoolsBadRequest {
	return &PostPoolsBadRequest{}
}

/*
PostPoolsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PostPoolsBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this post pools bad request response has a 2xx status code
func (o *PostPoolsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post pools bad request response has a 3xx status code
func (o *PostPoolsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post pools bad request response has a 4xx status code
func (o *PostPoolsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post pools bad request response has a 5xx status code
func (o *PostPoolsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post pools bad request response a status code equal to that given
func (o *PostPoolsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post pools bad request response
func (o *PostPoolsBadRequest) Code() int {
	return 400
}

func (o *PostPoolsBadRequest) Error() string {
	return fmt.Sprintf("[POST /pools][%d] postPoolsBadRequest  %+v", 400, o.Payload)
}

func (o *PostPoolsBadRequest) String() string {
	return fmt.Sprintf("[POST /pools][%d] postPoolsBadRequest  %+v", 400, o.Payload)
}

func (o *PostPoolsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostPoolsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPoolsDefault creates a PostPoolsDefault with default headers values
func NewPostPoolsDefault(code int) *PostPoolsDefault {
	return &PostPoolsDefault{
		_statusCode: code,
	}
}

/*
PostPoolsDefault describes a response with status code -1, with default header values.

Unexpected Error
*/
type PostPoolsDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this post pools default response has a 2xx status code
func (o *PostPoolsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this post pools default response has a 3xx status code
func (o *PostPoolsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this post pools default response has a 4xx status code
func (o *PostPoolsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this post pools default response has a 5xx status code
func (o *PostPoolsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this post pools default response a status code equal to that given
func (o *PostPoolsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the post pools default response
func (o *PostPoolsDefault) Code() int {
	return o._statusCode
}

func (o *PostPoolsDefault) Error() string {
	return fmt.Sprintf("[POST /pools][%d] PostPools default  %+v", o._statusCode, o.Payload)
}

func (o *PostPoolsDefault) String() string {
	return fmt.Sprintf("[POST /pools][%d] PostPools default  %+v", o._statusCode, o.Payload)
}

func (o *PostPoolsDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostPoolsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostPoolsBody post pools body
swagger:model PostPoolsBody
*/
type PostPoolsBody struct {

	// pool
	// Required: true
	Pool *models.Pool `json:"pool"`
}

// Validate validates this post pools body
func (o *PostPoolsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePool(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPoolsBody) validatePool(formats strfmt.Registry) error {

	if err := validate.Required("pool"+"."+"pool", "body", o.Pool); err != nil {
		return err
	}

	if o.Pool != nil {
		if err := o.Pool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pool" + "." + "pool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pool" + "." + "pool")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post pools body based on the context it is used
func (o *PostPoolsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPoolsBody) contextValidatePool(ctx context.Context, formats strfmt.Registry) error {

	if o.Pool != nil {
		if err := o.Pool.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pool" + "." + "pool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pool" + "." + "pool")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostPoolsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostPoolsBody) UnmarshalBinary(b []byte) error {
	var res PostPoolsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostPoolsCreatedBody post pools created body
swagger:model PostPoolsCreatedBody
*/
type PostPoolsCreatedBody struct {

	// pool
	Pool *models.Pool `json:"pool,omitempty"`
}

// Validate validates this post pools created body
func (o *PostPoolsCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePool(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPoolsCreatedBody) validatePool(formats strfmt.Registry) error {
	if swag.IsZero(o.Pool) { // not required
		return nil
	}

	if o.Pool != nil {
		if err := o.Pool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postPoolsCreated" + "." + "pool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postPoolsCreated" + "." + "pool")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post pools created body based on the context it is used
func (o *PostPoolsCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPoolsCreatedBody) contextValidatePool(ctx context.Context, formats strfmt.Registry) error {

	if o.Pool != nil {
		if err := o.Pool.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postPoolsCreated" + "." + "pool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postPoolsCreated" + "." + "pool")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostPoolsCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostPoolsCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostPoolsCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
