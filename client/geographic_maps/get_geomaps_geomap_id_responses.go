// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package geographic_maps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sapcc/andromeda/models"
)

// GetGeomapsGeomapIDReader is a Reader for the GetGeomapsGeomapID structure.
type GetGeomapsGeomapIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGeomapsGeomapIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGeomapsGeomapIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetGeomapsGeomapIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetGeomapsGeomapIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetGeomapsGeomapIDOK creates a GetGeomapsGeomapIDOK with default headers values
func NewGetGeomapsGeomapIDOK() *GetGeomapsGeomapIDOK {
	return &GetGeomapsGeomapIDOK{}
}

/*
GetGeomapsGeomapIDOK describes a response with status code 200, with default header values.

Shows the details of a specific geomap.
*/
type GetGeomapsGeomapIDOK struct {
	Payload *GetGeomapsGeomapIDOKBody
}

// IsSuccess returns true when this get geomaps geomap Id o k response has a 2xx status code
func (o *GetGeomapsGeomapIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get geomaps geomap Id o k response has a 3xx status code
func (o *GetGeomapsGeomapIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get geomaps geomap Id o k response has a 4xx status code
func (o *GetGeomapsGeomapIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get geomaps geomap Id o k response has a 5xx status code
func (o *GetGeomapsGeomapIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get geomaps geomap Id o k response a status code equal to that given
func (o *GetGeomapsGeomapIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get geomaps geomap Id o k response
func (o *GetGeomapsGeomapIDOK) Code() int {
	return 200
}

func (o *GetGeomapsGeomapIDOK) Error() string {
	return fmt.Sprintf("[GET /geomaps/{geomap_id}][%d] getGeomapsGeomapIdOK  %+v", 200, o.Payload)
}

func (o *GetGeomapsGeomapIDOK) String() string {
	return fmt.Sprintf("[GET /geomaps/{geomap_id}][%d] getGeomapsGeomapIdOK  %+v", 200, o.Payload)
}

func (o *GetGeomapsGeomapIDOK) GetPayload() *GetGeomapsGeomapIDOKBody {
	return o.Payload
}

func (o *GetGeomapsGeomapIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetGeomapsGeomapIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGeomapsGeomapIDNotFound creates a GetGeomapsGeomapIDNotFound with default headers values
func NewGetGeomapsGeomapIDNotFound() *GetGeomapsGeomapIDNotFound {
	return &GetGeomapsGeomapIDNotFound{}
}

/*
GetGeomapsGeomapIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetGeomapsGeomapIDNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get geomaps geomap Id not found response has a 2xx status code
func (o *GetGeomapsGeomapIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get geomaps geomap Id not found response has a 3xx status code
func (o *GetGeomapsGeomapIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get geomaps geomap Id not found response has a 4xx status code
func (o *GetGeomapsGeomapIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get geomaps geomap Id not found response has a 5xx status code
func (o *GetGeomapsGeomapIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get geomaps geomap Id not found response a status code equal to that given
func (o *GetGeomapsGeomapIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get geomaps geomap Id not found response
func (o *GetGeomapsGeomapIDNotFound) Code() int {
	return 404
}

func (o *GetGeomapsGeomapIDNotFound) Error() string {
	return fmt.Sprintf("[GET /geomaps/{geomap_id}][%d] getGeomapsGeomapIdNotFound  %+v", 404, o.Payload)
}

func (o *GetGeomapsGeomapIDNotFound) String() string {
	return fmt.Sprintf("[GET /geomaps/{geomap_id}][%d] getGeomapsGeomapIdNotFound  %+v", 404, o.Payload)
}

func (o *GetGeomapsGeomapIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGeomapsGeomapIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGeomapsGeomapIDDefault creates a GetGeomapsGeomapIDDefault with default headers values
func NewGetGeomapsGeomapIDDefault(code int) *GetGeomapsGeomapIDDefault {
	return &GetGeomapsGeomapIDDefault{
		_statusCode: code,
	}
}

/*
GetGeomapsGeomapIDDefault describes a response with status code -1, with default header values.

Unexpected Error
*/
type GetGeomapsGeomapIDDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this get geomaps geomap ID default response has a 2xx status code
func (o *GetGeomapsGeomapIDDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get geomaps geomap ID default response has a 3xx status code
func (o *GetGeomapsGeomapIDDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get geomaps geomap ID default response has a 4xx status code
func (o *GetGeomapsGeomapIDDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get geomaps geomap ID default response has a 5xx status code
func (o *GetGeomapsGeomapIDDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get geomaps geomap ID default response a status code equal to that given
func (o *GetGeomapsGeomapIDDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get geomaps geomap ID default response
func (o *GetGeomapsGeomapIDDefault) Code() int {
	return o._statusCode
}

func (o *GetGeomapsGeomapIDDefault) Error() string {
	return fmt.Sprintf("[GET /geomaps/{geomap_id}][%d] GetGeomapsGeomapID default  %+v", o._statusCode, o.Payload)
}

func (o *GetGeomapsGeomapIDDefault) String() string {
	return fmt.Sprintf("[GET /geomaps/{geomap_id}][%d] GetGeomapsGeomapID default  %+v", o._statusCode, o.Payload)
}

func (o *GetGeomapsGeomapIDDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGeomapsGeomapIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetGeomapsGeomapIDOKBody get geomaps geomap ID o k body
swagger:model GetGeomapsGeomapIDOKBody
*/
type GetGeomapsGeomapIDOKBody struct {

	// geomap
	Geomap *models.Geomap `json:"geomap,omitempty"`
}

// Validate validates this get geomaps geomap ID o k body
func (o *GetGeomapsGeomapIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGeomap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetGeomapsGeomapIDOKBody) validateGeomap(formats strfmt.Registry) error {
	if swag.IsZero(o.Geomap) { // not required
		return nil
	}

	if o.Geomap != nil {
		if err := o.Geomap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getGeomapsGeomapIdOK" + "." + "geomap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getGeomapsGeomapIdOK" + "." + "geomap")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get geomaps geomap ID o k body based on the context it is used
func (o *GetGeomapsGeomapIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateGeomap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetGeomapsGeomapIDOKBody) contextValidateGeomap(ctx context.Context, formats strfmt.Registry) error {

	if o.Geomap != nil {
		if err := o.Geomap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getGeomapsGeomapIdOK" + "." + "geomap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getGeomapsGeomapIdOK" + "." + "geomap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetGeomapsGeomapIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGeomapsGeomapIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetGeomapsGeomapIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
