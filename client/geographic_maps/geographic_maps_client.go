// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package geographic_maps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new geographic maps API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for geographic maps API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteGeomapsGeomapID(params *DeleteGeomapsGeomapIDParams, opts ...ClientOption) (*DeleteGeomapsGeomapIDNoContent, error)

	GetGeomaps(params *GetGeomapsParams, opts ...ClientOption) (*GetGeomapsOK, error)

	GetGeomapsGeomapID(params *GetGeomapsGeomapIDParams, opts ...ClientOption) (*GetGeomapsGeomapIDOK, error)

	PostGeomaps(params *PostGeomapsParams, opts ...ClientOption) (*PostGeomapsCreated, error)

	PutGeomapsGeomapID(params *PutGeomapsGeomapIDParams, opts ...ClientOption) (*PutGeomapsGeomapIDAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteGeomapsGeomapID deletes a geographic map
*/
func (a *Client) DeleteGeomapsGeomapID(params *DeleteGeomapsGeomapIDParams, opts ...ClientOption) (*DeleteGeomapsGeomapIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGeomapsGeomapIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteGeomapsGeomapID",
		Method:             "DELETE",
		PathPattern:        "/geomaps/{geomap_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteGeomapsGeomapIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGeomapsGeomapIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteGeomapsGeomapIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetGeomaps lists geographic maps
*/
func (a *Client) GetGeomaps(params *GetGeomapsParams, opts ...ClientOption) (*GetGeomapsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGeomapsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetGeomaps",
		Method:             "GET",
		PathPattern:        "/geomaps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGeomapsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGeomapsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetGeomapsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetGeomapsGeomapID shows geographic map detail
*/
func (a *Client) GetGeomapsGeomapID(params *GetGeomapsGeomapIDParams, opts ...ClientOption) (*GetGeomapsGeomapIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGeomapsGeomapIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetGeomapsGeomapID",
		Method:             "GET",
		PathPattern:        "/geomaps/{geomap_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGeomapsGeomapIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGeomapsGeomapIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetGeomapsGeomapIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostGeomaps creates new geographic map
*/
func (a *Client) PostGeomaps(params *PostGeomapsParams, opts ...ClientOption) (*PostGeomapsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGeomapsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostGeomaps",
		Method:             "POST",
		PathPattern:        "/geomaps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostGeomapsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGeomapsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostGeomapsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutGeomapsGeomapID updates a geographic map
*/
func (a *Client) PutGeomapsGeomapID(params *PutGeomapsGeomapIDParams, opts ...ClientOption) (*PutGeomapsGeomapIDAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutGeomapsGeomapIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutGeomapsGeomapID",
		Method:             "PUT",
		PathPattern:        "/geomaps/{geomap_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutGeomapsGeomapIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutGeomapsGeomapIDAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutGeomapsGeomapIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
