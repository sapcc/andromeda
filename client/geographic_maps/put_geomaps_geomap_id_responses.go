// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package geographic_maps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sapcc/andromeda/models"
)

// PutGeomapsGeomapIDReader is a Reader for the PutGeomapsGeomapID structure.
type PutGeomapsGeomapIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutGeomapsGeomapIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPutGeomapsGeomapIDAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutGeomapsGeomapIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutGeomapsGeomapIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPutGeomapsGeomapIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutGeomapsGeomapIDAccepted creates a PutGeomapsGeomapIDAccepted with default headers values
func NewPutGeomapsGeomapIDAccepted() *PutGeomapsGeomapIDAccepted {
	return &PutGeomapsGeomapIDAccepted{}
}

/*
PutGeomapsGeomapIDAccepted describes a response with status code 202, with default header values.

Updated geomap.
*/
type PutGeomapsGeomapIDAccepted struct {
	Payload *PutGeomapsGeomapIDAcceptedBody
}

// IsSuccess returns true when this put geomaps geomap Id accepted response has a 2xx status code
func (o *PutGeomapsGeomapIDAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put geomaps geomap Id accepted response has a 3xx status code
func (o *PutGeomapsGeomapIDAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put geomaps geomap Id accepted response has a 4xx status code
func (o *PutGeomapsGeomapIDAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this put geomaps geomap Id accepted response has a 5xx status code
func (o *PutGeomapsGeomapIDAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this put geomaps geomap Id accepted response a status code equal to that given
func (o *PutGeomapsGeomapIDAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the put geomaps geomap Id accepted response
func (o *PutGeomapsGeomapIDAccepted) Code() int {
	return 202
}

func (o *PutGeomapsGeomapIDAccepted) Error() string {
	return fmt.Sprintf("[PUT /geomaps/{geomap_id}][%d] putGeomapsGeomapIdAccepted  %+v", 202, o.Payload)
}

func (o *PutGeomapsGeomapIDAccepted) String() string {
	return fmt.Sprintf("[PUT /geomaps/{geomap_id}][%d] putGeomapsGeomapIdAccepted  %+v", 202, o.Payload)
}

func (o *PutGeomapsGeomapIDAccepted) GetPayload() *PutGeomapsGeomapIDAcceptedBody {
	return o.Payload
}

func (o *PutGeomapsGeomapIDAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutGeomapsGeomapIDAcceptedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutGeomapsGeomapIDBadRequest creates a PutGeomapsGeomapIDBadRequest with default headers values
func NewPutGeomapsGeomapIDBadRequest() *PutGeomapsGeomapIDBadRequest {
	return &PutGeomapsGeomapIDBadRequest{}
}

/*
PutGeomapsGeomapIDBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutGeomapsGeomapIDBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this put geomaps geomap Id bad request response has a 2xx status code
func (o *PutGeomapsGeomapIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put geomaps geomap Id bad request response has a 3xx status code
func (o *PutGeomapsGeomapIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put geomaps geomap Id bad request response has a 4xx status code
func (o *PutGeomapsGeomapIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put geomaps geomap Id bad request response has a 5xx status code
func (o *PutGeomapsGeomapIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put geomaps geomap Id bad request response a status code equal to that given
func (o *PutGeomapsGeomapIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put geomaps geomap Id bad request response
func (o *PutGeomapsGeomapIDBadRequest) Code() int {
	return 400
}

func (o *PutGeomapsGeomapIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /geomaps/{geomap_id}][%d] putGeomapsGeomapIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutGeomapsGeomapIDBadRequest) String() string {
	return fmt.Sprintf("[PUT /geomaps/{geomap_id}][%d] putGeomapsGeomapIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutGeomapsGeomapIDBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutGeomapsGeomapIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutGeomapsGeomapIDNotFound creates a PutGeomapsGeomapIDNotFound with default headers values
func NewPutGeomapsGeomapIDNotFound() *PutGeomapsGeomapIDNotFound {
	return &PutGeomapsGeomapIDNotFound{}
}

/*
PutGeomapsGeomapIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutGeomapsGeomapIDNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this put geomaps geomap Id not found response has a 2xx status code
func (o *PutGeomapsGeomapIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put geomaps geomap Id not found response has a 3xx status code
func (o *PutGeomapsGeomapIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put geomaps geomap Id not found response has a 4xx status code
func (o *PutGeomapsGeomapIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put geomaps geomap Id not found response has a 5xx status code
func (o *PutGeomapsGeomapIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put geomaps geomap Id not found response a status code equal to that given
func (o *PutGeomapsGeomapIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put geomaps geomap Id not found response
func (o *PutGeomapsGeomapIDNotFound) Code() int {
	return 404
}

func (o *PutGeomapsGeomapIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /geomaps/{geomap_id}][%d] putGeomapsGeomapIdNotFound  %+v", 404, o.Payload)
}

func (o *PutGeomapsGeomapIDNotFound) String() string {
	return fmt.Sprintf("[PUT /geomaps/{geomap_id}][%d] putGeomapsGeomapIdNotFound  %+v", 404, o.Payload)
}

func (o *PutGeomapsGeomapIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutGeomapsGeomapIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutGeomapsGeomapIDDefault creates a PutGeomapsGeomapIDDefault with default headers values
func NewPutGeomapsGeomapIDDefault(code int) *PutGeomapsGeomapIDDefault {
	return &PutGeomapsGeomapIDDefault{
		_statusCode: code,
	}
}

/*
PutGeomapsGeomapIDDefault describes a response with status code -1, with default header values.

Unexpected Error
*/
type PutGeomapsGeomapIDDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this put geomaps geomap ID default response has a 2xx status code
func (o *PutGeomapsGeomapIDDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this put geomaps geomap ID default response has a 3xx status code
func (o *PutGeomapsGeomapIDDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this put geomaps geomap ID default response has a 4xx status code
func (o *PutGeomapsGeomapIDDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this put geomaps geomap ID default response has a 5xx status code
func (o *PutGeomapsGeomapIDDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this put geomaps geomap ID default response a status code equal to that given
func (o *PutGeomapsGeomapIDDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the put geomaps geomap ID default response
func (o *PutGeomapsGeomapIDDefault) Code() int {
	return o._statusCode
}

func (o *PutGeomapsGeomapIDDefault) Error() string {
	return fmt.Sprintf("[PUT /geomaps/{geomap_id}][%d] PutGeomapsGeomapID default  %+v", o._statusCode, o.Payload)
}

func (o *PutGeomapsGeomapIDDefault) String() string {
	return fmt.Sprintf("[PUT /geomaps/{geomap_id}][%d] PutGeomapsGeomapID default  %+v", o._statusCode, o.Payload)
}

func (o *PutGeomapsGeomapIDDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutGeomapsGeomapIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PutGeomapsGeomapIDAcceptedBody put geomaps geomap ID accepted body
swagger:model PutGeomapsGeomapIDAcceptedBody
*/
type PutGeomapsGeomapIDAcceptedBody struct {

	// geomap
	Geomap *models.Geomap `json:"geomap,omitempty"`
}

// Validate validates this put geomaps geomap ID accepted body
func (o *PutGeomapsGeomapIDAcceptedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGeomap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutGeomapsGeomapIDAcceptedBody) validateGeomap(formats strfmt.Registry) error {
	if swag.IsZero(o.Geomap) { // not required
		return nil
	}

	if o.Geomap != nil {
		if err := o.Geomap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putGeomapsGeomapIdAccepted" + "." + "geomap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putGeomapsGeomapIdAccepted" + "." + "geomap")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put geomaps geomap ID accepted body based on the context it is used
func (o *PutGeomapsGeomapIDAcceptedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateGeomap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutGeomapsGeomapIDAcceptedBody) contextValidateGeomap(ctx context.Context, formats strfmt.Registry) error {

	if o.Geomap != nil {
		if err := o.Geomap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putGeomapsGeomapIdAccepted" + "." + "geomap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putGeomapsGeomapIdAccepted" + "." + "geomap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutGeomapsGeomapIDAcceptedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutGeomapsGeomapIDAcceptedBody) UnmarshalBinary(b []byte) error {
	var res PutGeomapsGeomapIDAcceptedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PutGeomapsGeomapIDBody put geomaps geomap ID body
swagger:model PutGeomapsGeomapIDBody
*/
type PutGeomapsGeomapIDBody struct {

	// geomap
	// Required: true
	Geomap *models.Geomap `json:"geomap"`
}

// Validate validates this put geomaps geomap ID body
func (o *PutGeomapsGeomapIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGeomap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutGeomapsGeomapIDBody) validateGeomap(formats strfmt.Registry) error {

	if err := validate.Required("geomap"+"."+"geomap", "body", o.Geomap); err != nil {
		return err
	}

	if o.Geomap != nil {
		if err := o.Geomap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geomap" + "." + "geomap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("geomap" + "." + "geomap")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put geomaps geomap ID body based on the context it is used
func (o *PutGeomapsGeomapIDBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateGeomap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutGeomapsGeomapIDBody) contextValidateGeomap(ctx context.Context, formats strfmt.Registry) error {

	if o.Geomap != nil {
		if err := o.Geomap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geomap" + "." + "geomap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("geomap" + "." + "geomap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutGeomapsGeomapIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutGeomapsGeomapIDBody) UnmarshalBinary(b []byte) error {
	var res PutGeomapsGeomapIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
