// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package geographic_maps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sapcc/andromeda/models"
)

// PostGeomapsReader is a Reader for the PostGeomaps structure.
type PostGeomapsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostGeomapsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostGeomapsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostGeomapsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostGeomapsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPostGeomapsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostGeomapsCreated creates a PostGeomapsCreated with default headers values
func NewPostGeomapsCreated() *PostGeomapsCreated {
	return &PostGeomapsCreated{}
}

/*
PostGeomapsCreated describes a response with status code 201, with default header values.

Created geomap.
*/
type PostGeomapsCreated struct {
	Payload *PostGeomapsCreatedBody
}

// IsSuccess returns true when this post geomaps created response has a 2xx status code
func (o *PostGeomapsCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post geomaps created response has a 3xx status code
func (o *PostGeomapsCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post geomaps created response has a 4xx status code
func (o *PostGeomapsCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post geomaps created response has a 5xx status code
func (o *PostGeomapsCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post geomaps created response a status code equal to that given
func (o *PostGeomapsCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post geomaps created response
func (o *PostGeomapsCreated) Code() int {
	return 201
}

func (o *PostGeomapsCreated) Error() string {
	return fmt.Sprintf("[POST /geomaps][%d] postGeomapsCreated  %+v", 201, o.Payload)
}

func (o *PostGeomapsCreated) String() string {
	return fmt.Sprintf("[POST /geomaps][%d] postGeomapsCreated  %+v", 201, o.Payload)
}

func (o *PostGeomapsCreated) GetPayload() *PostGeomapsCreatedBody {
	return o.Payload
}

func (o *PostGeomapsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostGeomapsCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostGeomapsBadRequest creates a PostGeomapsBadRequest with default headers values
func NewPostGeomapsBadRequest() *PostGeomapsBadRequest {
	return &PostGeomapsBadRequest{}
}

/*
PostGeomapsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PostGeomapsBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this post geomaps bad request response has a 2xx status code
func (o *PostGeomapsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post geomaps bad request response has a 3xx status code
func (o *PostGeomapsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post geomaps bad request response has a 4xx status code
func (o *PostGeomapsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post geomaps bad request response has a 5xx status code
func (o *PostGeomapsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post geomaps bad request response a status code equal to that given
func (o *PostGeomapsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post geomaps bad request response
func (o *PostGeomapsBadRequest) Code() int {
	return 400
}

func (o *PostGeomapsBadRequest) Error() string {
	return fmt.Sprintf("[POST /geomaps][%d] postGeomapsBadRequest  %+v", 400, o.Payload)
}

func (o *PostGeomapsBadRequest) String() string {
	return fmt.Sprintf("[POST /geomaps][%d] postGeomapsBadRequest  %+v", 400, o.Payload)
}

func (o *PostGeomapsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostGeomapsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostGeomapsNotFound creates a PostGeomapsNotFound with default headers values
func NewPostGeomapsNotFound() *PostGeomapsNotFound {
	return &PostGeomapsNotFound{}
}

/*
PostGeomapsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PostGeomapsNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this post geomaps not found response has a 2xx status code
func (o *PostGeomapsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post geomaps not found response has a 3xx status code
func (o *PostGeomapsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post geomaps not found response has a 4xx status code
func (o *PostGeomapsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post geomaps not found response has a 5xx status code
func (o *PostGeomapsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post geomaps not found response a status code equal to that given
func (o *PostGeomapsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post geomaps not found response
func (o *PostGeomapsNotFound) Code() int {
	return 404
}

func (o *PostGeomapsNotFound) Error() string {
	return fmt.Sprintf("[POST /geomaps][%d] postGeomapsNotFound  %+v", 404, o.Payload)
}

func (o *PostGeomapsNotFound) String() string {
	return fmt.Sprintf("[POST /geomaps][%d] postGeomapsNotFound  %+v", 404, o.Payload)
}

func (o *PostGeomapsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostGeomapsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostGeomapsDefault creates a PostGeomapsDefault with default headers values
func NewPostGeomapsDefault(code int) *PostGeomapsDefault {
	return &PostGeomapsDefault{
		_statusCode: code,
	}
}

/*
PostGeomapsDefault describes a response with status code -1, with default header values.

Unexpected Error
*/
type PostGeomapsDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this post geomaps default response has a 2xx status code
func (o *PostGeomapsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this post geomaps default response has a 3xx status code
func (o *PostGeomapsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this post geomaps default response has a 4xx status code
func (o *PostGeomapsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this post geomaps default response has a 5xx status code
func (o *PostGeomapsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this post geomaps default response a status code equal to that given
func (o *PostGeomapsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the post geomaps default response
func (o *PostGeomapsDefault) Code() int {
	return o._statusCode
}

func (o *PostGeomapsDefault) Error() string {
	return fmt.Sprintf("[POST /geomaps][%d] PostGeomaps default  %+v", o._statusCode, o.Payload)
}

func (o *PostGeomapsDefault) String() string {
	return fmt.Sprintf("[POST /geomaps][%d] PostGeomaps default  %+v", o._statusCode, o.Payload)
}

func (o *PostGeomapsDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostGeomapsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostGeomapsBody post geomaps body
swagger:model PostGeomapsBody
*/
type PostGeomapsBody struct {

	// geomap
	// Required: true
	Geomap *models.Geomap `json:"geomap"`
}

// Validate validates this post geomaps body
func (o *PostGeomapsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGeomap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostGeomapsBody) validateGeomap(formats strfmt.Registry) error {

	if err := validate.Required("geomap"+"."+"geomap", "body", o.Geomap); err != nil {
		return err
	}

	if o.Geomap != nil {
		if err := o.Geomap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geomap" + "." + "geomap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("geomap" + "." + "geomap")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post geomaps body based on the context it is used
func (o *PostGeomapsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateGeomap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostGeomapsBody) contextValidateGeomap(ctx context.Context, formats strfmt.Registry) error {

	if o.Geomap != nil {
		if err := o.Geomap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geomap" + "." + "geomap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("geomap" + "." + "geomap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostGeomapsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostGeomapsBody) UnmarshalBinary(b []byte) error {
	var res PostGeomapsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostGeomapsCreatedBody post geomaps created body
swagger:model PostGeomapsCreatedBody
*/
type PostGeomapsCreatedBody struct {

	// geomap
	Geomap *models.Geomap `json:"geomap,omitempty"`
}

// Validate validates this post geomaps created body
func (o *PostGeomapsCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGeomap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostGeomapsCreatedBody) validateGeomap(formats strfmt.Registry) error {
	if swag.IsZero(o.Geomap) { // not required
		return nil
	}

	if o.Geomap != nil {
		if err := o.Geomap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postGeomapsCreated" + "." + "geomap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postGeomapsCreated" + "." + "geomap")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post geomaps created body based on the context it is used
func (o *PostGeomapsCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateGeomap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostGeomapsCreatedBody) contextValidateGeomap(ctx context.Context, formats strfmt.Registry) error {

	if o.Geomap != nil {
		if err := o.Geomap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postGeomapsCreated" + "." + "geomap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postGeomapsCreated" + "." + "geomap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostGeomapsCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostGeomapsCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostGeomapsCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
