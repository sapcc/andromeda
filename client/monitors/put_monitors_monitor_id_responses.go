// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sapcc/andromeda/models"
)

// PutMonitorsMonitorIDReader is a Reader for the PutMonitorsMonitorID structure.
type PutMonitorsMonitorIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutMonitorsMonitorIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPutMonitorsMonitorIDAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutMonitorsMonitorIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutMonitorsMonitorIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPutMonitorsMonitorIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutMonitorsMonitorIDAccepted creates a PutMonitorsMonitorIDAccepted with default headers values
func NewPutMonitorsMonitorIDAccepted() *PutMonitorsMonitorIDAccepted {
	return &PutMonitorsMonitorIDAccepted{}
}

/*
PutMonitorsMonitorIDAccepted describes a response with status code 202, with default header values.

Updated monitor.
*/
type PutMonitorsMonitorIDAccepted struct {
	Payload *PutMonitorsMonitorIDAcceptedBody
}

// IsSuccess returns true when this put monitors monitor Id accepted response has a 2xx status code
func (o *PutMonitorsMonitorIDAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put monitors monitor Id accepted response has a 3xx status code
func (o *PutMonitorsMonitorIDAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put monitors monitor Id accepted response has a 4xx status code
func (o *PutMonitorsMonitorIDAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this put monitors monitor Id accepted response has a 5xx status code
func (o *PutMonitorsMonitorIDAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this put monitors monitor Id accepted response a status code equal to that given
func (o *PutMonitorsMonitorIDAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the put monitors monitor Id accepted response
func (o *PutMonitorsMonitorIDAccepted) Code() int {
	return 202
}

func (o *PutMonitorsMonitorIDAccepted) Error() string {
	return fmt.Sprintf("[PUT /monitors/{monitor_id}][%d] putMonitorsMonitorIdAccepted  %+v", 202, o.Payload)
}

func (o *PutMonitorsMonitorIDAccepted) String() string {
	return fmt.Sprintf("[PUT /monitors/{monitor_id}][%d] putMonitorsMonitorIdAccepted  %+v", 202, o.Payload)
}

func (o *PutMonitorsMonitorIDAccepted) GetPayload() *PutMonitorsMonitorIDAcceptedBody {
	return o.Payload
}

func (o *PutMonitorsMonitorIDAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutMonitorsMonitorIDAcceptedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutMonitorsMonitorIDBadRequest creates a PutMonitorsMonitorIDBadRequest with default headers values
func NewPutMonitorsMonitorIDBadRequest() *PutMonitorsMonitorIDBadRequest {
	return &PutMonitorsMonitorIDBadRequest{}
}

/*
PutMonitorsMonitorIDBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutMonitorsMonitorIDBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this put monitors monitor Id bad request response has a 2xx status code
func (o *PutMonitorsMonitorIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put monitors monitor Id bad request response has a 3xx status code
func (o *PutMonitorsMonitorIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put monitors monitor Id bad request response has a 4xx status code
func (o *PutMonitorsMonitorIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put monitors monitor Id bad request response has a 5xx status code
func (o *PutMonitorsMonitorIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put monitors monitor Id bad request response a status code equal to that given
func (o *PutMonitorsMonitorIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put monitors monitor Id bad request response
func (o *PutMonitorsMonitorIDBadRequest) Code() int {
	return 400
}

func (o *PutMonitorsMonitorIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /monitors/{monitor_id}][%d] putMonitorsMonitorIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutMonitorsMonitorIDBadRequest) String() string {
	return fmt.Sprintf("[PUT /monitors/{monitor_id}][%d] putMonitorsMonitorIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutMonitorsMonitorIDBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutMonitorsMonitorIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutMonitorsMonitorIDNotFound creates a PutMonitorsMonitorIDNotFound with default headers values
func NewPutMonitorsMonitorIDNotFound() *PutMonitorsMonitorIDNotFound {
	return &PutMonitorsMonitorIDNotFound{}
}

/*
PutMonitorsMonitorIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutMonitorsMonitorIDNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this put monitors monitor Id not found response has a 2xx status code
func (o *PutMonitorsMonitorIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put monitors monitor Id not found response has a 3xx status code
func (o *PutMonitorsMonitorIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put monitors monitor Id not found response has a 4xx status code
func (o *PutMonitorsMonitorIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put monitors monitor Id not found response has a 5xx status code
func (o *PutMonitorsMonitorIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put monitors monitor Id not found response a status code equal to that given
func (o *PutMonitorsMonitorIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put monitors monitor Id not found response
func (o *PutMonitorsMonitorIDNotFound) Code() int {
	return 404
}

func (o *PutMonitorsMonitorIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /monitors/{monitor_id}][%d] putMonitorsMonitorIdNotFound  %+v", 404, o.Payload)
}

func (o *PutMonitorsMonitorIDNotFound) String() string {
	return fmt.Sprintf("[PUT /monitors/{monitor_id}][%d] putMonitorsMonitorIdNotFound  %+v", 404, o.Payload)
}

func (o *PutMonitorsMonitorIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutMonitorsMonitorIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutMonitorsMonitorIDDefault creates a PutMonitorsMonitorIDDefault with default headers values
func NewPutMonitorsMonitorIDDefault(code int) *PutMonitorsMonitorIDDefault {
	return &PutMonitorsMonitorIDDefault{
		_statusCode: code,
	}
}

/*
PutMonitorsMonitorIDDefault describes a response with status code -1, with default header values.

Unexpected Error
*/
type PutMonitorsMonitorIDDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this put monitors monitor ID default response has a 2xx status code
func (o *PutMonitorsMonitorIDDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this put monitors monitor ID default response has a 3xx status code
func (o *PutMonitorsMonitorIDDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this put monitors monitor ID default response has a 4xx status code
func (o *PutMonitorsMonitorIDDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this put monitors monitor ID default response has a 5xx status code
func (o *PutMonitorsMonitorIDDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this put monitors monitor ID default response a status code equal to that given
func (o *PutMonitorsMonitorIDDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the put monitors monitor ID default response
func (o *PutMonitorsMonitorIDDefault) Code() int {
	return o._statusCode
}

func (o *PutMonitorsMonitorIDDefault) Error() string {
	return fmt.Sprintf("[PUT /monitors/{monitor_id}][%d] PutMonitorsMonitorID default  %+v", o._statusCode, o.Payload)
}

func (o *PutMonitorsMonitorIDDefault) String() string {
	return fmt.Sprintf("[PUT /monitors/{monitor_id}][%d] PutMonitorsMonitorID default  %+v", o._statusCode, o.Payload)
}

func (o *PutMonitorsMonitorIDDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutMonitorsMonitorIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PutMonitorsMonitorIDAcceptedBody put monitors monitor ID accepted body
swagger:model PutMonitorsMonitorIDAcceptedBody
*/
type PutMonitorsMonitorIDAcceptedBody struct {

	// monitor
	Monitor *models.Monitor `json:"monitor,omitempty"`
}

// Validate validates this put monitors monitor ID accepted body
func (o *PutMonitorsMonitorIDAcceptedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMonitor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutMonitorsMonitorIDAcceptedBody) validateMonitor(formats strfmt.Registry) error {
	if swag.IsZero(o.Monitor) { // not required
		return nil
	}

	if o.Monitor != nil {
		if err := o.Monitor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putMonitorsMonitorIdAccepted" + "." + "monitor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putMonitorsMonitorIdAccepted" + "." + "monitor")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put monitors monitor ID accepted body based on the context it is used
func (o *PutMonitorsMonitorIDAcceptedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMonitor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutMonitorsMonitorIDAcceptedBody) contextValidateMonitor(ctx context.Context, formats strfmt.Registry) error {

	if o.Monitor != nil {
		if err := o.Monitor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putMonitorsMonitorIdAccepted" + "." + "monitor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putMonitorsMonitorIdAccepted" + "." + "monitor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutMonitorsMonitorIDAcceptedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutMonitorsMonitorIDAcceptedBody) UnmarshalBinary(b []byte) error {
	var res PutMonitorsMonitorIDAcceptedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PutMonitorsMonitorIDBody put monitors monitor ID body
swagger:model PutMonitorsMonitorIDBody
*/
type PutMonitorsMonitorIDBody struct {

	// monitor
	// Required: true
	Monitor *models.Monitor `json:"monitor"`
}

// Validate validates this put monitors monitor ID body
func (o *PutMonitorsMonitorIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMonitor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutMonitorsMonitorIDBody) validateMonitor(formats strfmt.Registry) error {

	if err := validate.Required("monitor"+"."+"monitor", "body", o.Monitor); err != nil {
		return err
	}

	if o.Monitor != nil {
		if err := o.Monitor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitor" + "." + "monitor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitor" + "." + "monitor")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put monitors monitor ID body based on the context it is used
func (o *PutMonitorsMonitorIDBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMonitor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutMonitorsMonitorIDBody) contextValidateMonitor(ctx context.Context, formats strfmt.Registry) error {

	if o.Monitor != nil {
		if err := o.Monitor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitor" + "." + "monitor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitor" + "." + "monitor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutMonitorsMonitorIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutMonitorsMonitorIDBody) UnmarshalBinary(b []byte) error {
	var res PutMonitorsMonitorIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
