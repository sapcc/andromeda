// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sapcc/andromeda/models"
)

// GetMonitorsReader is a Reader for the GetMonitors structure.
type GetMonitorsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMonitorsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMonitorsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetMonitorsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetMonitorsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetMonitorsOK creates a GetMonitorsOK with default headers values
func NewGetMonitorsOK() *GetMonitorsOK {
	return &GetMonitorsOK{}
}

/*
GetMonitorsOK describes a response with status code 200, with default header values.

A JSON array of monitors
*/
type GetMonitorsOK struct {
	Payload *GetMonitorsOKBody
}

// IsSuccess returns true when this get monitors o k response has a 2xx status code
func (o *GetMonitorsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get monitors o k response has a 3xx status code
func (o *GetMonitorsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get monitors o k response has a 4xx status code
func (o *GetMonitorsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get monitors o k response has a 5xx status code
func (o *GetMonitorsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get monitors o k response a status code equal to that given
func (o *GetMonitorsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get monitors o k response
func (o *GetMonitorsOK) Code() int {
	return 200
}

func (o *GetMonitorsOK) Error() string {
	return fmt.Sprintf("[GET /monitors][%d] getMonitorsOK  %+v", 200, o.Payload)
}

func (o *GetMonitorsOK) String() string {
	return fmt.Sprintf("[GET /monitors][%d] getMonitorsOK  %+v", 200, o.Payload)
}

func (o *GetMonitorsOK) GetPayload() *GetMonitorsOKBody {
	return o.Payload
}

func (o *GetMonitorsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetMonitorsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMonitorsBadRequest creates a GetMonitorsBadRequest with default headers values
func NewGetMonitorsBadRequest() *GetMonitorsBadRequest {
	return &GetMonitorsBadRequest{}
}

/*
GetMonitorsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetMonitorsBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get monitors bad request response has a 2xx status code
func (o *GetMonitorsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get monitors bad request response has a 3xx status code
func (o *GetMonitorsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get monitors bad request response has a 4xx status code
func (o *GetMonitorsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get monitors bad request response has a 5xx status code
func (o *GetMonitorsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get monitors bad request response a status code equal to that given
func (o *GetMonitorsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get monitors bad request response
func (o *GetMonitorsBadRequest) Code() int {
	return 400
}

func (o *GetMonitorsBadRequest) Error() string {
	return fmt.Sprintf("[GET /monitors][%d] getMonitorsBadRequest  %+v", 400, o.Payload)
}

func (o *GetMonitorsBadRequest) String() string {
	return fmt.Sprintf("[GET /monitors][%d] getMonitorsBadRequest  %+v", 400, o.Payload)
}

func (o *GetMonitorsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetMonitorsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMonitorsDefault creates a GetMonitorsDefault with default headers values
func NewGetMonitorsDefault(code int) *GetMonitorsDefault {
	return &GetMonitorsDefault{
		_statusCode: code,
	}
}

/*
GetMonitorsDefault describes a response with status code -1, with default header values.

Unexpected Error
*/
type GetMonitorsDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this get monitors default response has a 2xx status code
func (o *GetMonitorsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get monitors default response has a 3xx status code
func (o *GetMonitorsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get monitors default response has a 4xx status code
func (o *GetMonitorsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get monitors default response has a 5xx status code
func (o *GetMonitorsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get monitors default response a status code equal to that given
func (o *GetMonitorsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get monitors default response
func (o *GetMonitorsDefault) Code() int {
	return o._statusCode
}

func (o *GetMonitorsDefault) Error() string {
	return fmt.Sprintf("[GET /monitors][%d] GetMonitors default  %+v", o._statusCode, o.Payload)
}

func (o *GetMonitorsDefault) String() string {
	return fmt.Sprintf("[GET /monitors][%d] GetMonitors default  %+v", o._statusCode, o.Payload)
}

func (o *GetMonitorsDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetMonitorsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetMonitorsOKBody get monitors o k body
swagger:model GetMonitorsOKBody
*/
type GetMonitorsOKBody struct {

	// links
	Links []*models.Link `json:"links,omitempty"`

	// monitors
	Monitors []*models.Monitor `json:"monitors"`
}

// Validate validates this get monitors o k body
func (o *GetMonitorsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMonitors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetMonitorsOKBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	for i := 0; i < len(o.Links); i++ {
		if swag.IsZero(o.Links[i]) { // not required
			continue
		}

		if o.Links[i] != nil {
			if err := o.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getMonitorsOK" + "." + "links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getMonitorsOK" + "." + "links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetMonitorsOKBody) validateMonitors(formats strfmt.Registry) error {
	if swag.IsZero(o.Monitors) { // not required
		return nil
	}

	for i := 0; i < len(o.Monitors); i++ {
		if swag.IsZero(o.Monitors[i]) { // not required
			continue
		}

		if o.Monitors[i] != nil {
			if err := o.Monitors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getMonitorsOK" + "." + "monitors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getMonitorsOK" + "." + "monitors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get monitors o k body based on the context it is used
func (o *GetMonitorsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMonitors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetMonitorsOKBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Links); i++ {

		if o.Links[i] != nil {
			if err := o.Links[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getMonitorsOK" + "." + "links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getMonitorsOK" + "." + "links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetMonitorsOKBody) contextValidateMonitors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Monitors); i++ {

		if o.Monitors[i] != nil {
			if err := o.Monitors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getMonitorsOK" + "." + "monitors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getMonitorsOK" + "." + "monitors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetMonitorsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMonitorsOKBody) UnmarshalBinary(b []byte) error {
	var res GetMonitorsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
