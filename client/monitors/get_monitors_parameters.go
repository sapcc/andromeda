// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetMonitorsParams creates a new GetMonitorsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetMonitorsParams() *GetMonitorsParams {
	return &GetMonitorsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetMonitorsParamsWithTimeout creates a new GetMonitorsParams object
// with the ability to set a timeout on a request.
func NewGetMonitorsParamsWithTimeout(timeout time.Duration) *GetMonitorsParams {
	return &GetMonitorsParams{
		timeout: timeout,
	}
}

// NewGetMonitorsParamsWithContext creates a new GetMonitorsParams object
// with the ability to set a context for a request.
func NewGetMonitorsParamsWithContext(ctx context.Context) *GetMonitorsParams {
	return &GetMonitorsParams{
		Context: ctx,
	}
}

// NewGetMonitorsParamsWithHTTPClient creates a new GetMonitorsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetMonitorsParamsWithHTTPClient(client *http.Client) *GetMonitorsParams {
	return &GetMonitorsParams{
		HTTPClient: client,
	}
}

/*
GetMonitorsParams contains all the parameters to send to the API endpoint

	for the get monitors operation.

	Typically these are written to a http.Request.
*/
type GetMonitorsParams struct {

	/* Limit.

	   Sets the page size.
	*/
	Limit *int64

	/* Marker.

	   Pagination ID of the last item in the previous list.

	   Format: uuid
	*/
	Marker *strfmt.UUID

	/* PageReverse.

	   Sets the page direction.
	*/
	PageReverse *bool

	/* PoolID.

	   Pool ID of the monitors to fetch

	   Format: uuid
	*/
	PoolID *strfmt.UUID

	/* Sort.

	   Comma-separated list of sort keys, optinally prefix with - to reverse sort order.
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get monitors params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMonitorsParams) WithDefaults() *GetMonitorsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get monitors params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMonitorsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get monitors params
func (o *GetMonitorsParams) WithTimeout(timeout time.Duration) *GetMonitorsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get monitors params
func (o *GetMonitorsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get monitors params
func (o *GetMonitorsParams) WithContext(ctx context.Context) *GetMonitorsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get monitors params
func (o *GetMonitorsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get monitors params
func (o *GetMonitorsParams) WithHTTPClient(client *http.Client) *GetMonitorsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get monitors params
func (o *GetMonitorsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the get monitors params
func (o *GetMonitorsParams) WithLimit(limit *int64) *GetMonitorsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get monitors params
func (o *GetMonitorsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithMarker adds the marker to the get monitors params
func (o *GetMonitorsParams) WithMarker(marker *strfmt.UUID) *GetMonitorsParams {
	o.SetMarker(marker)
	return o
}

// SetMarker adds the marker to the get monitors params
func (o *GetMonitorsParams) SetMarker(marker *strfmt.UUID) {
	o.Marker = marker
}

// WithPageReverse adds the pageReverse to the get monitors params
func (o *GetMonitorsParams) WithPageReverse(pageReverse *bool) *GetMonitorsParams {
	o.SetPageReverse(pageReverse)
	return o
}

// SetPageReverse adds the pageReverse to the get monitors params
func (o *GetMonitorsParams) SetPageReverse(pageReverse *bool) {
	o.PageReverse = pageReverse
}

// WithPoolID adds the poolID to the get monitors params
func (o *GetMonitorsParams) WithPoolID(poolID *strfmt.UUID) *GetMonitorsParams {
	o.SetPoolID(poolID)
	return o
}

// SetPoolID adds the poolId to the get monitors params
func (o *GetMonitorsParams) SetPoolID(poolID *strfmt.UUID) {
	o.PoolID = poolID
}

// WithSort adds the sort to the get monitors params
func (o *GetMonitorsParams) WithSort(sort *string) *GetMonitorsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get monitors params
func (o *GetMonitorsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *GetMonitorsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Marker != nil {

		// query param marker
		var qrMarker strfmt.UUID

		if o.Marker != nil {
			qrMarker = *o.Marker
		}
		qMarker := qrMarker.String()
		if qMarker != "" {

			if err := r.SetQueryParam("marker", qMarker); err != nil {
				return err
			}
		}
	}

	if o.PageReverse != nil {

		// query param page_reverse
		var qrPageReverse bool

		if o.PageReverse != nil {
			qrPageReverse = *o.PageReverse
		}
		qPageReverse := swag.FormatBool(qrPageReverse)
		if qPageReverse != "" {

			if err := r.SetQueryParam("page_reverse", qPageReverse); err != nil {
				return err
			}
		}
	}

	if o.PoolID != nil {

		// query param pool_id
		var qrPoolID strfmt.UUID

		if o.PoolID != nil {
			qrPoolID = *o.PoolID
		}
		qPoolID := qrPoolID.String()
		if qPoolID != "" {

			if err := r.SetQueryParam("pool_id", qPoolID); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
