// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new monitors API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for monitors API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteMonitorsMonitorID(params *DeleteMonitorsMonitorIDParams, opts ...ClientOption) (*DeleteMonitorsMonitorIDNoContent, error)

	GetMonitors(params *GetMonitorsParams, opts ...ClientOption) (*GetMonitorsOK, error)

	GetMonitorsMonitorID(params *GetMonitorsMonitorIDParams, opts ...ClientOption) (*GetMonitorsMonitorIDOK, error)

	PostMonitors(params *PostMonitorsParams, opts ...ClientOption) (*PostMonitorsCreated, error)

	PutMonitorsMonitorID(params *PutMonitorsMonitorIDParams, opts ...ClientOption) (*PutMonitorsMonitorIDAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteMonitorsMonitorID deletes a monitor
*/
func (a *Client) DeleteMonitorsMonitorID(params *DeleteMonitorsMonitorIDParams, opts ...ClientOption) (*DeleteMonitorsMonitorIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMonitorsMonitorIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteMonitorsMonitorID",
		Method:             "DELETE",
		PathPattern:        "/monitors/{monitor_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteMonitorsMonitorIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMonitorsMonitorIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMonitorsMonitorIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetMonitors lists monitors
*/
func (a *Client) GetMonitors(params *GetMonitorsParams, opts ...ClientOption) (*GetMonitorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMonitorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMonitors",
		Method:             "GET",
		PathPattern:        "/monitors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMonitorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMonitorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMonitorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetMonitorsMonitorID shows monitor detail
*/
func (a *Client) GetMonitorsMonitorID(params *GetMonitorsMonitorIDParams, opts ...ClientOption) (*GetMonitorsMonitorIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMonitorsMonitorIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMonitorsMonitorID",
		Method:             "GET",
		PathPattern:        "/monitors/{monitor_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMonitorsMonitorIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMonitorsMonitorIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMonitorsMonitorIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostMonitors creates new monitor
*/
func (a *Client) PostMonitors(params *PostMonitorsParams, opts ...ClientOption) (*PostMonitorsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMonitorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostMonitors",
		Method:             "POST",
		PathPattern:        "/monitors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostMonitorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostMonitorsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostMonitorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutMonitorsMonitorID updates a monitor
*/
func (a *Client) PutMonitorsMonitorID(params *PutMonitorsMonitorIDParams, opts ...ClientOption) (*PutMonitorsMonitorIDAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMonitorsMonitorIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutMonitorsMonitorID",
		Method:             "PUT",
		PathPattern:        "/monitors/{monitor_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutMonitorsMonitorIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutMonitorsMonitorIDAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutMonitorsMonitorIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
