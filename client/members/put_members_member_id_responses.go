// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package members

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sapcc/andromeda/models"
)

// PutMembersMemberIDReader is a Reader for the PutMembersMemberID structure.
type PutMembersMemberIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutMembersMemberIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPutMembersMemberIDAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutMembersMemberIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutMembersMemberIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPutMembersMemberIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutMembersMemberIDAccepted creates a PutMembersMemberIDAccepted with default headers values
func NewPutMembersMemberIDAccepted() *PutMembersMemberIDAccepted {
	return &PutMembersMemberIDAccepted{}
}

/*
PutMembersMemberIDAccepted describes a response with status code 202, with default header values.

Updated member.
*/
type PutMembersMemberIDAccepted struct {
	Payload *PutMembersMemberIDAcceptedBody
}

// IsSuccess returns true when this put members member Id accepted response has a 2xx status code
func (o *PutMembersMemberIDAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put members member Id accepted response has a 3xx status code
func (o *PutMembersMemberIDAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put members member Id accepted response has a 4xx status code
func (o *PutMembersMemberIDAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this put members member Id accepted response has a 5xx status code
func (o *PutMembersMemberIDAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this put members member Id accepted response a status code equal to that given
func (o *PutMembersMemberIDAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the put members member Id accepted response
func (o *PutMembersMemberIDAccepted) Code() int {
	return 202
}

func (o *PutMembersMemberIDAccepted) Error() string {
	return fmt.Sprintf("[PUT /members/{member_id}][%d] putMembersMemberIdAccepted  %+v", 202, o.Payload)
}

func (o *PutMembersMemberIDAccepted) String() string {
	return fmt.Sprintf("[PUT /members/{member_id}][%d] putMembersMemberIdAccepted  %+v", 202, o.Payload)
}

func (o *PutMembersMemberIDAccepted) GetPayload() *PutMembersMemberIDAcceptedBody {
	return o.Payload
}

func (o *PutMembersMemberIDAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutMembersMemberIDAcceptedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutMembersMemberIDBadRequest creates a PutMembersMemberIDBadRequest with default headers values
func NewPutMembersMemberIDBadRequest() *PutMembersMemberIDBadRequest {
	return &PutMembersMemberIDBadRequest{}
}

/*
PutMembersMemberIDBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutMembersMemberIDBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this put members member Id bad request response has a 2xx status code
func (o *PutMembersMemberIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put members member Id bad request response has a 3xx status code
func (o *PutMembersMemberIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put members member Id bad request response has a 4xx status code
func (o *PutMembersMemberIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put members member Id bad request response has a 5xx status code
func (o *PutMembersMemberIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put members member Id bad request response a status code equal to that given
func (o *PutMembersMemberIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put members member Id bad request response
func (o *PutMembersMemberIDBadRequest) Code() int {
	return 400
}

func (o *PutMembersMemberIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /members/{member_id}][%d] putMembersMemberIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutMembersMemberIDBadRequest) String() string {
	return fmt.Sprintf("[PUT /members/{member_id}][%d] putMembersMemberIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutMembersMemberIDBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutMembersMemberIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutMembersMemberIDNotFound creates a PutMembersMemberIDNotFound with default headers values
func NewPutMembersMemberIDNotFound() *PutMembersMemberIDNotFound {
	return &PutMembersMemberIDNotFound{}
}

/*
PutMembersMemberIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutMembersMemberIDNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this put members member Id not found response has a 2xx status code
func (o *PutMembersMemberIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put members member Id not found response has a 3xx status code
func (o *PutMembersMemberIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put members member Id not found response has a 4xx status code
func (o *PutMembersMemberIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put members member Id not found response has a 5xx status code
func (o *PutMembersMemberIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put members member Id not found response a status code equal to that given
func (o *PutMembersMemberIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put members member Id not found response
func (o *PutMembersMemberIDNotFound) Code() int {
	return 404
}

func (o *PutMembersMemberIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /members/{member_id}][%d] putMembersMemberIdNotFound  %+v", 404, o.Payload)
}

func (o *PutMembersMemberIDNotFound) String() string {
	return fmt.Sprintf("[PUT /members/{member_id}][%d] putMembersMemberIdNotFound  %+v", 404, o.Payload)
}

func (o *PutMembersMemberIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutMembersMemberIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutMembersMemberIDDefault creates a PutMembersMemberIDDefault with default headers values
func NewPutMembersMemberIDDefault(code int) *PutMembersMemberIDDefault {
	return &PutMembersMemberIDDefault{
		_statusCode: code,
	}
}

/*
PutMembersMemberIDDefault describes a response with status code -1, with default header values.

Unexpected Error
*/
type PutMembersMemberIDDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this put members member ID default response has a 2xx status code
func (o *PutMembersMemberIDDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this put members member ID default response has a 3xx status code
func (o *PutMembersMemberIDDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this put members member ID default response has a 4xx status code
func (o *PutMembersMemberIDDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this put members member ID default response has a 5xx status code
func (o *PutMembersMemberIDDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this put members member ID default response a status code equal to that given
func (o *PutMembersMemberIDDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the put members member ID default response
func (o *PutMembersMemberIDDefault) Code() int {
	return o._statusCode
}

func (o *PutMembersMemberIDDefault) Error() string {
	return fmt.Sprintf("[PUT /members/{member_id}][%d] PutMembersMemberID default  %+v", o._statusCode, o.Payload)
}

func (o *PutMembersMemberIDDefault) String() string {
	return fmt.Sprintf("[PUT /members/{member_id}][%d] PutMembersMemberID default  %+v", o._statusCode, o.Payload)
}

func (o *PutMembersMemberIDDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutMembersMemberIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PutMembersMemberIDAcceptedBody put members member ID accepted body
swagger:model PutMembersMemberIDAcceptedBody
*/
type PutMembersMemberIDAcceptedBody struct {

	// member
	Member *models.Member `json:"member,omitempty"`
}

// Validate validates this put members member ID accepted body
func (o *PutMembersMemberIDAcceptedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMember(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutMembersMemberIDAcceptedBody) validateMember(formats strfmt.Registry) error {
	if swag.IsZero(o.Member) { // not required
		return nil
	}

	if o.Member != nil {
		if err := o.Member.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putMembersMemberIdAccepted" + "." + "member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putMembersMemberIdAccepted" + "." + "member")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put members member ID accepted body based on the context it is used
func (o *PutMembersMemberIDAcceptedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMember(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutMembersMemberIDAcceptedBody) contextValidateMember(ctx context.Context, formats strfmt.Registry) error {

	if o.Member != nil {
		if err := o.Member.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putMembersMemberIdAccepted" + "." + "member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putMembersMemberIdAccepted" + "." + "member")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutMembersMemberIDAcceptedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutMembersMemberIDAcceptedBody) UnmarshalBinary(b []byte) error {
	var res PutMembersMemberIDAcceptedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PutMembersMemberIDBody put members member ID body
swagger:model PutMembersMemberIDBody
*/
type PutMembersMemberIDBody struct {

	// member
	// Required: true
	Member *models.Member `json:"member"`
}

// Validate validates this put members member ID body
func (o *PutMembersMemberIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMember(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutMembersMemberIDBody) validateMember(formats strfmt.Registry) error {

	if err := validate.Required("member"+"."+"member", "body", o.Member); err != nil {
		return err
	}

	if o.Member != nil {
		if err := o.Member.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("member" + "." + "member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("member" + "." + "member")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put members member ID body based on the context it is used
func (o *PutMembersMemberIDBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMember(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutMembersMemberIDBody) contextValidateMember(ctx context.Context, formats strfmt.Registry) error {

	if o.Member != nil {
		if err := o.Member.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("member" + "." + "member")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("member" + "." + "member")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutMembersMemberIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutMembersMemberIDBody) UnmarshalBinary(b []byte) error {
	var res PutMembersMemberIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
