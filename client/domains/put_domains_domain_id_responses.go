// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sapcc/andromeda/models"
)

// PutDomainsDomainIDReader is a Reader for the PutDomainsDomainID structure.
type PutDomainsDomainIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutDomainsDomainIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPutDomainsDomainIDAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutDomainsDomainIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutDomainsDomainIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutDomainsDomainIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPutDomainsDomainIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutDomainsDomainIDAccepted creates a PutDomainsDomainIDAccepted with default headers values
func NewPutDomainsDomainIDAccepted() *PutDomainsDomainIDAccepted {
	return &PutDomainsDomainIDAccepted{}
}

/*
PutDomainsDomainIDAccepted describes a response with status code 202, with default header values.

Updated domain.
*/
type PutDomainsDomainIDAccepted struct {
	Payload *PutDomainsDomainIDAcceptedBody
}

// IsSuccess returns true when this put domains domain Id accepted response has a 2xx status code
func (o *PutDomainsDomainIDAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put domains domain Id accepted response has a 3xx status code
func (o *PutDomainsDomainIDAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put domains domain Id accepted response has a 4xx status code
func (o *PutDomainsDomainIDAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this put domains domain Id accepted response has a 5xx status code
func (o *PutDomainsDomainIDAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this put domains domain Id accepted response a status code equal to that given
func (o *PutDomainsDomainIDAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the put domains domain Id accepted response
func (o *PutDomainsDomainIDAccepted) Code() int {
	return 202
}

func (o *PutDomainsDomainIDAccepted) Error() string {
	return fmt.Sprintf("[PUT /domains/{domain_id}][%d] putDomainsDomainIdAccepted  %+v", 202, o.Payload)
}

func (o *PutDomainsDomainIDAccepted) String() string {
	return fmt.Sprintf("[PUT /domains/{domain_id}][%d] putDomainsDomainIdAccepted  %+v", 202, o.Payload)
}

func (o *PutDomainsDomainIDAccepted) GetPayload() *PutDomainsDomainIDAcceptedBody {
	return o.Payload
}

func (o *PutDomainsDomainIDAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutDomainsDomainIDAcceptedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDomainsDomainIDBadRequest creates a PutDomainsDomainIDBadRequest with default headers values
func NewPutDomainsDomainIDBadRequest() *PutDomainsDomainIDBadRequest {
	return &PutDomainsDomainIDBadRequest{}
}

/*
PutDomainsDomainIDBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutDomainsDomainIDBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this put domains domain Id bad request response has a 2xx status code
func (o *PutDomainsDomainIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put domains domain Id bad request response has a 3xx status code
func (o *PutDomainsDomainIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put domains domain Id bad request response has a 4xx status code
func (o *PutDomainsDomainIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put domains domain Id bad request response has a 5xx status code
func (o *PutDomainsDomainIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put domains domain Id bad request response a status code equal to that given
func (o *PutDomainsDomainIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put domains domain Id bad request response
func (o *PutDomainsDomainIDBadRequest) Code() int {
	return 400
}

func (o *PutDomainsDomainIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /domains/{domain_id}][%d] putDomainsDomainIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutDomainsDomainIDBadRequest) String() string {
	return fmt.Sprintf("[PUT /domains/{domain_id}][%d] putDomainsDomainIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutDomainsDomainIDBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDomainsDomainIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDomainsDomainIDNotFound creates a PutDomainsDomainIDNotFound with default headers values
func NewPutDomainsDomainIDNotFound() *PutDomainsDomainIDNotFound {
	return &PutDomainsDomainIDNotFound{}
}

/*
PutDomainsDomainIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutDomainsDomainIDNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this put domains domain Id not found response has a 2xx status code
func (o *PutDomainsDomainIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put domains domain Id not found response has a 3xx status code
func (o *PutDomainsDomainIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put domains domain Id not found response has a 4xx status code
func (o *PutDomainsDomainIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put domains domain Id not found response has a 5xx status code
func (o *PutDomainsDomainIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put domains domain Id not found response a status code equal to that given
func (o *PutDomainsDomainIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put domains domain Id not found response
func (o *PutDomainsDomainIDNotFound) Code() int {
	return 404
}

func (o *PutDomainsDomainIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /domains/{domain_id}][%d] putDomainsDomainIdNotFound  %+v", 404, o.Payload)
}

func (o *PutDomainsDomainIDNotFound) String() string {
	return fmt.Sprintf("[PUT /domains/{domain_id}][%d] putDomainsDomainIdNotFound  %+v", 404, o.Payload)
}

func (o *PutDomainsDomainIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDomainsDomainIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDomainsDomainIDConflict creates a PutDomainsDomainIDConflict with default headers values
func NewPutDomainsDomainIDConflict() *PutDomainsDomainIDConflict {
	return &PutDomainsDomainIDConflict{}
}

/*
PutDomainsDomainIDConflict describes a response with status code 409, with default header values.

Conflict
*/
type PutDomainsDomainIDConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this put domains domain Id conflict response has a 2xx status code
func (o *PutDomainsDomainIDConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put domains domain Id conflict response has a 3xx status code
func (o *PutDomainsDomainIDConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put domains domain Id conflict response has a 4xx status code
func (o *PutDomainsDomainIDConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this put domains domain Id conflict response has a 5xx status code
func (o *PutDomainsDomainIDConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this put domains domain Id conflict response a status code equal to that given
func (o *PutDomainsDomainIDConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the put domains domain Id conflict response
func (o *PutDomainsDomainIDConflict) Code() int {
	return 409
}

func (o *PutDomainsDomainIDConflict) Error() string {
	return fmt.Sprintf("[PUT /domains/{domain_id}][%d] putDomainsDomainIdConflict  %+v", 409, o.Payload)
}

func (o *PutDomainsDomainIDConflict) String() string {
	return fmt.Sprintf("[PUT /domains/{domain_id}][%d] putDomainsDomainIdConflict  %+v", 409, o.Payload)
}

func (o *PutDomainsDomainIDConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDomainsDomainIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDomainsDomainIDDefault creates a PutDomainsDomainIDDefault with default headers values
func NewPutDomainsDomainIDDefault(code int) *PutDomainsDomainIDDefault {
	return &PutDomainsDomainIDDefault{
		_statusCode: code,
	}
}

/*
PutDomainsDomainIDDefault describes a response with status code -1, with default header values.

Unexpected Error
*/
type PutDomainsDomainIDDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this put domains domain ID default response has a 2xx status code
func (o *PutDomainsDomainIDDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this put domains domain ID default response has a 3xx status code
func (o *PutDomainsDomainIDDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this put domains domain ID default response has a 4xx status code
func (o *PutDomainsDomainIDDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this put domains domain ID default response has a 5xx status code
func (o *PutDomainsDomainIDDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this put domains domain ID default response a status code equal to that given
func (o *PutDomainsDomainIDDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the put domains domain ID default response
func (o *PutDomainsDomainIDDefault) Code() int {
	return o._statusCode
}

func (o *PutDomainsDomainIDDefault) Error() string {
	return fmt.Sprintf("[PUT /domains/{domain_id}][%d] PutDomainsDomainID default  %+v", o._statusCode, o.Payload)
}

func (o *PutDomainsDomainIDDefault) String() string {
	return fmt.Sprintf("[PUT /domains/{domain_id}][%d] PutDomainsDomainID default  %+v", o._statusCode, o.Payload)
}

func (o *PutDomainsDomainIDDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDomainsDomainIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PutDomainsDomainIDAcceptedBody put domains domain ID accepted body
swagger:model PutDomainsDomainIDAcceptedBody
*/
type PutDomainsDomainIDAcceptedBody struct {

	// domain
	Domain *models.Domain `json:"domain,omitempty"`
}

// Validate validates this put domains domain ID accepted body
func (o *PutDomainsDomainIDAcceptedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutDomainsDomainIDAcceptedBody) validateDomain(formats strfmt.Registry) error {
	if swag.IsZero(o.Domain) { // not required
		return nil
	}

	if o.Domain != nil {
		if err := o.Domain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putDomainsDomainIdAccepted" + "." + "domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putDomainsDomainIdAccepted" + "." + "domain")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put domains domain ID accepted body based on the context it is used
func (o *PutDomainsDomainIDAcceptedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDomain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutDomainsDomainIDAcceptedBody) contextValidateDomain(ctx context.Context, formats strfmt.Registry) error {

	if o.Domain != nil {
		if err := o.Domain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putDomainsDomainIdAccepted" + "." + "domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putDomainsDomainIdAccepted" + "." + "domain")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutDomainsDomainIDAcceptedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutDomainsDomainIDAcceptedBody) UnmarshalBinary(b []byte) error {
	var res PutDomainsDomainIDAcceptedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PutDomainsDomainIDBody put domains domain ID body
swagger:model PutDomainsDomainIDBody
*/
type PutDomainsDomainIDBody struct {

	// domain
	// Required: true
	Domain *models.Domain `json:"domain"`
}

// Validate validates this put domains domain ID body
func (o *PutDomainsDomainIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutDomainsDomainIDBody) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain"+"."+"domain", "body", o.Domain); err != nil {
		return err
	}

	if o.Domain != nil {
		if err := o.Domain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domain" + "." + "domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domain" + "." + "domain")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put domains domain ID body based on the context it is used
func (o *PutDomainsDomainIDBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDomain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutDomainsDomainIDBody) contextValidateDomain(ctx context.Context, formats strfmt.Registry) error {

	if o.Domain != nil {
		if err := o.Domain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domain" + "." + "domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domain" + "." + "domain")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutDomainsDomainIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutDomainsDomainIDBody) UnmarshalBinary(b []byte) error {
	var res PutDomainsDomainIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
