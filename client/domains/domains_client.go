// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new domains API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for domains API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteDomainsDomainID(params *DeleteDomainsDomainIDParams, opts ...ClientOption) (*DeleteDomainsDomainIDNoContent, error)

	GetDomains(params *GetDomainsParams, opts ...ClientOption) (*GetDomainsOK, error)

	GetDomainsDomainID(params *GetDomainsDomainIDParams, opts ...ClientOption) (*GetDomainsDomainIDOK, error)

	PostDomains(params *PostDomainsParams, opts ...ClientOption) (*PostDomainsCreated, error)

	PutDomainsDomainID(params *PutDomainsDomainIDParams, opts ...ClientOption) (*PutDomainsDomainIDAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteDomainsDomainID deletes a domain
*/
func (a *Client) DeleteDomainsDomainID(params *DeleteDomainsDomainIDParams, opts ...ClientOption) (*DeleteDomainsDomainIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDomainsDomainIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDomainsDomainID",
		Method:             "DELETE",
		PathPattern:        "/domains/{domain_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDomainsDomainIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDomainsDomainIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDomainsDomainIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDomains lists domains
*/
func (a *Client) GetDomains(params *GetDomainsParams, opts ...ClientOption) (*GetDomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDomains",
		Method:             "GET",
		PathPattern:        "/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDomainsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomainsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDomainsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDomainsDomainID shows domain detail
*/
func (a *Client) GetDomainsDomainID(params *GetDomainsDomainIDParams, opts ...ClientOption) (*GetDomainsDomainIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainsDomainIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDomainsDomainID",
		Method:             "GET",
		PathPattern:        "/domains/{domain_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDomainsDomainIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomainsDomainIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDomainsDomainIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostDomains creates new domain
*/
func (a *Client) PostDomains(params *PostDomainsParams, opts ...ClientOption) (*PostDomainsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDomains",
		Method:             "POST",
		PathPattern:        "/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDomainsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDomainsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostDomainsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutDomainsDomainID updates a domain
*/
func (a *Client) PutDomainsDomainID(params *PutDomainsDomainIDParams, opts ...ClientOption) (*PutDomainsDomainIDAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDomainsDomainIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutDomainsDomainID",
		Method:             "PUT",
		PathPattern:        "/domains/{domain_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDomainsDomainIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDomainsDomainIDAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutDomainsDomainIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
