// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sapcc/andromeda/models"
)

// GetDomainsDomainIDReader is a Reader for the GetDomainsDomainID structure.
type GetDomainsDomainIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDomainsDomainIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDomainsDomainIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetDomainsDomainIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetDomainsDomainIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetDomainsDomainIDOK creates a GetDomainsDomainIDOK with default headers values
func NewGetDomainsDomainIDOK() *GetDomainsDomainIDOK {
	return &GetDomainsDomainIDOK{}
}

/*
GetDomainsDomainIDOK describes a response with status code 200, with default header values.

Shows the details of a specific domain.
*/
type GetDomainsDomainIDOK struct {
	Payload *GetDomainsDomainIDOKBody
}

// IsSuccess returns true when this get domains domain Id o k response has a 2xx status code
func (o *GetDomainsDomainIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get domains domain Id o k response has a 3xx status code
func (o *GetDomainsDomainIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domains domain Id o k response has a 4xx status code
func (o *GetDomainsDomainIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get domains domain Id o k response has a 5xx status code
func (o *GetDomainsDomainIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get domains domain Id o k response a status code equal to that given
func (o *GetDomainsDomainIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get domains domain Id o k response
func (o *GetDomainsDomainIDOK) Code() int {
	return 200
}

func (o *GetDomainsDomainIDOK) Error() string {
	return fmt.Sprintf("[GET /domains/{domain_id}][%d] getDomainsDomainIdOK  %+v", 200, o.Payload)
}

func (o *GetDomainsDomainIDOK) String() string {
	return fmt.Sprintf("[GET /domains/{domain_id}][%d] getDomainsDomainIdOK  %+v", 200, o.Payload)
}

func (o *GetDomainsDomainIDOK) GetPayload() *GetDomainsDomainIDOKBody {
	return o.Payload
}

func (o *GetDomainsDomainIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDomainsDomainIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainsDomainIDNotFound creates a GetDomainsDomainIDNotFound with default headers values
func NewGetDomainsDomainIDNotFound() *GetDomainsDomainIDNotFound {
	return &GetDomainsDomainIDNotFound{}
}

/*
GetDomainsDomainIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetDomainsDomainIDNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get domains domain Id not found response has a 2xx status code
func (o *GetDomainsDomainIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domains domain Id not found response has a 3xx status code
func (o *GetDomainsDomainIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domains domain Id not found response has a 4xx status code
func (o *GetDomainsDomainIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domains domain Id not found response has a 5xx status code
func (o *GetDomainsDomainIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get domains domain Id not found response a status code equal to that given
func (o *GetDomainsDomainIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get domains domain Id not found response
func (o *GetDomainsDomainIDNotFound) Code() int {
	return 404
}

func (o *GetDomainsDomainIDNotFound) Error() string {
	return fmt.Sprintf("[GET /domains/{domain_id}][%d] getDomainsDomainIdNotFound  %+v", 404, o.Payload)
}

func (o *GetDomainsDomainIDNotFound) String() string {
	return fmt.Sprintf("[GET /domains/{domain_id}][%d] getDomainsDomainIdNotFound  %+v", 404, o.Payload)
}

func (o *GetDomainsDomainIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDomainsDomainIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainsDomainIDDefault creates a GetDomainsDomainIDDefault with default headers values
func NewGetDomainsDomainIDDefault(code int) *GetDomainsDomainIDDefault {
	return &GetDomainsDomainIDDefault{
		_statusCode: code,
	}
}

/*
GetDomainsDomainIDDefault describes a response with status code -1, with default header values.

Unexpected Error
*/
type GetDomainsDomainIDDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this get domains domain ID default response has a 2xx status code
func (o *GetDomainsDomainIDDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get domains domain ID default response has a 3xx status code
func (o *GetDomainsDomainIDDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get domains domain ID default response has a 4xx status code
func (o *GetDomainsDomainIDDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get domains domain ID default response has a 5xx status code
func (o *GetDomainsDomainIDDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get domains domain ID default response a status code equal to that given
func (o *GetDomainsDomainIDDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get domains domain ID default response
func (o *GetDomainsDomainIDDefault) Code() int {
	return o._statusCode
}

func (o *GetDomainsDomainIDDefault) Error() string {
	return fmt.Sprintf("[GET /domains/{domain_id}][%d] GetDomainsDomainID default  %+v", o._statusCode, o.Payload)
}

func (o *GetDomainsDomainIDDefault) String() string {
	return fmt.Sprintf("[GET /domains/{domain_id}][%d] GetDomainsDomainID default  %+v", o._statusCode, o.Payload)
}

func (o *GetDomainsDomainIDDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDomainsDomainIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetDomainsDomainIDOKBody get domains domain ID o k body
swagger:model GetDomainsDomainIDOKBody
*/
type GetDomainsDomainIDOKBody struct {

	// domain
	Domain *models.Domain `json:"domain,omitempty"`
}

// Validate validates this get domains domain ID o k body
func (o *GetDomainsDomainIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDomainsDomainIDOKBody) validateDomain(formats strfmt.Registry) error {
	if swag.IsZero(o.Domain) { // not required
		return nil
	}

	if o.Domain != nil {
		if err := o.Domain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDomainsDomainIdOK" + "." + "domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDomainsDomainIdOK" + "." + "domain")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get domains domain ID o k body based on the context it is used
func (o *GetDomainsDomainIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDomain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDomainsDomainIDOKBody) contextValidateDomain(ctx context.Context, formats strfmt.Registry) error {

	if o.Domain != nil {
		if err := o.Domain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDomainsDomainIdOK" + "." + "domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDomainsDomainIdOK" + "." + "domain")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDomainsDomainIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDomainsDomainIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetDomainsDomainIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
