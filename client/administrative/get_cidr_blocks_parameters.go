// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package administrative

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetCidrBlocksParams creates a new GetCidrBlocksParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetCidrBlocksParams() *GetCidrBlocksParams {
	return &GetCidrBlocksParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetCidrBlocksParamsWithTimeout creates a new GetCidrBlocksParams object
// with the ability to set a timeout on a request.
func NewGetCidrBlocksParamsWithTimeout(timeout time.Duration) *GetCidrBlocksParams {
	return &GetCidrBlocksParams{
		timeout: timeout,
	}
}

// NewGetCidrBlocksParamsWithContext creates a new GetCidrBlocksParams object
// with the ability to set a context for a request.
func NewGetCidrBlocksParamsWithContext(ctx context.Context) *GetCidrBlocksParams {
	return &GetCidrBlocksParams{
		Context: ctx,
	}
}

// NewGetCidrBlocksParamsWithHTTPClient creates a new GetCidrBlocksParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetCidrBlocksParamsWithHTTPClient(client *http.Client) *GetCidrBlocksParams {
	return &GetCidrBlocksParams{
		HTTPClient: client,
	}
}

/*
GetCidrBlocksParams contains all the parameters to send to the API endpoint

	for the get cidr blocks operation.

	Typically these are written to a http.Request.
*/
type GetCidrBlocksParams struct {

	/* Provider.

	   The provider to filter the CIDR blocks by.
	*/
	Provider *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get cidr blocks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCidrBlocksParams) WithDefaults() *GetCidrBlocksParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get cidr blocks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCidrBlocksParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get cidr blocks params
func (o *GetCidrBlocksParams) WithTimeout(timeout time.Duration) *GetCidrBlocksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get cidr blocks params
func (o *GetCidrBlocksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get cidr blocks params
func (o *GetCidrBlocksParams) WithContext(ctx context.Context) *GetCidrBlocksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get cidr blocks params
func (o *GetCidrBlocksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get cidr blocks params
func (o *GetCidrBlocksParams) WithHTTPClient(client *http.Client) *GetCidrBlocksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get cidr blocks params
func (o *GetCidrBlocksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithProvider adds the provider to the get cidr blocks params
func (o *GetCidrBlocksParams) WithProvider(provider *string) *GetCidrBlocksParams {
	o.SetProvider(provider)
	return o
}

// SetProvider adds the provider to the get cidr blocks params
func (o *GetCidrBlocksParams) SetProvider(provider *string) {
	o.Provider = provider
}

// WriteToRequest writes these params to a swagger request
func (o *GetCidrBlocksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Provider != nil {

		// query param provider
		var qrProvider string

		if o.Provider != nil {
			qrProvider = *o.Provider
		}
		qProvider := qrProvider
		if qProvider != "" {

			if err := r.SetQueryParam("provider", qProvider); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
