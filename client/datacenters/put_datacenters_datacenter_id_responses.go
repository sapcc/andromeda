// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package datacenters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sapcc/andromeda/models"
)

// PutDatacentersDatacenterIDReader is a Reader for the PutDatacentersDatacenterID structure.
type PutDatacentersDatacenterIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutDatacentersDatacenterIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPutDatacentersDatacenterIDAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewPutDatacentersDatacenterIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPutDatacentersDatacenterIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutDatacentersDatacenterIDAccepted creates a PutDatacentersDatacenterIDAccepted with default headers values
func NewPutDatacentersDatacenterIDAccepted() *PutDatacentersDatacenterIDAccepted {
	return &PutDatacentersDatacenterIDAccepted{}
}

/*
PutDatacentersDatacenterIDAccepted describes a response with status code 202, with default header values.

Updated datacenter.
*/
type PutDatacentersDatacenterIDAccepted struct {
	Payload *PutDatacentersDatacenterIDAcceptedBody
}

// IsSuccess returns true when this put datacenters datacenter Id accepted response has a 2xx status code
func (o *PutDatacentersDatacenterIDAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put datacenters datacenter Id accepted response has a 3xx status code
func (o *PutDatacentersDatacenterIDAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put datacenters datacenter Id accepted response has a 4xx status code
func (o *PutDatacentersDatacenterIDAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this put datacenters datacenter Id accepted response has a 5xx status code
func (o *PutDatacentersDatacenterIDAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this put datacenters datacenter Id accepted response a status code equal to that given
func (o *PutDatacentersDatacenterIDAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the put datacenters datacenter Id accepted response
func (o *PutDatacentersDatacenterIDAccepted) Code() int {
	return 202
}

func (o *PutDatacentersDatacenterIDAccepted) Error() string {
	return fmt.Sprintf("[PUT /datacenters/{datacenter_id}][%d] putDatacentersDatacenterIdAccepted  %+v", 202, o.Payload)
}

func (o *PutDatacentersDatacenterIDAccepted) String() string {
	return fmt.Sprintf("[PUT /datacenters/{datacenter_id}][%d] putDatacentersDatacenterIdAccepted  %+v", 202, o.Payload)
}

func (o *PutDatacentersDatacenterIDAccepted) GetPayload() *PutDatacentersDatacenterIDAcceptedBody {
	return o.Payload
}

func (o *PutDatacentersDatacenterIDAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutDatacentersDatacenterIDAcceptedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDatacentersDatacenterIDNotFound creates a PutDatacentersDatacenterIDNotFound with default headers values
func NewPutDatacentersDatacenterIDNotFound() *PutDatacentersDatacenterIDNotFound {
	return &PutDatacentersDatacenterIDNotFound{}
}

/*
PutDatacentersDatacenterIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutDatacentersDatacenterIDNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this put datacenters datacenter Id not found response has a 2xx status code
func (o *PutDatacentersDatacenterIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put datacenters datacenter Id not found response has a 3xx status code
func (o *PutDatacentersDatacenterIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put datacenters datacenter Id not found response has a 4xx status code
func (o *PutDatacentersDatacenterIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put datacenters datacenter Id not found response has a 5xx status code
func (o *PutDatacentersDatacenterIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put datacenters datacenter Id not found response a status code equal to that given
func (o *PutDatacentersDatacenterIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put datacenters datacenter Id not found response
func (o *PutDatacentersDatacenterIDNotFound) Code() int {
	return 404
}

func (o *PutDatacentersDatacenterIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /datacenters/{datacenter_id}][%d] putDatacentersDatacenterIdNotFound  %+v", 404, o.Payload)
}

func (o *PutDatacentersDatacenterIDNotFound) String() string {
	return fmt.Sprintf("[PUT /datacenters/{datacenter_id}][%d] putDatacentersDatacenterIdNotFound  %+v", 404, o.Payload)
}

func (o *PutDatacentersDatacenterIDNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDatacentersDatacenterIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDatacentersDatacenterIDDefault creates a PutDatacentersDatacenterIDDefault with default headers values
func NewPutDatacentersDatacenterIDDefault(code int) *PutDatacentersDatacenterIDDefault {
	return &PutDatacentersDatacenterIDDefault{
		_statusCode: code,
	}
}

/*
PutDatacentersDatacenterIDDefault describes a response with status code -1, with default header values.

Unexpected Error
*/
type PutDatacentersDatacenterIDDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this put datacenters datacenter ID default response has a 2xx status code
func (o *PutDatacentersDatacenterIDDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this put datacenters datacenter ID default response has a 3xx status code
func (o *PutDatacentersDatacenterIDDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this put datacenters datacenter ID default response has a 4xx status code
func (o *PutDatacentersDatacenterIDDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this put datacenters datacenter ID default response has a 5xx status code
func (o *PutDatacentersDatacenterIDDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this put datacenters datacenter ID default response a status code equal to that given
func (o *PutDatacentersDatacenterIDDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the put datacenters datacenter ID default response
func (o *PutDatacentersDatacenterIDDefault) Code() int {
	return o._statusCode
}

func (o *PutDatacentersDatacenterIDDefault) Error() string {
	return fmt.Sprintf("[PUT /datacenters/{datacenter_id}][%d] PutDatacentersDatacenterID default  %+v", o._statusCode, o.Payload)
}

func (o *PutDatacentersDatacenterIDDefault) String() string {
	return fmt.Sprintf("[PUT /datacenters/{datacenter_id}][%d] PutDatacentersDatacenterID default  %+v", o._statusCode, o.Payload)
}

func (o *PutDatacentersDatacenterIDDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutDatacentersDatacenterIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PutDatacentersDatacenterIDAcceptedBody put datacenters datacenter ID accepted body
swagger:model PutDatacentersDatacenterIDAcceptedBody
*/
type PutDatacentersDatacenterIDAcceptedBody struct {

	// datacenter
	Datacenter *models.Datacenter `json:"datacenter,omitempty"`
}

// Validate validates this put datacenters datacenter ID accepted body
func (o *PutDatacentersDatacenterIDAcceptedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDatacenter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutDatacentersDatacenterIDAcceptedBody) validateDatacenter(formats strfmt.Registry) error {
	if swag.IsZero(o.Datacenter) { // not required
		return nil
	}

	if o.Datacenter != nil {
		if err := o.Datacenter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putDatacentersDatacenterIdAccepted" + "." + "datacenter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putDatacentersDatacenterIdAccepted" + "." + "datacenter")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put datacenters datacenter ID accepted body based on the context it is used
func (o *PutDatacentersDatacenterIDAcceptedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDatacenter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutDatacentersDatacenterIDAcceptedBody) contextValidateDatacenter(ctx context.Context, formats strfmt.Registry) error {

	if o.Datacenter != nil {
		if err := o.Datacenter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putDatacentersDatacenterIdAccepted" + "." + "datacenter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putDatacentersDatacenterIdAccepted" + "." + "datacenter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutDatacentersDatacenterIDAcceptedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutDatacentersDatacenterIDAcceptedBody) UnmarshalBinary(b []byte) error {
	var res PutDatacentersDatacenterIDAcceptedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PutDatacentersDatacenterIDBody put datacenters datacenter ID body
swagger:model PutDatacentersDatacenterIDBody
*/
type PutDatacentersDatacenterIDBody struct {

	// datacenter
	// Required: true
	Datacenter *models.Datacenter `json:"datacenter"`
}

// Validate validates this put datacenters datacenter ID body
func (o *PutDatacentersDatacenterIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDatacenter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutDatacentersDatacenterIDBody) validateDatacenter(formats strfmt.Registry) error {

	if err := validate.Required("datacenter"+"."+"datacenter", "body", o.Datacenter); err != nil {
		return err
	}

	if o.Datacenter != nil {
		if err := o.Datacenter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datacenter" + "." + "datacenter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datacenter" + "." + "datacenter")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put datacenters datacenter ID body based on the context it is used
func (o *PutDatacentersDatacenterIDBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDatacenter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutDatacentersDatacenterIDBody) contextValidateDatacenter(ctx context.Context, formats strfmt.Registry) error {

	if o.Datacenter != nil {
		if err := o.Datacenter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datacenter" + "." + "datacenter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("datacenter" + "." + "datacenter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutDatacentersDatacenterIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutDatacentersDatacenterIDBody) UnmarshalBinary(b []byte) error {
	var res PutDatacentersDatacenterIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
