// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package datacenters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sapcc/andromeda/models"
)

// GetDatacentersReader is a Reader for the GetDatacenters structure.
type GetDatacentersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDatacentersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDatacentersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDatacentersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetDatacentersDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetDatacentersOK creates a GetDatacentersOK with default headers values
func NewGetDatacentersOK() *GetDatacentersOK {
	return &GetDatacentersOK{}
}

/*
GetDatacentersOK describes a response with status code 200, with default header values.

A JSON array of datacenters
*/
type GetDatacentersOK struct {
	Payload *GetDatacentersOKBody
}

// IsSuccess returns true when this get datacenters o k response has a 2xx status code
func (o *GetDatacentersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get datacenters o k response has a 3xx status code
func (o *GetDatacentersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get datacenters o k response has a 4xx status code
func (o *GetDatacentersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get datacenters o k response has a 5xx status code
func (o *GetDatacentersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get datacenters o k response a status code equal to that given
func (o *GetDatacentersOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get datacenters o k response
func (o *GetDatacentersOK) Code() int {
	return 200
}

func (o *GetDatacentersOK) Error() string {
	return fmt.Sprintf("[GET /datacenters][%d] getDatacentersOK  %+v", 200, o.Payload)
}

func (o *GetDatacentersOK) String() string {
	return fmt.Sprintf("[GET /datacenters][%d] getDatacentersOK  %+v", 200, o.Payload)
}

func (o *GetDatacentersOK) GetPayload() *GetDatacentersOKBody {
	return o.Payload
}

func (o *GetDatacentersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDatacentersOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDatacentersBadRequest creates a GetDatacentersBadRequest with default headers values
func NewGetDatacentersBadRequest() *GetDatacentersBadRequest {
	return &GetDatacentersBadRequest{}
}

/*
GetDatacentersBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetDatacentersBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get datacenters bad request response has a 2xx status code
func (o *GetDatacentersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get datacenters bad request response has a 3xx status code
func (o *GetDatacentersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get datacenters bad request response has a 4xx status code
func (o *GetDatacentersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get datacenters bad request response has a 5xx status code
func (o *GetDatacentersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get datacenters bad request response a status code equal to that given
func (o *GetDatacentersBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get datacenters bad request response
func (o *GetDatacentersBadRequest) Code() int {
	return 400
}

func (o *GetDatacentersBadRequest) Error() string {
	return fmt.Sprintf("[GET /datacenters][%d] getDatacentersBadRequest  %+v", 400, o.Payload)
}

func (o *GetDatacentersBadRequest) String() string {
	return fmt.Sprintf("[GET /datacenters][%d] getDatacentersBadRequest  %+v", 400, o.Payload)
}

func (o *GetDatacentersBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDatacentersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDatacentersDefault creates a GetDatacentersDefault with default headers values
func NewGetDatacentersDefault(code int) *GetDatacentersDefault {
	return &GetDatacentersDefault{
		_statusCode: code,
	}
}

/*
GetDatacentersDefault describes a response with status code -1, with default header values.

Unexpected Error
*/
type GetDatacentersDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this get datacenters default response has a 2xx status code
func (o *GetDatacentersDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get datacenters default response has a 3xx status code
func (o *GetDatacentersDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get datacenters default response has a 4xx status code
func (o *GetDatacentersDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get datacenters default response has a 5xx status code
func (o *GetDatacentersDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get datacenters default response a status code equal to that given
func (o *GetDatacentersDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get datacenters default response
func (o *GetDatacentersDefault) Code() int {
	return o._statusCode
}

func (o *GetDatacentersDefault) Error() string {
	return fmt.Sprintf("[GET /datacenters][%d] GetDatacenters default  %+v", o._statusCode, o.Payload)
}

func (o *GetDatacentersDefault) String() string {
	return fmt.Sprintf("[GET /datacenters][%d] GetDatacenters default  %+v", o._statusCode, o.Payload)
}

func (o *GetDatacentersDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDatacentersDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetDatacentersOKBody get datacenters o k body
swagger:model GetDatacentersOKBody
*/
type GetDatacentersOKBody struct {

	// datacenters
	Datacenters []*models.Datacenter `json:"datacenters"`

	// links
	Links []*models.Link `json:"links,omitempty"`
}

// Validate validates this get datacenters o k body
func (o *GetDatacentersOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDatacenters(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDatacentersOKBody) validateDatacenters(formats strfmt.Registry) error {
	if swag.IsZero(o.Datacenters) { // not required
		return nil
	}

	for i := 0; i < len(o.Datacenters); i++ {
		if swag.IsZero(o.Datacenters[i]) { // not required
			continue
		}

		if o.Datacenters[i] != nil {
			if err := o.Datacenters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDatacentersOK" + "." + "datacenters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDatacentersOK" + "." + "datacenters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetDatacentersOKBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	for i := 0; i < len(o.Links); i++ {
		if swag.IsZero(o.Links[i]) { // not required
			continue
		}

		if o.Links[i] != nil {
			if err := o.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDatacentersOK" + "." + "links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDatacentersOK" + "." + "links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get datacenters o k body based on the context it is used
func (o *GetDatacentersOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDatacenters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDatacentersOKBody) contextValidateDatacenters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Datacenters); i++ {

		if o.Datacenters[i] != nil {
			if err := o.Datacenters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDatacentersOK" + "." + "datacenters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDatacentersOK" + "." + "datacenters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetDatacentersOKBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Links); i++ {

		if o.Links[i] != nil {
			if err := o.Links[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDatacentersOK" + "." + "links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDatacentersOK" + "." + "links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDatacentersOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDatacentersOKBody) UnmarshalBinary(b []byte) error {
	var res GetDatacentersOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
