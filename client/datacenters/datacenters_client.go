// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package datacenters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new datacenters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for datacenters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteDatacentersDatacenterID(params *DeleteDatacentersDatacenterIDParams, opts ...ClientOption) (*DeleteDatacentersDatacenterIDNoContent, error)

	GetDatacenters(params *GetDatacentersParams, opts ...ClientOption) (*GetDatacentersOK, error)

	GetDatacentersDatacenterID(params *GetDatacentersDatacenterIDParams, opts ...ClientOption) (*GetDatacentersDatacenterIDOK, error)

	PostDatacenters(params *PostDatacentersParams, opts ...ClientOption) (*PostDatacentersCreated, error)

	PutDatacentersDatacenterID(params *PutDatacentersDatacenterIDParams, opts ...ClientOption) (*PutDatacentersDatacenterIDAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteDatacentersDatacenterID deletes a datacenter
*/
func (a *Client) DeleteDatacentersDatacenterID(params *DeleteDatacentersDatacenterIDParams, opts ...ClientOption) (*DeleteDatacentersDatacenterIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDatacentersDatacenterIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDatacentersDatacenterID",
		Method:             "DELETE",
		PathPattern:        "/datacenters/{datacenter_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDatacentersDatacenterIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDatacentersDatacenterIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDatacentersDatacenterIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDatacenters lists datacenters
*/
func (a *Client) GetDatacenters(params *GetDatacentersParams, opts ...ClientOption) (*GetDatacentersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatacentersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDatacenters",
		Method:             "GET",
		PathPattern:        "/datacenters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDatacentersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatacentersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDatacentersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDatacentersDatacenterID shows datacenter detail
*/
func (a *Client) GetDatacentersDatacenterID(params *GetDatacentersDatacenterIDParams, opts ...ClientOption) (*GetDatacentersDatacenterIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatacentersDatacenterIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDatacentersDatacenterID",
		Method:             "GET",
		PathPattern:        "/datacenters/{datacenter_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDatacentersDatacenterIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatacentersDatacenterIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDatacentersDatacenterIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostDatacenters creates new datacenter
*/
func (a *Client) PostDatacenters(params *PostDatacentersParams, opts ...ClientOption) (*PostDatacentersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDatacentersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDatacenters",
		Method:             "POST",
		PathPattern:        "/datacenters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDatacentersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDatacentersCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostDatacentersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutDatacentersDatacenterID updates a datacenter
*/
func (a *Client) PutDatacentersDatacenterID(params *PutDatacentersDatacenterIDParams, opts ...ClientOption) (*PutDatacentersDatacenterIDAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDatacentersDatacenterIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutDatacentersDatacenterID",
		Method:             "PUT",
		PathPattern:        "/datacenters/{datacenter_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDatacentersDatacenterIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDatacentersDatacenterIDAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutDatacentersDatacenterIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
