// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sapcc/andromeda/models"
)

// GetMetricsAkamaiTotalDNSRequestsHandlerFunc turns a function with the right signature into a get metrics akamai total DNS requests handler
type GetMetricsAkamaiTotalDNSRequestsHandlerFunc func(GetMetricsAkamaiTotalDNSRequestsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMetricsAkamaiTotalDNSRequestsHandlerFunc) Handle(params GetMetricsAkamaiTotalDNSRequestsParams) middleware.Responder {
	return fn(params)
}

// GetMetricsAkamaiTotalDNSRequestsHandler interface for that can handle valid get metrics akamai total DNS requests params
type GetMetricsAkamaiTotalDNSRequestsHandler interface {
	Handle(GetMetricsAkamaiTotalDNSRequestsParams) middleware.Responder
}

// NewGetMetricsAkamaiTotalDNSRequests creates a new http.Handler for the get metrics akamai total DNS requests operation
func NewGetMetricsAkamaiTotalDNSRequests(ctx *middleware.Context, handler GetMetricsAkamaiTotalDNSRequestsHandler) *GetMetricsAkamaiTotalDNSRequests {
	return &GetMetricsAkamaiTotalDNSRequests{Context: ctx, Handler: handler}
}

/*
	GetMetricsAkamaiTotalDNSRequests swagger:route GET /metrics/akamai/total-dns-requests Metrics getMetricsAkamaiTotalDnsRequests

# Get total DNS requests for Akamai GTM properties

Retrieve DNS request metrics for Akamai Global Traffic Management (GTM) properties
*/
type GetMetricsAkamaiTotalDNSRequests struct {
	Context *middleware.Context
	Handler GetMetricsAkamaiTotalDNSRequestsHandler
}

func (o *GetMetricsAkamaiTotalDNSRequests) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetMetricsAkamaiTotalDNSRequestsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetMetricsAkamaiTotalDNSRequestsOKBody get metrics akamai total DNS requests o k body
//
// swagger:model GetMetricsAkamaiTotalDNSRequestsOKBody
type GetMetricsAkamaiTotalDNSRequestsOKBody struct {

	// total dns requests
	TotalDNSRequests *models.AkamaiTotalDNSRequests `json:"total_dns_requests,omitempty"`
}

// Validate validates this get metrics akamai total DNS requests o k body
func (o *GetMetricsAkamaiTotalDNSRequestsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTotalDNSRequests(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetMetricsAkamaiTotalDNSRequestsOKBody) validateTotalDNSRequests(formats strfmt.Registry) error {
	if swag.IsZero(o.TotalDNSRequests) { // not required
		return nil
	}

	if o.TotalDNSRequests != nil {
		if err := o.TotalDNSRequests.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getMetricsAkamaiTotalDnsRequestsOK" + "." + "total_dns_requests")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getMetricsAkamaiTotalDnsRequestsOK" + "." + "total_dns_requests")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get metrics akamai total DNS requests o k body based on the context it is used
func (o *GetMetricsAkamaiTotalDNSRequestsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTotalDNSRequests(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetMetricsAkamaiTotalDNSRequestsOKBody) contextValidateTotalDNSRequests(ctx context.Context, formats strfmt.Registry) error {

	if o.TotalDNSRequests != nil {
		if err := o.TotalDNSRequests.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getMetricsAkamaiTotalDnsRequestsOK" + "." + "total_dns_requests")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getMetricsAkamaiTotalDnsRequestsOK" + "." + "total_dns_requests")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetMetricsAkamaiTotalDNSRequestsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMetricsAkamaiTotalDNSRequestsOKBody) UnmarshalBinary(b []byte) error {
	var res GetMetricsAkamaiTotalDNSRequestsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
