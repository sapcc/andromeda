// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetMetricsAkamaiTotalDNSRequestsParams creates a new GetMetricsAkamaiTotalDNSRequestsParams object
// with the default values initialized.
func NewGetMetricsAkamaiTotalDNSRequestsParams() GetMetricsAkamaiTotalDNSRequestsParams {

	var (
		// initialize parameters with default values

		timeRangeDefault = string("last_hour")
	)

	return GetMetricsAkamaiTotalDNSRequestsParams{
		TimeRange: &timeRangeDefault,
	}
}

// GetMetricsAkamaiTotalDNSRequestsParams contains all the bound params for the get metrics akamai total DNS requests operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetMetricsAkamaiTotalDNSRequests
type GetMetricsAkamaiTotalDNSRequestsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Filter metrics by project ID
	  In: query
	*/
	ProjectID *string
	/*Filter metrics by Akamai GTM property name
	  In: query
	*/
	PropertyName *string
	/*Time range for metrics data
	  In: query
	  Default: "last_hour"
	*/
	TimeRange *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetMetricsAkamaiTotalDNSRequestsParams() beforehand.
func (o *GetMetricsAkamaiTotalDNSRequestsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qProjectID, qhkProjectID, _ := qs.GetOK("project_id")
	if err := o.bindProjectID(qProjectID, qhkProjectID, route.Formats); err != nil {
		res = append(res, err)
	}

	qPropertyName, qhkPropertyName, _ := qs.GetOK("property_name")
	if err := o.bindPropertyName(qPropertyName, qhkPropertyName, route.Formats); err != nil {
		res = append(res, err)
	}

	qTimeRange, qhkTimeRange, _ := qs.GetOK("time_range")
	if err := o.bindTimeRange(qTimeRange, qhkTimeRange, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindProjectID binds and validates parameter ProjectID from query.
func (o *GetMetricsAkamaiTotalDNSRequestsParams) bindProjectID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ProjectID = &raw

	return nil
}

// bindPropertyName binds and validates parameter PropertyName from query.
func (o *GetMetricsAkamaiTotalDNSRequestsParams) bindPropertyName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.PropertyName = &raw

	return nil
}

// bindTimeRange binds and validates parameter TimeRange from query.
func (o *GetMetricsAkamaiTotalDNSRequestsParams) bindTimeRange(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetMetricsAkamaiTotalDNSRequestsParams()
		return nil
	}
	o.TimeRange = &raw

	if err := o.validateTimeRange(formats); err != nil {
		return err
	}

	return nil
}

// validateTimeRange carries on validations for parameter TimeRange
func (o *GetMetricsAkamaiTotalDNSRequestsParams) validateTimeRange(formats strfmt.Registry) error {

	if err := validate.EnumCase("time_range", "query", *o.TimeRange, []interface{}{"last_hour", "last_day", "last_week"}, true); err != nil {
		return err
	}

	return nil
}
