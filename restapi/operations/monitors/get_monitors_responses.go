// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sapcc/andromeda/models"
)

// GetMonitorsOKCode is the HTTP code returned for type GetMonitorsOK
const GetMonitorsOKCode int = 200

/*
GetMonitorsOK A JSON array of monitors

swagger:response getMonitorsOK
*/
type GetMonitorsOK struct {

	/*
	  In: Body
	*/
	Payload *GetMonitorsOKBody `json:"body,omitempty"`
}

// NewGetMonitorsOK creates GetMonitorsOK with default headers values
func NewGetMonitorsOK() *GetMonitorsOK {

	return &GetMonitorsOK{}
}

// WithPayload adds the payload to the get monitors o k response
func (o *GetMonitorsOK) WithPayload(payload *GetMonitorsOKBody) *GetMonitorsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get monitors o k response
func (o *GetMonitorsOK) SetPayload(payload *GetMonitorsOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMonitorsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetMonitorsBadRequestCode is the HTTP code returned for type GetMonitorsBadRequest
const GetMonitorsBadRequestCode int = 400

/*
GetMonitorsBadRequest Bad request

swagger:response getMonitorsBadRequest
*/
type GetMonitorsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetMonitorsBadRequest creates GetMonitorsBadRequest with default headers values
func NewGetMonitorsBadRequest() *GetMonitorsBadRequest {

	return &GetMonitorsBadRequest{}
}

// WithPayload adds the payload to the get monitors bad request response
func (o *GetMonitorsBadRequest) WithPayload(payload *models.Error) *GetMonitorsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get monitors bad request response
func (o *GetMonitorsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMonitorsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
GetMonitorsDefault Unexpected Error

swagger:response getMonitorsDefault
*/
type GetMonitorsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetMonitorsDefault creates GetMonitorsDefault with default headers values
func NewGetMonitorsDefault(code int) *GetMonitorsDefault {
	if code <= 0 {
		code = 500
	}

	return &GetMonitorsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get monitors default response
func (o *GetMonitorsDefault) WithStatusCode(code int) *GetMonitorsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get monitors default response
func (o *GetMonitorsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get monitors default response
func (o *GetMonitorsDefault) WithPayload(payload *models.Error) *GetMonitorsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get monitors default response
func (o *GetMonitorsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMonitorsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
