// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sapcc/andromeda/models"
)

// PostMonitorsHandlerFunc turns a function with the right signature into a post monitors handler
type PostMonitorsHandlerFunc func(PostMonitorsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostMonitorsHandlerFunc) Handle(params PostMonitorsParams) middleware.Responder {
	return fn(params)
}

// PostMonitorsHandler interface for that can handle valid post monitors params
type PostMonitorsHandler interface {
	Handle(PostMonitorsParams) middleware.Responder
}

// NewPostMonitors creates a new http.Handler for the post monitors operation
func NewPostMonitors(ctx *middleware.Context, handler PostMonitorsHandler) *PostMonitors {
	return &PostMonitors{Context: ctx, Handler: handler}
}

/*
	PostMonitors swagger:route POST /monitors Monitors postMonitors

Create new monitor
*/
type PostMonitors struct {
	Context *middleware.Context
	Handler PostMonitorsHandler
}

func (o *PostMonitors) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostMonitorsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostMonitorsBody post monitors body
//
// swagger:model PostMonitorsBody
type PostMonitorsBody struct {

	// monitor
	// Required: true
	Monitor *models.Monitor `json:"monitor"`
}

// Validate validates this post monitors body
func (o *PostMonitorsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMonitor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostMonitorsBody) validateMonitor(formats strfmt.Registry) error {

	if err := validate.Required("monitor"+"."+"monitor", "body", o.Monitor); err != nil {
		return err
	}

	if o.Monitor != nil {
		if err := o.Monitor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitor" + "." + "monitor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitor" + "." + "monitor")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post monitors body based on the context it is used
func (o *PostMonitorsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMonitor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostMonitorsBody) contextValidateMonitor(ctx context.Context, formats strfmt.Registry) error {

	if o.Monitor != nil {
		if err := o.Monitor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitor" + "." + "monitor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitor" + "." + "monitor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostMonitorsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostMonitorsBody) UnmarshalBinary(b []byte) error {
	var res PostMonitorsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostMonitorsCreatedBody post monitors created body
//
// swagger:model PostMonitorsCreatedBody
type PostMonitorsCreatedBody struct {

	// monitor
	Monitor *models.Monitor `json:"monitor,omitempty"`
}

// Validate validates this post monitors created body
func (o *PostMonitorsCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMonitor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostMonitorsCreatedBody) validateMonitor(formats strfmt.Registry) error {
	if swag.IsZero(o.Monitor) { // not required
		return nil
	}

	if o.Monitor != nil {
		if err := o.Monitor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postMonitorsCreated" + "." + "monitor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postMonitorsCreated" + "." + "monitor")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post monitors created body based on the context it is used
func (o *PostMonitorsCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMonitor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostMonitorsCreatedBody) contextValidateMonitor(ctx context.Context, formats strfmt.Registry) error {

	if o.Monitor != nil {
		if err := o.Monitor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postMonitorsCreated" + "." + "monitor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postMonitorsCreated" + "." + "monitor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostMonitorsCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostMonitorsCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostMonitorsCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
