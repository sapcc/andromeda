// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package monitors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sapcc/andromeda/models"
)

// GetMonitorsMonitorIDOKCode is the HTTP code returned for type GetMonitorsMonitorIDOK
const GetMonitorsMonitorIDOKCode int = 200

/*
GetMonitorsMonitorIDOK Shows the details of a specific monitor.

swagger:response getMonitorsMonitorIdOK
*/
type GetMonitorsMonitorIDOK struct {

	/*
	  In: Body
	*/
	Payload *GetMonitorsMonitorIDOKBody `json:"body,omitempty"`
}

// NewGetMonitorsMonitorIDOK creates GetMonitorsMonitorIDOK with default headers values
func NewGetMonitorsMonitorIDOK() *GetMonitorsMonitorIDOK {

	return &GetMonitorsMonitorIDOK{}
}

// WithPayload adds the payload to the get monitors monitor Id o k response
func (o *GetMonitorsMonitorIDOK) WithPayload(payload *GetMonitorsMonitorIDOKBody) *GetMonitorsMonitorIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get monitors monitor Id o k response
func (o *GetMonitorsMonitorIDOK) SetPayload(payload *GetMonitorsMonitorIDOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMonitorsMonitorIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetMonitorsMonitorIDNotFoundCode is the HTTP code returned for type GetMonitorsMonitorIDNotFound
const GetMonitorsMonitorIDNotFoundCode int = 404

/*
GetMonitorsMonitorIDNotFound Not Found

swagger:response getMonitorsMonitorIdNotFound
*/
type GetMonitorsMonitorIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetMonitorsMonitorIDNotFound creates GetMonitorsMonitorIDNotFound with default headers values
func NewGetMonitorsMonitorIDNotFound() *GetMonitorsMonitorIDNotFound {

	return &GetMonitorsMonitorIDNotFound{}
}

// WithPayload adds the payload to the get monitors monitor Id not found response
func (o *GetMonitorsMonitorIDNotFound) WithPayload(payload *models.Error) *GetMonitorsMonitorIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get monitors monitor Id not found response
func (o *GetMonitorsMonitorIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMonitorsMonitorIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
GetMonitorsMonitorIDDefault Unexpected Error

swagger:response getMonitorsMonitorIdDefault
*/
type GetMonitorsMonitorIDDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetMonitorsMonitorIDDefault creates GetMonitorsMonitorIDDefault with default headers values
func NewGetMonitorsMonitorIDDefault(code int) *GetMonitorsMonitorIDDefault {
	if code <= 0 {
		code = 500
	}

	return &GetMonitorsMonitorIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get monitors monitor ID default response
func (o *GetMonitorsMonitorIDDefault) WithStatusCode(code int) *GetMonitorsMonitorIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get monitors monitor ID default response
func (o *GetMonitorsMonitorIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get monitors monitor ID default response
func (o *GetMonitorsMonitorIDDefault) WithPayload(payload *models.Error) *GetMonitorsMonitorIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get monitors monitor ID default response
func (o *GetMonitorsMonitorIDDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMonitorsMonitorIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
