// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sapcc/andromeda/models"
)

// GetDomainsDomainIDHandlerFunc turns a function with the right signature into a get domains domain ID handler
type GetDomainsDomainIDHandlerFunc func(GetDomainsDomainIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDomainsDomainIDHandlerFunc) Handle(params GetDomainsDomainIDParams) middleware.Responder {
	return fn(params)
}

// GetDomainsDomainIDHandler interface for that can handle valid get domains domain ID params
type GetDomainsDomainIDHandler interface {
	Handle(GetDomainsDomainIDParams) middleware.Responder
}

// NewGetDomainsDomainID creates a new http.Handler for the get domains domain ID operation
func NewGetDomainsDomainID(ctx *middleware.Context, handler GetDomainsDomainIDHandler) *GetDomainsDomainID {
	return &GetDomainsDomainID{Context: ctx, Handler: handler}
}

/*
	GetDomainsDomainID swagger:route GET /domains/{domain_id} Domains getDomainsDomainId

Show domain detail
*/
type GetDomainsDomainID struct {
	Context *middleware.Context
	Handler GetDomainsDomainIDHandler
}

func (o *GetDomainsDomainID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetDomainsDomainIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetDomainsDomainIDOKBody get domains domain ID o k body
//
// swagger:model GetDomainsDomainIDOKBody
type GetDomainsDomainIDOKBody struct {

	// domain
	Domain *models.Domain `json:"domain,omitempty"`
}

// Validate validates this get domains domain ID o k body
func (o *GetDomainsDomainIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDomainsDomainIDOKBody) validateDomain(formats strfmt.Registry) error {
	if swag.IsZero(o.Domain) { // not required
		return nil
	}

	if o.Domain != nil {
		if err := o.Domain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDomainsDomainIdOK" + "." + "domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDomainsDomainIdOK" + "." + "domain")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get domains domain ID o k body based on the context it is used
func (o *GetDomainsDomainIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDomain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDomainsDomainIDOKBody) contextValidateDomain(ctx context.Context, formats strfmt.Registry) error {

	if o.Domain != nil {
		if err := o.Domain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDomainsDomainIdOK" + "." + "domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDomainsDomainIdOK" + "." + "domain")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDomainsDomainIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDomainsDomainIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetDomainsDomainIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
