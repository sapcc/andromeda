// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sapcc/andromeda/models"
)

// PostDomainsCreatedCode is the HTTP code returned for type PostDomainsCreated
const PostDomainsCreatedCode int = 201

/*
PostDomainsCreated Created domain.

swagger:response postDomainsCreated
*/
type PostDomainsCreated struct {

	/*
	  In: Body
	*/
	Payload *PostDomainsCreatedBody `json:"body,omitempty"`
}

// NewPostDomainsCreated creates PostDomainsCreated with default headers values
func NewPostDomainsCreated() *PostDomainsCreated {

	return &PostDomainsCreated{}
}

// WithPayload adds the payload to the post domains created response
func (o *PostDomainsCreated) WithPayload(payload *PostDomainsCreatedBody) *PostDomainsCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post domains created response
func (o *PostDomainsCreated) SetPayload(payload *PostDomainsCreatedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostDomainsCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostDomainsBadRequestCode is the HTTP code returned for type PostDomainsBadRequest
const PostDomainsBadRequestCode int = 400

/*
PostDomainsBadRequest Bad request

swagger:response postDomainsBadRequest
*/
type PostDomainsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostDomainsBadRequest creates PostDomainsBadRequest with default headers values
func NewPostDomainsBadRequest() *PostDomainsBadRequest {

	return &PostDomainsBadRequest{}
}

// WithPayload adds the payload to the post domains bad request response
func (o *PostDomainsBadRequest) WithPayload(payload *models.Error) *PostDomainsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post domains bad request response
func (o *PostDomainsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostDomainsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
PostDomainsDefault Unexpected Error

swagger:response postDomainsDefault
*/
type PostDomainsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostDomainsDefault creates PostDomainsDefault with default headers values
func NewPostDomainsDefault(code int) *PostDomainsDefault {
	if code <= 0 {
		code = 500
	}

	return &PostDomainsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post domains default response
func (o *PostDomainsDefault) WithStatusCode(code int) *PostDomainsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post domains default response
func (o *PostDomainsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post domains default response
func (o *PostDomainsDefault) WithPayload(payload *models.Error) *PostDomainsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post domains default response
func (o *PostDomainsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostDomainsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
