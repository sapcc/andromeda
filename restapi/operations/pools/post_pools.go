// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package pools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sapcc/andromeda/models"
)

// PostPoolsHandlerFunc turns a function with the right signature into a post pools handler
type PostPoolsHandlerFunc func(PostPoolsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostPoolsHandlerFunc) Handle(params PostPoolsParams) middleware.Responder {
	return fn(params)
}

// PostPoolsHandler interface for that can handle valid post pools params
type PostPoolsHandler interface {
	Handle(PostPoolsParams) middleware.Responder
}

// NewPostPools creates a new http.Handler for the post pools operation
func NewPostPools(ctx *middleware.Context, handler PostPoolsHandler) *PostPools {
	return &PostPools{Context: ctx, Handler: handler}
}

/*
	PostPools swagger:route POST /pools Pools postPools

Create new pool
*/
type PostPools struct {
	Context *middleware.Context
	Handler PostPoolsHandler
}

func (o *PostPools) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostPoolsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostPoolsBody post pools body
//
// swagger:model PostPoolsBody
type PostPoolsBody struct {

	// pool
	// Required: true
	Pool *models.Pool `json:"pool"`
}

// Validate validates this post pools body
func (o *PostPoolsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePool(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPoolsBody) validatePool(formats strfmt.Registry) error {

	if err := validate.Required("pool"+"."+"pool", "body", o.Pool); err != nil {
		return err
	}

	if o.Pool != nil {
		if err := o.Pool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pool" + "." + "pool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pool" + "." + "pool")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post pools body based on the context it is used
func (o *PostPoolsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPoolsBody) contextValidatePool(ctx context.Context, formats strfmt.Registry) error {

	if o.Pool != nil {
		if err := o.Pool.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pool" + "." + "pool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pool" + "." + "pool")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostPoolsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostPoolsBody) UnmarshalBinary(b []byte) error {
	var res PostPoolsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostPoolsCreatedBody post pools created body
//
// swagger:model PostPoolsCreatedBody
type PostPoolsCreatedBody struct {

	// pool
	Pool *models.Pool `json:"pool,omitempty"`
}

// Validate validates this post pools created body
func (o *PostPoolsCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePool(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPoolsCreatedBody) validatePool(formats strfmt.Registry) error {
	if swag.IsZero(o.Pool) { // not required
		return nil
	}

	if o.Pool != nil {
		if err := o.Pool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postPoolsCreated" + "." + "pool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postPoolsCreated" + "." + "pool")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post pools created body based on the context it is used
func (o *PostPoolsCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostPoolsCreatedBody) contextValidatePool(ctx context.Context, formats strfmt.Registry) error {

	if o.Pool != nil {
		if err := o.Pool.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postPoolsCreated" + "." + "pool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postPoolsCreated" + "." + "pool")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostPoolsCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostPoolsCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostPoolsCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
