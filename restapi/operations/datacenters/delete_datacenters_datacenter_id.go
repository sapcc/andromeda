// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package datacenters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteDatacentersDatacenterIDHandlerFunc turns a function with the right signature into a delete datacenters datacenter ID handler
type DeleteDatacentersDatacenterIDHandlerFunc func(DeleteDatacentersDatacenterIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteDatacentersDatacenterIDHandlerFunc) Handle(params DeleteDatacentersDatacenterIDParams) middleware.Responder {
	return fn(params)
}

// DeleteDatacentersDatacenterIDHandler interface for that can handle valid delete datacenters datacenter ID params
type DeleteDatacentersDatacenterIDHandler interface {
	Handle(DeleteDatacentersDatacenterIDParams) middleware.Responder
}

// NewDeleteDatacentersDatacenterID creates a new http.Handler for the delete datacenters datacenter ID operation
func NewDeleteDatacentersDatacenterID(ctx *middleware.Context, handler DeleteDatacentersDatacenterIDHandler) *DeleteDatacentersDatacenterID {
	return &DeleteDatacentersDatacenterID{Context: ctx, Handler: handler}
}

/*
	DeleteDatacentersDatacenterID swagger:route DELETE /datacenters/{datacenter_id} Datacenters deleteDatacentersDatacenterId

Delete a datacenter
*/
type DeleteDatacentersDatacenterID struct {
	Context *middleware.Context
	Handler DeleteDatacentersDatacenterIDHandler
}

func (o *DeleteDatacentersDatacenterID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteDatacentersDatacenterIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
