// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package datacenters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sapcc/andromeda/models"
)

// GetDatacentersOKCode is the HTTP code returned for type GetDatacentersOK
const GetDatacentersOKCode int = 200

/*
GetDatacentersOK A JSON array of datacenters

swagger:response getDatacentersOK
*/
type GetDatacentersOK struct {

	/*
	  In: Body
	*/
	Payload *GetDatacentersOKBody `json:"body,omitempty"`
}

// NewGetDatacentersOK creates GetDatacentersOK with default headers values
func NewGetDatacentersOK() *GetDatacentersOK {

	return &GetDatacentersOK{}
}

// WithPayload adds the payload to the get datacenters o k response
func (o *GetDatacentersOK) WithPayload(payload *GetDatacentersOKBody) *GetDatacentersOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get datacenters o k response
func (o *GetDatacentersOK) SetPayload(payload *GetDatacentersOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDatacentersOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDatacentersBadRequestCode is the HTTP code returned for type GetDatacentersBadRequest
const GetDatacentersBadRequestCode int = 400

/*
GetDatacentersBadRequest Bad request

swagger:response getDatacentersBadRequest
*/
type GetDatacentersBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetDatacentersBadRequest creates GetDatacentersBadRequest with default headers values
func NewGetDatacentersBadRequest() *GetDatacentersBadRequest {

	return &GetDatacentersBadRequest{}
}

// WithPayload adds the payload to the get datacenters bad request response
func (o *GetDatacentersBadRequest) WithPayload(payload *models.Error) *GetDatacentersBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get datacenters bad request response
func (o *GetDatacentersBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDatacentersBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
GetDatacentersDefault Unexpected Error

swagger:response getDatacentersDefault
*/
type GetDatacentersDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetDatacentersDefault creates GetDatacentersDefault with default headers values
func NewGetDatacentersDefault(code int) *GetDatacentersDefault {
	if code <= 0 {
		code = 500
	}

	return &GetDatacentersDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get datacenters default response
func (o *GetDatacentersDefault) WithStatusCode(code int) *GetDatacentersDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get datacenters default response
func (o *GetDatacentersDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get datacenters default response
func (o *GetDatacentersDefault) WithPayload(payload *models.Error) *GetDatacentersDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get datacenters default response
func (o *GetDatacentersDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDatacentersDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
