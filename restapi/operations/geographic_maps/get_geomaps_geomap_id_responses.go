// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package geographic_maps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sapcc/andromeda/models"
)

// GetGeomapsGeomapIDOKCode is the HTTP code returned for type GetGeomapsGeomapIDOK
const GetGeomapsGeomapIDOKCode int = 200

/*
GetGeomapsGeomapIDOK Shows the details of a specific geomap.

swagger:response getGeomapsGeomapIdOK
*/
type GetGeomapsGeomapIDOK struct {

	/*
	  In: Body
	*/
	Payload *GetGeomapsGeomapIDOKBody `json:"body,omitempty"`
}

// NewGetGeomapsGeomapIDOK creates GetGeomapsGeomapIDOK with default headers values
func NewGetGeomapsGeomapIDOK() *GetGeomapsGeomapIDOK {

	return &GetGeomapsGeomapIDOK{}
}

// WithPayload adds the payload to the get geomaps geomap Id o k response
func (o *GetGeomapsGeomapIDOK) WithPayload(payload *GetGeomapsGeomapIDOKBody) *GetGeomapsGeomapIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get geomaps geomap Id o k response
func (o *GetGeomapsGeomapIDOK) SetPayload(payload *GetGeomapsGeomapIDOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGeomapsGeomapIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGeomapsGeomapIDNotFoundCode is the HTTP code returned for type GetGeomapsGeomapIDNotFound
const GetGeomapsGeomapIDNotFoundCode int = 404

/*
GetGeomapsGeomapIDNotFound Not Found

swagger:response getGeomapsGeomapIdNotFound
*/
type GetGeomapsGeomapIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetGeomapsGeomapIDNotFound creates GetGeomapsGeomapIDNotFound with default headers values
func NewGetGeomapsGeomapIDNotFound() *GetGeomapsGeomapIDNotFound {

	return &GetGeomapsGeomapIDNotFound{}
}

// WithPayload adds the payload to the get geomaps geomap Id not found response
func (o *GetGeomapsGeomapIDNotFound) WithPayload(payload *models.Error) *GetGeomapsGeomapIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get geomaps geomap Id not found response
func (o *GetGeomapsGeomapIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGeomapsGeomapIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
GetGeomapsGeomapIDDefault Unexpected Error

swagger:response getGeomapsGeomapIdDefault
*/
type GetGeomapsGeomapIDDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetGeomapsGeomapIDDefault creates GetGeomapsGeomapIDDefault with default headers values
func NewGetGeomapsGeomapIDDefault(code int) *GetGeomapsGeomapIDDefault {
	if code <= 0 {
		code = 500
	}

	return &GetGeomapsGeomapIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get geomaps geomap ID default response
func (o *GetGeomapsGeomapIDDefault) WithStatusCode(code int) *GetGeomapsGeomapIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get geomaps geomap ID default response
func (o *GetGeomapsGeomapIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get geomaps geomap ID default response
func (o *GetGeomapsGeomapIDDefault) WithPayload(payload *models.Error) *GetGeomapsGeomapIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get geomaps geomap ID default response
func (o *GetGeomapsGeomapIDDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGeomapsGeomapIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
