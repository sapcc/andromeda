// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package members

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewDeleteMembersMemberIDParams creates a new DeleteMembersMemberIDParams object
//
// There are no default values defined in the spec.
func NewDeleteMembersMemberIDParams() DeleteMembersMemberIDParams {

	return DeleteMembersMemberIDParams{}
}

// DeleteMembersMemberIDParams contains all the bound params for the delete members member ID operation
// typically these are obtained from a http.Request
//
// swagger:parameters DeleteMembersMemberID
type DeleteMembersMemberIDParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The UUID of the member
	  Required: true
	  In: path
	*/
	MemberID strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDeleteMembersMemberIDParams() beforehand.
func (o *DeleteMembersMemberIDParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rMemberID, rhkMemberID, _ := route.Params.GetOK("member_id")
	if err := o.bindMemberID(rMemberID, rhkMemberID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindMemberID binds and validates parameter MemberID from path.
func (o *DeleteMembersMemberIDParams) bindMemberID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("member_id", "path", "strfmt.UUID", raw)
	}
	o.MemberID = *(value.(*strfmt.UUID))

	if err := o.validateMemberID(formats); err != nil {
		return err
	}

	return nil
}

// validateMemberID carries on validations for parameter MemberID
func (o *DeleteMembersMemberIDParams) validateMemberID(formats strfmt.Registry) error {

	if err := validate.FormatOf("member_id", "path", "uuid", o.MemberID.String(), formats); err != nil {
		return err
	}
	return nil
}
