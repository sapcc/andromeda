// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package members

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sapcc/andromeda/models"
)

// DeleteMembersMemberIDNoContentCode is the HTTP code returned for type DeleteMembersMemberIDNoContent
const DeleteMembersMemberIDNoContentCode int = 204

/*
DeleteMembersMemberIDNoContent Resource successfully deleted.

swagger:response deleteMembersMemberIdNoContent
*/
type DeleteMembersMemberIDNoContent struct {
}

// NewDeleteMembersMemberIDNoContent creates DeleteMembersMemberIDNoContent with default headers values
func NewDeleteMembersMemberIDNoContent() *DeleteMembersMemberIDNoContent {

	return &DeleteMembersMemberIDNoContent{}
}

// WriteResponse to the client
func (o *DeleteMembersMemberIDNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeleteMembersMemberIDNotFoundCode is the HTTP code returned for type DeleteMembersMemberIDNotFound
const DeleteMembersMemberIDNotFoundCode int = 404

/*
DeleteMembersMemberIDNotFound Not Found

swagger:response deleteMembersMemberIdNotFound
*/
type DeleteMembersMemberIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteMembersMemberIDNotFound creates DeleteMembersMemberIDNotFound with default headers values
func NewDeleteMembersMemberIDNotFound() *DeleteMembersMemberIDNotFound {

	return &DeleteMembersMemberIDNotFound{}
}

// WithPayload adds the payload to the delete members member Id not found response
func (o *DeleteMembersMemberIDNotFound) WithPayload(payload *models.Error) *DeleteMembersMemberIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete members member Id not found response
func (o *DeleteMembersMemberIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteMembersMemberIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
DeleteMembersMemberIDDefault Unexpected Error

swagger:response deleteMembersMemberIdDefault
*/
type DeleteMembersMemberIDDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteMembersMemberIDDefault creates DeleteMembersMemberIDDefault with default headers values
func NewDeleteMembersMemberIDDefault(code int) *DeleteMembersMemberIDDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteMembersMemberIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete members member ID default response
func (o *DeleteMembersMemberIDDefault) WithStatusCode(code int) *DeleteMembersMemberIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete members member ID default response
func (o *DeleteMembersMemberIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete members member ID default response
func (o *DeleteMembersMemberIDDefault) WithPayload(payload *models.Error) *DeleteMembersMemberIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete members member ID default response
func (o *DeleteMembersMemberIDDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteMembersMemberIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
