// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package administrative

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetCidrBlocksHandlerFunc turns a function with the right signature into a get cidr blocks handler
type GetCidrBlocksHandlerFunc func(GetCidrBlocksParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCidrBlocksHandlerFunc) Handle(params GetCidrBlocksParams) middleware.Responder {
	return fn(params)
}

// GetCidrBlocksHandler interface for that can handle valid get cidr blocks params
type GetCidrBlocksHandler interface {
	Handle(GetCidrBlocksParams) middleware.Responder
}

// NewGetCidrBlocks creates a new http.Handler for the get cidr blocks operation
func NewGetCidrBlocks(ctx *middleware.Context, handler GetCidrBlocksHandler) *GetCidrBlocks {
	return &GetCidrBlocks{Context: ctx, Handler: handler}
}

/*
	GetCidrBlocks swagger:route GET /cidr-blocks Administrative getCidrBlocks

List CIDR blocks of a service
*/
type GetCidrBlocks struct {
	Context *middleware.Context
	Handler GetCidrBlocksHandler
}

func (o *GetCidrBlocks) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetCidrBlocksParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
