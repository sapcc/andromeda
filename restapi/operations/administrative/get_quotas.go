// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package administrative

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/sapcc/andromeda/models"
)

// GetQuotasHandlerFunc turns a function with the right signature into a get quotas handler
type GetQuotasHandlerFunc func(GetQuotasParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetQuotasHandlerFunc) Handle(params GetQuotasParams) middleware.Responder {
	return fn(params)
}

// GetQuotasHandler interface for that can handle valid get quotas params
type GetQuotasHandler interface {
	Handle(GetQuotasParams) middleware.Responder
}

// NewGetQuotas creates a new http.Handler for the get quotas operation
func NewGetQuotas(ctx *middleware.Context, handler GetQuotasHandler) *GetQuotas {
	return &GetQuotas{Context: ctx, Handler: handler}
}

/*
	GetQuotas swagger:route GET /quotas Administrative getQuotas

List Quotas
*/
type GetQuotas struct {
	Context *middleware.Context
	Handler GetQuotasHandler
}

func (o *GetQuotas) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetQuotasParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetQuotasOKBody get quotas o k body
//
// swagger:model GetQuotasOKBody
type GetQuotasOKBody struct {

	// quotas
	Quotas []*GetQuotasOKBodyQuotasItems0 `json:"quotas"`
}

// Validate validates this get quotas o k body
func (o *GetQuotasOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuotas(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetQuotasOKBody) validateQuotas(formats strfmt.Registry) error {
	if swag.IsZero(o.Quotas) { // not required
		return nil
	}

	for i := 0; i < len(o.Quotas); i++ {
		if swag.IsZero(o.Quotas[i]) { // not required
			continue
		}

		if o.Quotas[i] != nil {
			if err := o.Quotas[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getQuotasOK" + "." + "quotas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getQuotasOK" + "." + "quotas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get quotas o k body based on the context it is used
func (o *GetQuotasOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateQuotas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetQuotasOKBody) contextValidateQuotas(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Quotas); i++ {

		if o.Quotas[i] != nil {
			if err := o.Quotas[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getQuotasOK" + "." + "quotas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getQuotasOK" + "." + "quotas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetQuotasOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetQuotasOKBody) UnmarshalBinary(b []byte) error {
	var res GetQuotasOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetQuotasOKBodyQuotasItems0 get quotas o k body quotas items0
//
// swagger:model GetQuotasOKBodyQuotasItems0
type GetQuotasOKBodyQuotasItems0 struct {
	models.Quota

	// The ID of the project owning this resource.
	// Example: fa84c217f361441986a220edf9b1e337
	// Max Length: 32
	// Min Length: 32
	ProjectID *string `json:"project_id,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetQuotasOKBodyQuotasItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 models.Quota
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.Quota = aO0

	// AO1
	var dataAO1 struct {
		ProjectID *string `json:"project_id,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	o.ProjectID = dataAO1.ProjectID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetQuotasOKBodyQuotasItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(o.Quota)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ProjectID *string `json:"project_id,omitempty"`
	}

	dataAO1.ProjectID = o.ProjectID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get quotas o k body quotas items0
func (o *GetQuotasOKBodyQuotasItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Quota
	if err := o.Quota.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetQuotasOKBodyQuotasItems0) validateProjectID(formats strfmt.Registry) error {

	if swag.IsZero(o.ProjectID) { // not required
		return nil
	}

	if err := validate.MinLength("project_id", "body", *o.ProjectID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("project_id", "body", *o.ProjectID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get quotas o k body quotas items0 based on the context it is used
func (o *GetQuotasOKBodyQuotasItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Quota
	if err := o.Quota.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetQuotasOKBodyQuotasItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetQuotasOKBodyQuotasItems0) UnmarshalBinary(b []byte) error {
	var res GetQuotasOKBodyQuotasItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
