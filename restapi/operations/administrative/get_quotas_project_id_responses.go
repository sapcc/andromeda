// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package administrative

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sapcc/andromeda/models"
)

// GetQuotasProjectIDOKCode is the HTTP code returned for type GetQuotasProjectIDOK
const GetQuotasProjectIDOKCode int = 200

/*
GetQuotasProjectIDOK Shows the details of a specific monitor.

swagger:response getQuotasProjectIdOK
*/
type GetQuotasProjectIDOK struct {

	/*
	  In: Body
	*/
	Payload *GetQuotasProjectIDOKBody `json:"body,omitempty"`
}

// NewGetQuotasProjectIDOK creates GetQuotasProjectIDOK with default headers values
func NewGetQuotasProjectIDOK() *GetQuotasProjectIDOK {

	return &GetQuotasProjectIDOK{}
}

// WithPayload adds the payload to the get quotas project Id o k response
func (o *GetQuotasProjectIDOK) WithPayload(payload *GetQuotasProjectIDOKBody) *GetQuotasProjectIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get quotas project Id o k response
func (o *GetQuotasProjectIDOK) SetPayload(payload *GetQuotasProjectIDOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuotasProjectIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuotasProjectIDNotFoundCode is the HTTP code returned for type GetQuotasProjectIDNotFound
const GetQuotasProjectIDNotFoundCode int = 404

/*
GetQuotasProjectIDNotFound Not Found

swagger:response getQuotasProjectIdNotFound
*/
type GetQuotasProjectIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQuotasProjectIDNotFound creates GetQuotasProjectIDNotFound with default headers values
func NewGetQuotasProjectIDNotFound() *GetQuotasProjectIDNotFound {

	return &GetQuotasProjectIDNotFound{}
}

// WithPayload adds the payload to the get quotas project Id not found response
func (o *GetQuotasProjectIDNotFound) WithPayload(payload *models.Error) *GetQuotasProjectIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get quotas project Id not found response
func (o *GetQuotasProjectIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuotasProjectIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
GetQuotasProjectIDDefault Unexpected Error

swagger:response getQuotasProjectIdDefault
*/
type GetQuotasProjectIDDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQuotasProjectIDDefault creates GetQuotasProjectIDDefault with default headers values
func NewGetQuotasProjectIDDefault(code int) *GetQuotasProjectIDDefault {
	if code <= 0 {
		code = 500
	}

	return &GetQuotasProjectIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get quotas project ID default response
func (o *GetQuotasProjectIDDefault) WithStatusCode(code int) *GetQuotasProjectIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get quotas project ID default response
func (o *GetQuotasProjectIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get quotas project ID default response
func (o *GetQuotasProjectIDDefault) WithPayload(payload *models.Error) *GetQuotasProjectIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get quotas project ID default response
func (o *GetQuotasProjectIDDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuotasProjectIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
