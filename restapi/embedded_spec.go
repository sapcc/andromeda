// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Platform agnostic GSLB frontend",
    "title": "Andromeda",
    "version": "1.1.1"
  },
  "basePath": "/v1",
  "paths": {
    "/cidr-blocks": {
      "get": {
        "tags": [
          "Administrative"
        ],
        "summary": "List CIDR blocks of a service",
        "parameters": [
          {
            "enum": [
              "akamai",
              "f5"
            ],
            "type": "string",
            "x-nullable": true,
            "description": "The provider to filter the CIDR blocks by.",
            "name": "provider",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of CIDR blocks",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:cidr-blocks:get"
      }
    },
    "/datacenters": {
      "get": {
        "tags": [
          "Datacenters"
        ],
        "summary": "List datacenters",
        "parameters": [
          {
            "$ref": "#/parameters/marker"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page_reverse"
          },
          {
            "type": "string",
            "format": "uuid",
            "x-nullable": true,
            "description": "Filter datacenters by datacenter ID",
            "name": "datacenter_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of datacenters",
            "schema": {
              "type": "object",
              "properties": {
                "datacenters": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/datacenter"
                  }
                },
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/link"
                  },
                  "x-omitempty": true
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:datacenter:get_all"
      },
      "post": {
        "tags": [
          "Datacenters"
        ],
        "summary": "Create new datacenter",
        "parameters": [
          {
            "name": "datacenter",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "datacenter"
              ],
              "properties": {
                "datacenter": {
                  "$ref": "#/definitions/datacenter"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created datacenter.",
            "schema": {
              "type": "object",
              "properties": {
                "datacenter": {
                  "$ref": "#/definitions/datacenter"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:datacenter:post"
      }
    },
    "/datacenters/{datacenter_id}": {
      "get": {
        "tags": [
          "Datacenters"
        ],
        "summary": "Show datacenter detail",
        "responses": {
          "200": {
            "description": "Shows the details of a specific datacenter.",
            "schema": {
              "type": "object",
              "properties": {
                "datacenter": {
                  "$ref": "#/definitions/datacenter"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:datacenter:get_one"
      },
      "put": {
        "tags": [
          "Datacenters"
        ],
        "summary": "Update a datacenter",
        "parameters": [
          {
            "name": "datacenter",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "datacenter"
              ],
              "properties": {
                "datacenter": {
                  "$ref": "#/definitions/datacenter"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Updated datacenter.",
            "schema": {
              "type": "object",
              "properties": {
                "datacenter": {
                  "$ref": "#/definitions/datacenter"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:datacenter:put"
      },
      "delete": {
        "tags": [
          "Datacenters"
        ],
        "summary": "Delete a datacenter",
        "responses": {
          "204": {
            "description": "Resource successfully deleted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:datacenter:delete"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the datacenter",
          "name": "datacenter_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/domains": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "List domains",
        "parameters": [
          {
            "$ref": "#/parameters/marker"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page_reverse"
          },
          {
            "type": "string",
            "format": "uuid",
            "x-nullable": true,
            "description": "Filter domains by domain ID",
            "name": "domain_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of domains",
            "schema": {
              "type": "object",
              "properties": {
                "domains": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/domain"
                  }
                },
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/link"
                  },
                  "x-omitempty": true
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:domain:get_all"
      },
      "post": {
        "tags": [
          "Domains"
        ],
        "summary": "Create new domain",
        "parameters": [
          {
            "name": "domain",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "domain"
              ],
              "properties": {
                "domain": {
                  "$ref": "#/definitions/domain"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created domain.",
            "schema": {
              "type": "object",
              "properties": {
                "domain": {
                  "$ref": "#/definitions/domain"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:domain:post"
      }
    },
    "/domains/{domain_id}": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "Show domain detail",
        "responses": {
          "200": {
            "description": "Shows the details of a specific domain.",
            "schema": {
              "type": "object",
              "properties": {
                "domain": {
                  "$ref": "#/definitions/domain"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:domain:get_one"
      },
      "put": {
        "tags": [
          "Domains"
        ],
        "summary": "Update a domain",
        "parameters": [
          {
            "name": "domain",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "domain"
              ],
              "properties": {
                "domain": {
                  "$ref": "#/definitions/domain"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Updated domain.",
            "schema": {
              "type": "object",
              "properties": {
                "domain": {
                  "$ref": "#/definitions/domain"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:domain:put"
      },
      "delete": {
        "tags": [
          "Domains"
        ],
        "summary": "Delete a domain",
        "responses": {
          "204": {
            "description": "Resource successfully deleted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:domain:delete"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the domain",
          "name": "domain_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/geomaps": {
      "get": {
        "tags": [
          "Geographic maps"
        ],
        "summary": "List geographic maps",
        "parameters": [
          {
            "$ref": "#/parameters/marker"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page_reverse"
          },
          {
            "type": "string",
            "format": "uuid",
            "x-nullable": true,
            "description": "Filter geographic map by datacenter ID",
            "name": "datacenter_id",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "x-nullable": true,
            "description": "Filter geographic map by default datacenter ID",
            "name": "default_datacenter_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of geographic maps",
            "schema": {
              "type": "object",
              "properties": {
                "geomaps": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/geomap"
                  }
                },
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/link"
                  },
                  "x-omitempty": true
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:geomap:get_all"
      },
      "post": {
        "tags": [
          "Geographic maps"
        ],
        "summary": "Create new geographic map",
        "parameters": [
          {
            "name": "geomap",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "geomap"
              ],
              "properties": {
                "geomap": {
                  "$ref": "#/definitions/geomap"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created geomap.",
            "schema": {
              "type": "object",
              "properties": {
                "geomap": {
                  "$ref": "#/definitions/geomap"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:geomap:post"
      }
    },
    "/geomaps/{geomap_id}": {
      "get": {
        "tags": [
          "Geographic maps"
        ],
        "summary": "Show geographic map detail",
        "responses": {
          "200": {
            "description": "Shows the details of a specific geomap.",
            "schema": {
              "type": "object",
              "properties": {
                "geomap": {
                  "$ref": "#/definitions/geomap"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:geomap:get_one"
      },
      "put": {
        "tags": [
          "Geographic maps"
        ],
        "summary": "Update a geographic map",
        "parameters": [
          {
            "name": "geomap",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "geomap"
              ],
              "properties": {
                "geomap": {
                  "$ref": "#/definitions/geomap"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Updated geomap.",
            "schema": {
              "type": "object",
              "properties": {
                "geomap": {
                  "$ref": "#/definitions/geomap"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:geomap:put"
      },
      "delete": {
        "tags": [
          "Geographic maps"
        ],
        "summary": "Delete a geographic map",
        "responses": {
          "204": {
            "description": "Resource successfully deleted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:geomap:delete"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the geomap",
          "name": "geomap_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/members": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "List members",
        "parameters": [
          {
            "$ref": "#/parameters/marker"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page_reverse"
          },
          {
            "type": "string",
            "format": "uuid",
            "x-nullable": true,
            "description": "Pool ID of the members to fetch",
            "name": "pool_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of members",
            "schema": {
              "type": "object",
              "properties": {
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/link"
                  },
                  "x-omitempty": true
                },
                "members": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/member"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:member:get_all"
      },
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "Create new member",
        "parameters": [
          {
            "name": "member",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "member"
              ],
              "properties": {
                "member": {
                  "$ref": "#/definitions/member"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created member.",
            "schema": {
              "type": "object",
              "properties": {
                "member": {
                  "$ref": "#/definitions/member"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:member:post"
      }
    },
    "/members/{member_id}": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "Show member detail",
        "responses": {
          "200": {
            "description": "Shows the details of a specific member.",
            "schema": {
              "type": "object",
              "properties": {
                "member": {
                  "$ref": "#/definitions/member"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:member:get_one"
      },
      "put": {
        "tags": [
          "Members"
        ],
        "summary": "Update a member",
        "parameters": [
          {
            "name": "member",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "member"
              ],
              "properties": {
                "member": {
                  "$ref": "#/definitions/member"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Updated member.",
            "schema": {
              "type": "object",
              "properties": {
                "member": {
                  "$ref": "#/definitions/member"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:member:put"
      },
      "delete": {
        "tags": [
          "Members"
        ],
        "summary": "Delete a member",
        "responses": {
          "204": {
            "description": "Resource successfully deleted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:member:delete"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the member",
          "name": "member_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/monitors": {
      "get": {
        "tags": [
          "Monitors"
        ],
        "summary": "List monitors",
        "parameters": [
          {
            "$ref": "#/parameters/marker"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page_reverse"
          },
          {
            "type": "string",
            "format": "uuid",
            "x-nullable": true,
            "description": "Pool ID of the monitors to fetch",
            "name": "pool_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of monitors",
            "schema": {
              "type": "object",
              "properties": {
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/link"
                  },
                  "x-omitempty": true
                },
                "monitors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/monitor"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:monitor:get_all"
      },
      "post": {
        "tags": [
          "Monitors"
        ],
        "summary": "Create new monitor",
        "parameters": [
          {
            "name": "monitor",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "monitor"
              ],
              "properties": {
                "monitor": {
                  "$ref": "#/definitions/monitor"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created monitor.",
            "schema": {
              "type": "object",
              "properties": {
                "monitor": {
                  "$ref": "#/definitions/monitor"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:monitor:post"
      }
    },
    "/monitors/{monitor_id}": {
      "get": {
        "tags": [
          "Monitors"
        ],
        "summary": "Show monitor detail",
        "responses": {
          "200": {
            "description": "Shows the details of a specific monitor.",
            "schema": {
              "type": "object",
              "properties": {
                "monitor": {
                  "$ref": "#/definitions/monitor"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:monitor:get_one"
      },
      "put": {
        "tags": [
          "Monitors"
        ],
        "summary": "Update a monitor",
        "parameters": [
          {
            "name": "monitor",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "monitor"
              ],
              "properties": {
                "monitor": {
                  "$ref": "#/definitions/monitor"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Updated monitor.",
            "schema": {
              "type": "object",
              "properties": {
                "monitor": {
                  "$ref": "#/definitions/monitor"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:monitor:put"
      },
      "delete": {
        "tags": [
          "Monitors"
        ],
        "summary": "Delete a monitor",
        "responses": {
          "204": {
            "description": "Resource successfully deleted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:monitor:delete"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the monitor",
          "name": "monitor_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/pools": {
      "get": {
        "tags": [
          "Pools"
        ],
        "summary": "List pools",
        "parameters": [
          {
            "$ref": "#/parameters/marker"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/sort"
          },
          {
            "$ref": "#/parameters/page_reverse"
          },
          {
            "type": "string",
            "format": "uuid",
            "x-nullable": true,
            "description": "Filter pools by domain ID",
            "name": "domain_id",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "x-nullable": true,
            "description": "Filter pools by pool ID",
            "name": "pool_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of pools",
            "schema": {
              "type": "object",
              "properties": {
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/link"
                  },
                  "x-omitempty": true
                },
                "pools": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/pool"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:pool:get_all"
      },
      "post": {
        "tags": [
          "Pools"
        ],
        "summary": "Create new pool",
        "parameters": [
          {
            "name": "pool",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "pool"
              ],
              "properties": {
                "pool": {
                  "$ref": "#/definitions/pool"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created pool.",
            "schema": {
              "type": "object",
              "properties": {
                "pool": {
                  "$ref": "#/definitions/pool"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:pool:post"
      }
    },
    "/pools/{pool_id}": {
      "get": {
        "tags": [
          "Pools"
        ],
        "summary": "Show pool detail",
        "responses": {
          "200": {
            "description": "Shows the details of a specific pool.",
            "schema": {
              "type": "object",
              "properties": {
                "pool": {
                  "$ref": "#/definitions/pool"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:pool:get_one"
      },
      "put": {
        "tags": [
          "Pools"
        ],
        "summary": "Update a pool",
        "parameters": [
          {
            "name": "pool",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "pool"
              ],
              "properties": {
                "pool": {
                  "$ref": "#/definitions/pool"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Updated pool.",
            "schema": {
              "type": "object",
              "properties": {
                "pool": {
                  "$ref": "#/definitions/pool"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:pool:put"
      },
      "delete": {
        "tags": [
          "Pools"
        ],
        "summary": "Delete a pool",
        "responses": {
          "204": {
            "description": "Resource successfully deleted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:pool:delete"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the pool",
          "name": "pool_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/quotas": {
      "get": {
        "tags": [
          "Administrative"
        ],
        "summary": "List Quotas",
        "responses": {
          "200": {
            "description": "A JSON array of quotas",
            "schema": {
              "type": "object",
              "properties": {
                "quotas": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/definitions/quota"
                      },
                      {
                        "properties": {
                          "project_id": {
                            "description": "The ID of the project owning this resource.",
                            "type": "string",
                            "maxLength": 32,
                            "minLength": 32,
                            "x-nullable": true,
                            "example": "fa84c217f361441986a220edf9b1e337"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:quota:get_all"
      },
      "parameters": [
        {
          "maxLength": 32,
          "minLength": 32,
          "type": "string",
          "description": "The ID of the project to query.",
          "name": "project_id",
          "in": "query"
        }
      ]
    },
    "/quotas/defaults": {
      "get": {
        "tags": [
          "Administrative"
        ],
        "summary": "Show Quota Defaults",
        "responses": {
          "200": {
            "description": "Show the quota defaults configured for new projects.",
            "schema": {
              "type": "object",
              "properties": {
                "quota": {
                  "$ref": "#/definitions/quota"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:quota:get_one"
      }
    },
    "/quotas/{project_id}": {
      "get": {
        "tags": [
          "Administrative"
        ],
        "summary": "Show Quota detail",
        "responses": {
          "200": {
            "description": "Shows the details of a specific monitor.",
            "schema": {
              "type": "object",
              "properties": {
                "quota": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/quota"
                    },
                    {
                      "$ref": "#/definitions/quota_usage"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:quota:get_one"
      },
      "put": {
        "tags": [
          "Administrative"
        ],
        "summary": "Update Quota",
        "parameters": [
          {
            "name": "quota",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "quota"
              ],
              "properties": {
                "quota": {
                  "$ref": "#/definitions/quota"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Updated quota for a project.",
            "schema": {
              "type": "object",
              "properties": {
                "quota": {
                  "$ref": "#/definitions/quota"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:quota:put"
      },
      "delete": {
        "tags": [
          "Administrative"
        ],
        "summary": "Reset all Quota of a project",
        "responses": {
          "204": {
            "description": "Resource successfully reseted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:quota:delete"
      },
      "parameters": [
        {
          "type": "string",
          "description": "The ID of the project to query.",
          "name": "project_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/services": {
      "get": {
        "tags": [
          "Administrative"
        ],
        "summary": "List Services",
        "responses": {
          "200": {
            "description": "A JSON array of services",
            "schema": {
              "type": "object",
              "properties": {
                "services": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/service"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:service:get_all"
      }
    },
    "/sync": {
      "post": {
        "tags": [
          "Administrative"
        ],
        "summary": "Enqueue a full sync",
        "parameters": [
          {
            "name": "domains",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "domains"
              ],
              "properties": {
                "domains": {
                  "type": "array",
                  "items": {
                    "description": "The ID of a domain to be synced.",
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Full sync has been enqueued."
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:sync:post"
      }
    }
  },
  "definitions": {
    "datacenter": {
      "type": "object",
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the resource, which is up (true) or down (false). Default is true.",
          "type": "boolean",
          "default": true,
          "x-nullable": true
        },
        "city": {
          "type": "string",
          "default": "",
          "maxLength": 255,
          "x-nullable": true,
          "x-omitempty": false,
          "example": "Berlin"
        },
        "continent": {
          "type": "string",
          "default": "",
          "maxLength": 255,
          "x-nullable": true,
          "x-omitempty": false,
          "example": "EU"
        },
        "country": {
          "type": "string",
          "default": "",
          "maxLength": 2,
          "x-nullable": true,
          "x-omitempty": false,
          "example": "DE"
        },
        "created_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-05-11T17:21:34"
        },
        "id": {
          "description": "The id of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "default": 52.52,
          "x-nullable": true,
          "x-omitempty": false,
          "example": 52.526055
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "default": 13.4,
          "x-nullable": true,
          "x-omitempty": false,
          "example": 13.403454
        },
        "meta": {
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "description": "Human-readable name of the resource.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "project_id": {
          "description": "The ID of the project owning this resource.",
          "type": "string",
          "maxLength": 32,
          "minLength": 32,
          "x-nullable": true,
          "example": "fa84c217f361441986a220edf9b1e337"
        },
        "provider": {
          "description": "Provider driver for the backend solution",
          "type": "string",
          "enum": [
            "akamai",
            "f5"
          ],
          "example": "akamai"
        },
        "provisioning_status": {
          "type": "string",
          "enum": [
            "PENDING_CREATE",
            "PENDING_UPDATE",
            "PENDING_DELETE",
            "ACTIVE",
            "ERROR"
          ],
          "readOnly": true
        },
        "scope": {
          "description": "Visibility of datacenter between different projects",
          "type": "string",
          "default": "private",
          "enum": [
            "private",
            "shared"
          ],
          "x-nullable": true
        },
        "state_or_province": {
          "type": "string",
          "default": "",
          "maxLength": 255,
          "x-nullable": true,
          "x-omitempty": false,
          "example": "Berlin"
        },
        "updated_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-09-09T14:52:15"
        }
      }
    },
    "domain": {
      "description": "A representation of a domain",
      "type": "object",
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the resource, which is up (true) or down (false). Default is true.",
          "type": "boolean",
          "default": true
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "string",
            "example": "alias.example.com"
          }
        },
        "cname_target": {
          "description": "If not empty, the backend created a CNAME target to be used for the FQDN.",
          "type": "string",
          "format": "hostname",
          "x-nullable": true,
          "readOnly": true,
          "example": "example.org.production.gtm.com"
        },
        "created_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-05-11T17:21:34"
        },
        "fqdn": {
          "description": "Desired Fully-Qualified Host Name.",
          "type": "string",
          "format": "hostname",
          "maxLength": 512,
          "x-nullable": true,
          "example": "example.org"
        },
        "id": {
          "description": "The id of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "mode": {
          "description": "Load balancing method to use for the references pools.",
          "type": "string",
          "default": "ROUND_ROBIN",
          "enum": [
            "WEIGHTED",
            "ROUND_ROBIN",
            "GEOGRAPHIC",
            "AVAILABILITY"
          ]
        },
        "name": {
          "description": "Human-readable name of the resource.",
          "type": "string",
          "x-nullable": true
        },
        "pools": {
          "type": "array",
          "items": {
            "description": "Pool that this domain uses for load balancing.",
            "type": "string",
            "format": "uuid"
          }
        },
        "project_id": {
          "description": "The ID of the project owning this resource.",
          "type": "string",
          "maxLength": 32,
          "minLength": 32,
          "x-nullable": true,
          "example": "fa84c217f361441986a220edf9b1e337"
        },
        "provider": {
          "description": "Supported provider drivers",
          "type": "string",
          "enum": [
            "akamai",
            "f5"
          ],
          "x-nullable": true,
          "example": "akamai"
        },
        "provisioning_status": {
          "type": "string",
          "enum": [
            "PENDING_CREATE",
            "PENDING_UPDATE",
            "PENDING_DELETE",
            "ACTIVE",
            "ERROR"
          ],
          "readOnly": true
        },
        "record_type": {
          "description": "DNS Record type to use.",
          "type": "string",
          "default": "A",
          "enum": [
            "A",
            "AAAA",
            "CNAME",
            "MX"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "ONLINE",
            "DOWN"
          ],
          "readOnly": true
        },
        "updated_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-09-09T14:52:15"
        }
      }
    },
    "error": {
      "type": "object",
      "properties": {
        "code": {
          "description": "HTTP Error code",
          "type": "integer",
          "example": 404
        },
        "message": {
          "type": "string",
          "example": "An example error message"
        }
      }
    },
    "geomap": {
      "type": "object",
      "required": [
        "default_datacenter"
      ],
      "properties": {
        "assignments": {
          "description": "Country to datacenter assignments.",
          "type": "array",
          "items": {
            "description": "Assignment.",
            "type": "object",
            "properties": {
              "country": {
                "description": "ISO 3166 2-Letter Country code.",
                "type": "string",
                "maxLength": 2,
                "minLength": 2
              },
              "datacenter": {
                "description": "Datacenter ID",
                "type": "string",
                "format": "uuid"
              }
            }
          }
        },
        "created_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-05-11T17:21:34"
        },
        "default_datacenter": {
          "description": "Datacenter ID",
          "type": "string",
          "format": "uuid"
        },
        "id": {
          "description": "The id of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "name": {
          "description": "Human-readable name of the resource.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "project_id": {
          "description": "The ID of the project owning this resource.",
          "type": "string",
          "maxLength": 32,
          "minLength": 32,
          "x-nullable": true,
          "example": "fa84c217f361441986a220edf9b1e337"
        },
        "provider": {
          "description": "Provider driver for the backend solution",
          "type": "string",
          "enum": [
            "akamai",
            "f5"
          ],
          "example": "akamai"
        },
        "provisioning_status": {
          "type": "string",
          "enum": [
            "PENDING_CREATE",
            "PENDING_UPDATE",
            "PENDING_DELETE",
            "ACTIVE",
            "ERROR"
          ],
          "readOnly": true
        },
        "scope": {
          "description": "Visibility of datacenter between different projects",
          "type": "string",
          "default": "private",
          "enum": [
            "private",
            "shared"
          ],
          "x-nullable": true
        },
        "updated_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-09-09T14:52:15"
        }
      }
    },
    "link": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "format": "uri"
        },
        "rel": {
          "type": "string",
          "enum": [
            "next",
            "previous"
          ]
        }
      },
      "readOnly": true
    },
    "member": {
      "type": "object",
      "properties": {
        "address": {
          "description": "Address to use.",
          "type": "string",
          "format": "ipv4",
          "x-nullable": true,
          "example": "1.2.3.4"
        },
        "admin_state_up": {
          "description": "The administrative state of the resource, which is up (true) or down (false). Default is true.",
          "type": "boolean",
          "default": true,
          "x-nullable": true
        },
        "created_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-05-11T17:21:34"
        },
        "datacenter_id": {
          "description": "Datacenter assigned for this member.",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "id": {
          "description": "The id of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "name": {
          "description": "Human-readable name of the resource.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "pool_id": {
          "description": "pool id.",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "port": {
          "description": "Port to use for monitor checks.",
          "type": "integer",
          "maximum": 65535,
          "x-nullabe": true,
          "example": 80
        },
        "project_id": {
          "description": "The ID of the project owning this resource.",
          "type": "string",
          "maxLength": 32,
          "minLength": 32,
          "x-nullable": true,
          "example": "fa84c217f361441986a220edf9b1e337"
        },
        "provisioning_status": {
          "type": "string",
          "enum": [
            "PENDING_CREATE",
            "PENDING_UPDATE",
            "PENDING_DELETE",
            "ACTIVE",
            "ERROR"
          ],
          "readOnly": true
        },
        "status": {
          "type": "string",
          "enum": [
            "ONLINE",
            "NO_MONITOR",
            "OFFLINE"
          ],
          "readOnly": true
        },
        "updated_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-09-09T14:52:15"
        }
      }
    },
    "monitor": {
      "type": "object",
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the resource, which is up (true) or down (false). Default is true.",
          "type": "boolean",
          "default": true,
          "x-nullable": true
        },
        "created_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-05-11T17:21:34"
        },
        "domain_name": {
          "description": "The domain name, which be injected into the HTTP Host Header to the backend server for HTTP health check. Only used for HTTP/S monitors.",
          "type": "string",
          "format": "hostname",
          "maxLength": 255,
          "x-nullable": true,
          "example": "example.org"
        },
        "http_method": {
          "description": "HTTP method to use for monitor checks. Only used for HTTP/S monitors.",
          "type": "string",
          "default": "GET",
          "enum": [
            "GET",
            "POST",
            "PUT",
            "HEAD",
            "PATCH",
            "DELETE",
            "OPTIONS"
          ]
        },
        "id": {
          "description": "The id of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "interval": {
          "description": "The interval, in seconds, between health checks.",
          "type": "integer",
          "default": 60,
          "maximum": 86399,
          "minimum": 10,
          "x-nullable": true,
          "example": 10
        },
        "name": {
          "description": "Human-readable name of the resource.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "pool_id": {
          "description": "ID of the pool to check members",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "project_id": {
          "description": "The ID of the project owning this resource.",
          "type": "string",
          "maxLength": 32,
          "minLength": 32,
          "x-nullable": true,
          "example": "fa84c217f361441986a220edf9b1e337"
        },
        "provisioning_status": {
          "type": "string",
          "enum": [
            "PENDING_CREATE",
            "PENDING_UPDATE",
            "PENDING_DELETE",
            "ACTIVE",
            "ERROR"
          ],
          "readOnly": true
        },
        "receive": {
          "description": "Specifies the text string that the monitor expects to receive from the target member.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true,
          "example": "HTTP/1."
        },
        "send": {
          "description": "Specifies the text string that the monitor sends to the target member. For HTTP/S monitors, this is a GET request and must be a HTTP path, e.g. ` + "`" + `/status` + "`" + `.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true,
          "example": "/stats"
        },
        "timeout": {
          "description": "The time in total, in seconds, after which a health check times out.",
          "type": "integer",
          "default": 10,
          "maximum": 60,
          "x-nullable": true,
          "example": 30
        },
        "type": {
          "description": "Type of the health check monitor.",
          "type": "string",
          "default": "ICMP",
          "enum": [
            "HTTP",
            "HTTPS",
            "ICMP",
            "TCP",
            "UDP"
          ],
          "x-nullable": true,
          "example": "HTTP"
        },
        "updated_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-09-09T14:52:15"
        }
      }
    },
    "pool": {
      "type": "object",
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the resource, which is up (true) or down (false). Default is true.",
          "type": "boolean",
          "default": true
        },
        "created_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-05-11 17:21:34"
        },
        "domains": {
          "description": "Array of domains assigned to this pool",
          "type": "array",
          "items": {
            "description": "Domain ID",
            "type": "string",
            "format": "uuid"
          }
        },
        "id": {
          "description": "The id of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "members": {
          "description": "Array of member ids that this pool uses for load balancing.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          },
          "readOnly": true
        },
        "monitors": {
          "description": "Array of monitor ids that this pool uses health checks.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          },
          "readOnly": true
        },
        "name": {
          "description": "Human-readable name of the resource.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "project_id": {
          "description": "The ID of the project owning this resource.",
          "type": "string",
          "maxLength": 32,
          "minLength": 32,
          "x-nullable": true,
          "example": "fa84c217f361441986a220edf9b1e337"
        },
        "provisioning_status": {
          "type": "string",
          "enum": [
            "PENDING_CREATE",
            "PENDING_UPDATE",
            "PENDING_DELETE",
            "ACTIVE",
            "ERROR"
          ],
          "readOnly": true
        },
        "status": {
          "type": "string",
          "enum": [
            "ONLINE",
            "DOWN"
          ],
          "readOnly": true
        },
        "updated_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-09-09 14:52:15"
        }
      }
    },
    "quota": {
      "type": "object",
      "properties": {
        "datacenter": {
          "description": "The configured datacenter quota limit. A setting of null means it is using the deployment default quota. A setting of -1 means unlimited.",
          "type": "integer",
          "x-nullable": true,
          "example": 5
        },
        "domain": {
          "description": "The configured domain quota limit. A setting of null means it is using the deployment default quota. A setting of -1 means unlimited.",
          "type": "integer",
          "x-nullable": true,
          "example": 5
        },
        "member": {
          "description": "The configured member quota limit. A setting of null means it is using the deployment default quota. A setting of -1 means unlimited.",
          "type": "integer",
          "x-nullable": true,
          "example": 5
        },
        "monitor": {
          "description": "The configured monitor quota limit. A setting of null means it is using the deployment default quota. A setting of -1 means unlimited.",
          "type": "integer",
          "x-nullable": true,
          "example": 5
        },
        "pool": {
          "description": "The configured pool quota limit. A setting of null means it is using the deployment default quota. A setting of -1 means unlimited.",
          "type": "integer",
          "x-nullable": true,
          "example": 5
        }
      }
    },
    "quota_usage": {
      "type": "object",
      "properties": {
        "in_use_datacenter": {
          "description": "The current quota usage of datacenter.",
          "type": "integer",
          "x-omitempty": false,
          "example": 5
        },
        "in_use_domain": {
          "description": "The current quota usage of domain.",
          "type": "integer",
          "x-omitempty": false,
          "example": 5
        },
        "in_use_member": {
          "description": "The current quota usage of member.",
          "type": "integer",
          "x-omitempty": false,
          "example": 5
        },
        "in_use_monitor": {
          "description": "The current quota usage of monitor.",
          "type": "integer",
          "x-omitempty": false,
          "example": 5
        },
        "in_use_pool": {
          "description": "The current quota usage of pool.",
          "type": "integer",
          "x-omitempty": false,
          "example": 5
        }
      }
    },
    "service": {
      "type": "object",
      "properties": {
        "heartbeat": {
          "description": "The UTC date and timestamp when had the last heartbeat.",
          "type": "string",
          "format": "date-time",
          "example": "2020-05-11 17:21:34"
        },
        "host": {
          "description": "Hostname of the computer the service is running.",
          "type": "string",
          "format": "hostname",
          "example": "example.host"
        },
        "id": {
          "description": "ID of the RPC service.",
          "type": "string",
          "example": "andromeda-agent-fbb49979-03f5-4a97-a334-1fd2c9f61e7e"
        },
        "metadata": {
          "type": "object"
        },
        "provider": {
          "description": "Provider this service supports.",
          "type": "string",
          "example": "akamai"
        },
        "rpc_address": {
          "description": "RPC Endpoint Address.",
          "type": "string",
          "example": "_INBOX.VEfFxcAzZQ9iM9vwGH49It"
        },
        "type": {
          "description": "Type of service.",
          "type": "string",
          "example": "healthcheck"
        },
        "version": {
          "description": "Version of the service.",
          "type": "string",
          "example": "1.2.3"
        }
      }
    }
  },
  "parameters": {
    "limit": {
      "type": "integer",
      "description": "Sets the page size.",
      "name": "limit",
      "in": "query"
    },
    "marker": {
      "type": "string",
      "format": "uuid",
      "description": "Pagination ID of the last item in the previous list.",
      "name": "marker",
      "in": "query"
    },
    "page_reverse": {
      "type": "boolean",
      "description": "Sets the page direction.",
      "name": "page_reverse",
      "in": "query"
    },
    "sort": {
      "type": "string",
      "description": "Comma-separated list of sort keys, optinally prefix with - to reverse sort order.",
      "name": "sort",
      "in": "query"
    }
  },
  "tags": [
    {
      "description": "Domains are the highest level of entities defining DNS endpoints to be load balanced.",
      "name": "Domains"
    },
    {
      "description": "Pools are logical collections of datacenters hosting target applications.",
      "name": "Pools"
    },
    {
      "description": "Datacenter are collections of Members that share the same geographical location.",
      "name": "Datacenters"
    },
    {
      "description": "Members are IP/Port endpoints of the applications to be load balanced.",
      "name": "Members"
    },
    {
      "description": "Monitors are health checks that influce load balancing decisions.",
      "name": "Monitors"
    },
    {
      "description": "Administrative API",
      "name": "Administrative"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Platform agnostic GSLB frontend",
    "title": "Andromeda",
    "version": "1.1.1"
  },
  "basePath": "/v1",
  "paths": {
    "/cidr-blocks": {
      "get": {
        "tags": [
          "Administrative"
        ],
        "summary": "List CIDR blocks of a service",
        "parameters": [
          {
            "enum": [
              "akamai",
              "f5"
            ],
            "type": "string",
            "x-nullable": true,
            "description": "The provider to filter the CIDR blocks by.",
            "name": "provider",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of CIDR blocks",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:cidr-blocks:get"
      }
    },
    "/datacenters": {
      "get": {
        "tags": [
          "Datacenters"
        ],
        "summary": "List datacenters",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Pagination ID of the last item in the previous list.",
            "name": "marker",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Sets the page size.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma-separated list of sort keys, optinally prefix with - to reverse sort order.",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Sets the page direction.",
            "name": "page_reverse",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "x-nullable": true,
            "description": "Filter datacenters by datacenter ID",
            "name": "datacenter_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of datacenters",
            "schema": {
              "type": "object",
              "properties": {
                "datacenters": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/datacenter"
                  }
                },
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/link"
                  },
                  "x-omitempty": true
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:datacenter:get_all"
      },
      "post": {
        "tags": [
          "Datacenters"
        ],
        "summary": "Create new datacenter",
        "parameters": [
          {
            "name": "datacenter",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "datacenter"
              ],
              "properties": {
                "datacenter": {
                  "$ref": "#/definitions/datacenter"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created datacenter.",
            "schema": {
              "type": "object",
              "properties": {
                "datacenter": {
                  "$ref": "#/definitions/datacenter"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:datacenter:post"
      }
    },
    "/datacenters/{datacenter_id}": {
      "get": {
        "tags": [
          "Datacenters"
        ],
        "summary": "Show datacenter detail",
        "responses": {
          "200": {
            "description": "Shows the details of a specific datacenter.",
            "schema": {
              "type": "object",
              "properties": {
                "datacenter": {
                  "$ref": "#/definitions/datacenter"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:datacenter:get_one"
      },
      "put": {
        "tags": [
          "Datacenters"
        ],
        "summary": "Update a datacenter",
        "parameters": [
          {
            "name": "datacenter",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "datacenter"
              ],
              "properties": {
                "datacenter": {
                  "$ref": "#/definitions/datacenter"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Updated datacenter.",
            "schema": {
              "type": "object",
              "properties": {
                "datacenter": {
                  "$ref": "#/definitions/datacenter"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:datacenter:put"
      },
      "delete": {
        "tags": [
          "Datacenters"
        ],
        "summary": "Delete a datacenter",
        "responses": {
          "204": {
            "description": "Resource successfully deleted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:datacenter:delete"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the datacenter",
          "name": "datacenter_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/domains": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "List domains",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Pagination ID of the last item in the previous list.",
            "name": "marker",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Sets the page size.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma-separated list of sort keys, optinally prefix with - to reverse sort order.",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Sets the page direction.",
            "name": "page_reverse",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "x-nullable": true,
            "description": "Filter domains by domain ID",
            "name": "domain_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of domains",
            "schema": {
              "type": "object",
              "properties": {
                "domains": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/domain"
                  }
                },
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/link"
                  },
                  "x-omitempty": true
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:domain:get_all"
      },
      "post": {
        "tags": [
          "Domains"
        ],
        "summary": "Create new domain",
        "parameters": [
          {
            "name": "domain",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "domain"
              ],
              "properties": {
                "domain": {
                  "$ref": "#/definitions/domain"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created domain.",
            "schema": {
              "type": "object",
              "properties": {
                "domain": {
                  "$ref": "#/definitions/domain"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:domain:post"
      }
    },
    "/domains/{domain_id}": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "Show domain detail",
        "responses": {
          "200": {
            "description": "Shows the details of a specific domain.",
            "schema": {
              "type": "object",
              "properties": {
                "domain": {
                  "$ref": "#/definitions/domain"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:domain:get_one"
      },
      "put": {
        "tags": [
          "Domains"
        ],
        "summary": "Update a domain",
        "parameters": [
          {
            "name": "domain",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "domain"
              ],
              "properties": {
                "domain": {
                  "$ref": "#/definitions/domain"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Updated domain.",
            "schema": {
              "type": "object",
              "properties": {
                "domain": {
                  "$ref": "#/definitions/domain"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:domain:put"
      },
      "delete": {
        "tags": [
          "Domains"
        ],
        "summary": "Delete a domain",
        "responses": {
          "204": {
            "description": "Resource successfully deleted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:domain:delete"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the domain",
          "name": "domain_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/geomaps": {
      "get": {
        "tags": [
          "Geographic maps"
        ],
        "summary": "List geographic maps",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Pagination ID of the last item in the previous list.",
            "name": "marker",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Sets the page size.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma-separated list of sort keys, optinally prefix with - to reverse sort order.",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Sets the page direction.",
            "name": "page_reverse",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "x-nullable": true,
            "description": "Filter geographic map by datacenter ID",
            "name": "datacenter_id",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "x-nullable": true,
            "description": "Filter geographic map by default datacenter ID",
            "name": "default_datacenter_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of geographic maps",
            "schema": {
              "type": "object",
              "properties": {
                "geomaps": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/geomap"
                  }
                },
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/link"
                  },
                  "x-omitempty": true
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:geomap:get_all"
      },
      "post": {
        "tags": [
          "Geographic maps"
        ],
        "summary": "Create new geographic map",
        "parameters": [
          {
            "name": "geomap",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "geomap"
              ],
              "properties": {
                "geomap": {
                  "$ref": "#/definitions/geomap"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created geomap.",
            "schema": {
              "type": "object",
              "properties": {
                "geomap": {
                  "$ref": "#/definitions/geomap"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:geomap:post"
      }
    },
    "/geomaps/{geomap_id}": {
      "get": {
        "tags": [
          "Geographic maps"
        ],
        "summary": "Show geographic map detail",
        "responses": {
          "200": {
            "description": "Shows the details of a specific geomap.",
            "schema": {
              "type": "object",
              "properties": {
                "geomap": {
                  "$ref": "#/definitions/geomap"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:geomap:get_one"
      },
      "put": {
        "tags": [
          "Geographic maps"
        ],
        "summary": "Update a geographic map",
        "parameters": [
          {
            "name": "geomap",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "geomap"
              ],
              "properties": {
                "geomap": {
                  "$ref": "#/definitions/geomap"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Updated geomap.",
            "schema": {
              "type": "object",
              "properties": {
                "geomap": {
                  "$ref": "#/definitions/geomap"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:geomap:put"
      },
      "delete": {
        "tags": [
          "Geographic maps"
        ],
        "summary": "Delete a geographic map",
        "responses": {
          "204": {
            "description": "Resource successfully deleted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:geomap:delete"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the geomap",
          "name": "geomap_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/members": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "List members",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Pagination ID of the last item in the previous list.",
            "name": "marker",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Sets the page size.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma-separated list of sort keys, optinally prefix with - to reverse sort order.",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Sets the page direction.",
            "name": "page_reverse",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "x-nullable": true,
            "description": "Pool ID of the members to fetch",
            "name": "pool_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of members",
            "schema": {
              "type": "object",
              "properties": {
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/link"
                  },
                  "x-omitempty": true
                },
                "members": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/member"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:member:get_all"
      },
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "Create new member",
        "parameters": [
          {
            "name": "member",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "member"
              ],
              "properties": {
                "member": {
                  "$ref": "#/definitions/member"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created member.",
            "schema": {
              "type": "object",
              "properties": {
                "member": {
                  "$ref": "#/definitions/member"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:member:post"
      }
    },
    "/members/{member_id}": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "Show member detail",
        "responses": {
          "200": {
            "description": "Shows the details of a specific member.",
            "schema": {
              "type": "object",
              "properties": {
                "member": {
                  "$ref": "#/definitions/member"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:member:get_one"
      },
      "put": {
        "tags": [
          "Members"
        ],
        "summary": "Update a member",
        "parameters": [
          {
            "name": "member",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "member"
              ],
              "properties": {
                "member": {
                  "$ref": "#/definitions/member"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Updated member.",
            "schema": {
              "type": "object",
              "properties": {
                "member": {
                  "$ref": "#/definitions/member"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:member:put"
      },
      "delete": {
        "tags": [
          "Members"
        ],
        "summary": "Delete a member",
        "responses": {
          "204": {
            "description": "Resource successfully deleted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:member:delete"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the member",
          "name": "member_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/monitors": {
      "get": {
        "tags": [
          "Monitors"
        ],
        "summary": "List monitors",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Pagination ID of the last item in the previous list.",
            "name": "marker",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Sets the page size.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma-separated list of sort keys, optinally prefix with - to reverse sort order.",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Sets the page direction.",
            "name": "page_reverse",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "x-nullable": true,
            "description": "Pool ID of the monitors to fetch",
            "name": "pool_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of monitors",
            "schema": {
              "type": "object",
              "properties": {
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/link"
                  },
                  "x-omitempty": true
                },
                "monitors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/monitor"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:monitor:get_all"
      },
      "post": {
        "tags": [
          "Monitors"
        ],
        "summary": "Create new monitor",
        "parameters": [
          {
            "name": "monitor",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "monitor"
              ],
              "properties": {
                "monitor": {
                  "$ref": "#/definitions/monitor"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created monitor.",
            "schema": {
              "type": "object",
              "properties": {
                "monitor": {
                  "$ref": "#/definitions/monitor"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:monitor:post"
      }
    },
    "/monitors/{monitor_id}": {
      "get": {
        "tags": [
          "Monitors"
        ],
        "summary": "Show monitor detail",
        "responses": {
          "200": {
            "description": "Shows the details of a specific monitor.",
            "schema": {
              "type": "object",
              "properties": {
                "monitor": {
                  "$ref": "#/definitions/monitor"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:monitor:get_one"
      },
      "put": {
        "tags": [
          "Monitors"
        ],
        "summary": "Update a monitor",
        "parameters": [
          {
            "name": "monitor",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "monitor"
              ],
              "properties": {
                "monitor": {
                  "$ref": "#/definitions/monitor"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Updated monitor.",
            "schema": {
              "type": "object",
              "properties": {
                "monitor": {
                  "$ref": "#/definitions/monitor"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:monitor:put"
      },
      "delete": {
        "tags": [
          "Monitors"
        ],
        "summary": "Delete a monitor",
        "responses": {
          "204": {
            "description": "Resource successfully deleted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:monitor:delete"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the monitor",
          "name": "monitor_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/pools": {
      "get": {
        "tags": [
          "Pools"
        ],
        "summary": "List pools",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Pagination ID of the last item in the previous list.",
            "name": "marker",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Sets the page size.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma-separated list of sort keys, optinally prefix with - to reverse sort order.",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Sets the page direction.",
            "name": "page_reverse",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "x-nullable": true,
            "description": "Filter pools by domain ID",
            "name": "domain_id",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "x-nullable": true,
            "description": "Filter pools by pool ID",
            "name": "pool_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of pools",
            "schema": {
              "type": "object",
              "properties": {
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/link"
                  },
                  "x-omitempty": true
                },
                "pools": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/pool"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:pool:get_all"
      },
      "post": {
        "tags": [
          "Pools"
        ],
        "summary": "Create new pool",
        "parameters": [
          {
            "name": "pool",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "pool"
              ],
              "properties": {
                "pool": {
                  "$ref": "#/definitions/pool"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created pool.",
            "schema": {
              "type": "object",
              "properties": {
                "pool": {
                  "$ref": "#/definitions/pool"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:pool:post"
      }
    },
    "/pools/{pool_id}": {
      "get": {
        "tags": [
          "Pools"
        ],
        "summary": "Show pool detail",
        "responses": {
          "200": {
            "description": "Shows the details of a specific pool.",
            "schema": {
              "type": "object",
              "properties": {
                "pool": {
                  "$ref": "#/definitions/pool"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:pool:get_one"
      },
      "put": {
        "tags": [
          "Pools"
        ],
        "summary": "Update a pool",
        "parameters": [
          {
            "name": "pool",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "pool"
              ],
              "properties": {
                "pool": {
                  "$ref": "#/definitions/pool"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Updated pool.",
            "schema": {
              "type": "object",
              "properties": {
                "pool": {
                  "$ref": "#/definitions/pool"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:pool:put"
      },
      "delete": {
        "tags": [
          "Pools"
        ],
        "summary": "Delete a pool",
        "responses": {
          "204": {
            "description": "Resource successfully deleted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:pool:delete"
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the pool",
          "name": "pool_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/quotas": {
      "get": {
        "tags": [
          "Administrative"
        ],
        "summary": "List Quotas",
        "responses": {
          "200": {
            "description": "A JSON array of quotas",
            "schema": {
              "type": "object",
              "properties": {
                "quotas": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/QuotasItems0"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:quota:get_all"
      },
      "parameters": [
        {
          "maxLength": 32,
          "minLength": 32,
          "type": "string",
          "description": "The ID of the project to query.",
          "name": "project_id",
          "in": "query"
        }
      ]
    },
    "/quotas/defaults": {
      "get": {
        "tags": [
          "Administrative"
        ],
        "summary": "Show Quota Defaults",
        "responses": {
          "200": {
            "description": "Show the quota defaults configured for new projects.",
            "schema": {
              "type": "object",
              "properties": {
                "quota": {
                  "$ref": "#/definitions/quota"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:quota:get_one"
      }
    },
    "/quotas/{project_id}": {
      "get": {
        "tags": [
          "Administrative"
        ],
        "summary": "Show Quota detail",
        "responses": {
          "200": {
            "description": "Shows the details of a specific monitor.",
            "schema": {
              "type": "object",
              "properties": {
                "quota": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/quota"
                    },
                    {
                      "$ref": "#/definitions/quota_usage"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:quota:get_one"
      },
      "put": {
        "tags": [
          "Administrative"
        ],
        "summary": "Update Quota",
        "parameters": [
          {
            "name": "quota",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "quota"
              ],
              "properties": {
                "quota": {
                  "$ref": "#/definitions/quota"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Updated quota for a project.",
            "schema": {
              "type": "object",
              "properties": {
                "quota": {
                  "$ref": "#/definitions/quota"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:quota:put"
      },
      "delete": {
        "tags": [
          "Administrative"
        ],
        "summary": "Reset all Quota of a project",
        "responses": {
          "204": {
            "description": "Resource successfully reseted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:quota:delete"
      },
      "parameters": [
        {
          "type": "string",
          "description": "The ID of the project to query.",
          "name": "project_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/services": {
      "get": {
        "tags": [
          "Administrative"
        ],
        "summary": "List Services",
        "responses": {
          "200": {
            "description": "A JSON array of services",
            "schema": {
              "type": "object",
              "properties": {
                "services": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/service"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:service:get_all"
      }
    },
    "/sync": {
      "post": {
        "tags": [
          "Administrative"
        ],
        "summary": "Enqueue a full sync",
        "parameters": [
          {
            "name": "domains",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "domains"
              ],
              "properties": {
                "domains": {
                  "type": "array",
                  "items": {
                    "description": "The ID of a domain to be synced.",
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Full sync has been enqueued."
          },
          "default": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "x-policy": "andromeda:sync:post"
      }
    }
  },
  "definitions": {
    "GeomapAssignmentsItems0": {
      "description": "Assignment.",
      "type": "object",
      "properties": {
        "country": {
          "description": "ISO 3166 2-Letter Country code.",
          "type": "string",
          "maxLength": 2,
          "minLength": 2
        },
        "datacenter": {
          "description": "Datacenter ID",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "QuotasItems0": {
      "allOf": [
        {
          "$ref": "#/definitions/quota"
        },
        {
          "properties": {
            "project_id": {
              "description": "The ID of the project owning this resource.",
              "type": "string",
              "maxLength": 32,
              "minLength": 32,
              "x-nullable": true,
              "example": "fa84c217f361441986a220edf9b1e337"
            }
          }
        }
      ]
    },
    "datacenter": {
      "type": "object",
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the resource, which is up (true) or down (false). Default is true.",
          "type": "boolean",
          "default": true,
          "x-nullable": true
        },
        "city": {
          "type": "string",
          "default": "",
          "maxLength": 255,
          "x-nullable": true,
          "x-omitempty": false,
          "example": "Berlin"
        },
        "continent": {
          "type": "string",
          "default": "",
          "maxLength": 255,
          "x-nullable": true,
          "x-omitempty": false,
          "example": "EU"
        },
        "country": {
          "type": "string",
          "default": "",
          "maxLength": 2,
          "x-nullable": true,
          "x-omitempty": false,
          "example": "DE"
        },
        "created_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-05-11T17:21:34"
        },
        "id": {
          "description": "The id of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "default": 52.52,
          "x-nullable": true,
          "x-omitempty": false,
          "example": 52.526055
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "default": 13.4,
          "x-nullable": true,
          "x-omitempty": false,
          "example": 13.403454
        },
        "meta": {
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "description": "Human-readable name of the resource.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "project_id": {
          "description": "The ID of the project owning this resource.",
          "type": "string",
          "maxLength": 32,
          "minLength": 32,
          "x-nullable": true,
          "example": "fa84c217f361441986a220edf9b1e337"
        },
        "provider": {
          "description": "Provider driver for the backend solution",
          "type": "string",
          "enum": [
            "akamai",
            "f5"
          ],
          "example": "akamai"
        },
        "provisioning_status": {
          "type": "string",
          "enum": [
            "PENDING_CREATE",
            "PENDING_UPDATE",
            "PENDING_DELETE",
            "ACTIVE",
            "ERROR"
          ],
          "readOnly": true
        },
        "scope": {
          "description": "Visibility of datacenter between different projects",
          "type": "string",
          "default": "private",
          "enum": [
            "private",
            "shared"
          ],
          "x-nullable": true
        },
        "state_or_province": {
          "type": "string",
          "default": "",
          "maxLength": 255,
          "x-nullable": true,
          "x-omitempty": false,
          "example": "Berlin"
        },
        "updated_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-09-09T14:52:15"
        }
      }
    },
    "domain": {
      "description": "A representation of a domain",
      "type": "object",
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the resource, which is up (true) or down (false). Default is true.",
          "type": "boolean",
          "default": true
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "string",
            "example": "alias.example.com"
          }
        },
        "cname_target": {
          "description": "If not empty, the backend created a CNAME target to be used for the FQDN.",
          "type": "string",
          "format": "hostname",
          "x-nullable": true,
          "readOnly": true,
          "example": "example.org.production.gtm.com"
        },
        "created_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-05-11T17:21:34"
        },
        "fqdn": {
          "description": "Desired Fully-Qualified Host Name.",
          "type": "string",
          "format": "hostname",
          "maxLength": 512,
          "x-nullable": true,
          "example": "example.org"
        },
        "id": {
          "description": "The id of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "mode": {
          "description": "Load balancing method to use for the references pools.",
          "type": "string",
          "default": "ROUND_ROBIN",
          "enum": [
            "WEIGHTED",
            "ROUND_ROBIN",
            "GEOGRAPHIC",
            "AVAILABILITY"
          ]
        },
        "name": {
          "description": "Human-readable name of the resource.",
          "type": "string",
          "x-nullable": true
        },
        "pools": {
          "type": "array",
          "items": {
            "description": "Pool that this domain uses for load balancing.",
            "type": "string",
            "format": "uuid"
          }
        },
        "project_id": {
          "description": "The ID of the project owning this resource.",
          "type": "string",
          "maxLength": 32,
          "minLength": 32,
          "x-nullable": true,
          "example": "fa84c217f361441986a220edf9b1e337"
        },
        "provider": {
          "description": "Supported provider drivers",
          "type": "string",
          "enum": [
            "akamai",
            "f5"
          ],
          "x-nullable": true,
          "example": "akamai"
        },
        "provisioning_status": {
          "type": "string",
          "enum": [
            "PENDING_CREATE",
            "PENDING_UPDATE",
            "PENDING_DELETE",
            "ACTIVE",
            "ERROR"
          ],
          "readOnly": true
        },
        "record_type": {
          "description": "DNS Record type to use.",
          "type": "string",
          "default": "A",
          "enum": [
            "A",
            "AAAA",
            "CNAME",
            "MX"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "ONLINE",
            "DOWN"
          ],
          "readOnly": true
        },
        "updated_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-09-09T14:52:15"
        }
      }
    },
    "error": {
      "type": "object",
      "properties": {
        "code": {
          "description": "HTTP Error code",
          "type": "integer",
          "example": 404
        },
        "message": {
          "type": "string",
          "example": "An example error message"
        }
      }
    },
    "geomap": {
      "type": "object",
      "required": [
        "default_datacenter"
      ],
      "properties": {
        "assignments": {
          "description": "Country to datacenter assignments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GeomapAssignmentsItems0"
          }
        },
        "created_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-05-11T17:21:34"
        },
        "default_datacenter": {
          "description": "Datacenter ID",
          "type": "string",
          "format": "uuid"
        },
        "id": {
          "description": "The id of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "name": {
          "description": "Human-readable name of the resource.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "project_id": {
          "description": "The ID of the project owning this resource.",
          "type": "string",
          "maxLength": 32,
          "minLength": 32,
          "x-nullable": true,
          "example": "fa84c217f361441986a220edf9b1e337"
        },
        "provider": {
          "description": "Provider driver for the backend solution",
          "type": "string",
          "enum": [
            "akamai",
            "f5"
          ],
          "example": "akamai"
        },
        "provisioning_status": {
          "type": "string",
          "enum": [
            "PENDING_CREATE",
            "PENDING_UPDATE",
            "PENDING_DELETE",
            "ACTIVE",
            "ERROR"
          ],
          "readOnly": true
        },
        "scope": {
          "description": "Visibility of datacenter between different projects",
          "type": "string",
          "default": "private",
          "enum": [
            "private",
            "shared"
          ],
          "x-nullable": true
        },
        "updated_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-09-09T14:52:15"
        }
      }
    },
    "link": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "format": "uri"
        },
        "rel": {
          "type": "string",
          "enum": [
            "next",
            "previous"
          ]
        }
      },
      "readOnly": true
    },
    "member": {
      "type": "object",
      "properties": {
        "address": {
          "description": "Address to use.",
          "type": "string",
          "format": "ipv4",
          "x-nullable": true,
          "example": "1.2.3.4"
        },
        "admin_state_up": {
          "description": "The administrative state of the resource, which is up (true) or down (false). Default is true.",
          "type": "boolean",
          "default": true,
          "x-nullable": true
        },
        "created_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-05-11T17:21:34"
        },
        "datacenter_id": {
          "description": "Datacenter assigned for this member.",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "id": {
          "description": "The id of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "name": {
          "description": "Human-readable name of the resource.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "pool_id": {
          "description": "pool id.",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "port": {
          "description": "Port to use for monitor checks.",
          "type": "integer",
          "maximum": 65535,
          "minimum": 0,
          "x-nullabe": true,
          "example": 80
        },
        "project_id": {
          "description": "The ID of the project owning this resource.",
          "type": "string",
          "maxLength": 32,
          "minLength": 32,
          "x-nullable": true,
          "example": "fa84c217f361441986a220edf9b1e337"
        },
        "provisioning_status": {
          "type": "string",
          "enum": [
            "PENDING_CREATE",
            "PENDING_UPDATE",
            "PENDING_DELETE",
            "ACTIVE",
            "ERROR"
          ],
          "readOnly": true
        },
        "status": {
          "type": "string",
          "enum": [
            "ONLINE",
            "NO_MONITOR",
            "OFFLINE"
          ],
          "readOnly": true
        },
        "updated_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-09-09T14:52:15"
        }
      }
    },
    "monitor": {
      "type": "object",
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the resource, which is up (true) or down (false). Default is true.",
          "type": "boolean",
          "default": true,
          "x-nullable": true
        },
        "created_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-05-11T17:21:34"
        },
        "domain_name": {
          "description": "The domain name, which be injected into the HTTP Host Header to the backend server for HTTP health check. Only used for HTTP/S monitors.",
          "type": "string",
          "format": "hostname",
          "maxLength": 255,
          "x-nullable": true,
          "example": "example.org"
        },
        "http_method": {
          "description": "HTTP method to use for monitor checks. Only used for HTTP/S monitors.",
          "type": "string",
          "default": "GET",
          "enum": [
            "GET",
            "POST",
            "PUT",
            "HEAD",
            "PATCH",
            "DELETE",
            "OPTIONS"
          ]
        },
        "id": {
          "description": "The id of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "interval": {
          "description": "The interval, in seconds, between health checks.",
          "type": "integer",
          "default": 60,
          "maximum": 86399,
          "minimum": 10,
          "x-nullable": true,
          "example": 10
        },
        "name": {
          "description": "Human-readable name of the resource.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "pool_id": {
          "description": "ID of the pool to check members",
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "project_id": {
          "description": "The ID of the project owning this resource.",
          "type": "string",
          "maxLength": 32,
          "minLength": 32,
          "x-nullable": true,
          "example": "fa84c217f361441986a220edf9b1e337"
        },
        "provisioning_status": {
          "type": "string",
          "enum": [
            "PENDING_CREATE",
            "PENDING_UPDATE",
            "PENDING_DELETE",
            "ACTIVE",
            "ERROR"
          ],
          "readOnly": true
        },
        "receive": {
          "description": "Specifies the text string that the monitor expects to receive from the target member.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true,
          "example": "HTTP/1."
        },
        "send": {
          "description": "Specifies the text string that the monitor sends to the target member. For HTTP/S monitors, this is a GET request and must be a HTTP path, e.g. ` + "`" + `/status` + "`" + `.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true,
          "example": "/stats"
        },
        "timeout": {
          "description": "The time in total, in seconds, after which a health check times out.",
          "type": "integer",
          "default": 10,
          "maximum": 60,
          "minimum": 0,
          "x-nullable": true,
          "example": 30
        },
        "type": {
          "description": "Type of the health check monitor.",
          "type": "string",
          "default": "ICMP",
          "enum": [
            "HTTP",
            "HTTPS",
            "ICMP",
            "TCP",
            "UDP"
          ],
          "x-nullable": true,
          "example": "HTTP"
        },
        "updated_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-09-09T14:52:15"
        }
      }
    },
    "pool": {
      "type": "object",
      "properties": {
        "admin_state_up": {
          "description": "The administrative state of the resource, which is up (true) or down (false). Default is true.",
          "type": "boolean",
          "default": true
        },
        "created_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-05-11 17:21:34"
        },
        "domains": {
          "description": "Array of domains assigned to this pool",
          "type": "array",
          "items": {
            "description": "Domain ID",
            "type": "string",
            "format": "uuid"
          }
        },
        "id": {
          "description": "The id of the resource.",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "members": {
          "description": "Array of member ids that this pool uses for load balancing.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          },
          "readOnly": true
        },
        "monitors": {
          "description": "Array of monitor ids that this pool uses health checks.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          },
          "readOnly": true
        },
        "name": {
          "description": "Human-readable name of the resource.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "project_id": {
          "description": "The ID of the project owning this resource.",
          "type": "string",
          "maxLength": 32,
          "minLength": 32,
          "x-nullable": true,
          "example": "fa84c217f361441986a220edf9b1e337"
        },
        "provisioning_status": {
          "type": "string",
          "enum": [
            "PENDING_CREATE",
            "PENDING_UPDATE",
            "PENDING_DELETE",
            "ACTIVE",
            "ERROR"
          ],
          "readOnly": true
        },
        "status": {
          "type": "string",
          "enum": [
            "ONLINE",
            "DOWN"
          ],
          "readOnly": true
        },
        "updated_at": {
          "description": "The UTC date and timestamp when the resource was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "example": "2020-09-09 14:52:15"
        }
      }
    },
    "quota": {
      "type": "object",
      "properties": {
        "datacenter": {
          "description": "The configured datacenter quota limit. A setting of null means it is using the deployment default quota. A setting of -1 means unlimited.",
          "type": "integer",
          "x-nullable": true,
          "example": 5
        },
        "domain": {
          "description": "The configured domain quota limit. A setting of null means it is using the deployment default quota. A setting of -1 means unlimited.",
          "type": "integer",
          "x-nullable": true,
          "example": 5
        },
        "member": {
          "description": "The configured member quota limit. A setting of null means it is using the deployment default quota. A setting of -1 means unlimited.",
          "type": "integer",
          "x-nullable": true,
          "example": 5
        },
        "monitor": {
          "description": "The configured monitor quota limit. A setting of null means it is using the deployment default quota. A setting of -1 means unlimited.",
          "type": "integer",
          "x-nullable": true,
          "example": 5
        },
        "pool": {
          "description": "The configured pool quota limit. A setting of null means it is using the deployment default quota. A setting of -1 means unlimited.",
          "type": "integer",
          "x-nullable": true,
          "example": 5
        }
      }
    },
    "quota_usage": {
      "type": "object",
      "properties": {
        "in_use_datacenter": {
          "description": "The current quota usage of datacenter.",
          "type": "integer",
          "x-omitempty": false,
          "example": 5
        },
        "in_use_domain": {
          "description": "The current quota usage of domain.",
          "type": "integer",
          "x-omitempty": false,
          "example": 5
        },
        "in_use_member": {
          "description": "The current quota usage of member.",
          "type": "integer",
          "x-omitempty": false,
          "example": 5
        },
        "in_use_monitor": {
          "description": "The current quota usage of monitor.",
          "type": "integer",
          "x-omitempty": false,
          "example": 5
        },
        "in_use_pool": {
          "description": "The current quota usage of pool.",
          "type": "integer",
          "x-omitempty": false,
          "example": 5
        }
      }
    },
    "service": {
      "type": "object",
      "properties": {
        "heartbeat": {
          "description": "The UTC date and timestamp when had the last heartbeat.",
          "type": "string",
          "format": "date-time",
          "example": "2020-05-11 17:21:34"
        },
        "host": {
          "description": "Hostname of the computer the service is running.",
          "type": "string",
          "format": "hostname",
          "example": "example.host"
        },
        "id": {
          "description": "ID of the RPC service.",
          "type": "string",
          "example": "andromeda-agent-fbb49979-03f5-4a97-a334-1fd2c9f61e7e"
        },
        "metadata": {
          "type": "object"
        },
        "provider": {
          "description": "Provider this service supports.",
          "type": "string",
          "example": "akamai"
        },
        "rpc_address": {
          "description": "RPC Endpoint Address.",
          "type": "string",
          "example": "_INBOX.VEfFxcAzZQ9iM9vwGH49It"
        },
        "type": {
          "description": "Type of service.",
          "type": "string",
          "example": "healthcheck"
        },
        "version": {
          "description": "Version of the service.",
          "type": "string",
          "example": "1.2.3"
        }
      }
    }
  },
  "parameters": {
    "limit": {
      "type": "integer",
      "description": "Sets the page size.",
      "name": "limit",
      "in": "query"
    },
    "marker": {
      "type": "string",
      "format": "uuid",
      "description": "Pagination ID of the last item in the previous list.",
      "name": "marker",
      "in": "query"
    },
    "page_reverse": {
      "type": "boolean",
      "description": "Sets the page direction.",
      "name": "page_reverse",
      "in": "query"
    },
    "sort": {
      "type": "string",
      "description": "Comma-separated list of sort keys, optinally prefix with - to reverse sort order.",
      "name": "sort",
      "in": "query"
    }
  },
  "tags": [
    {
      "description": "Domains are the highest level of entities defining DNS endpoints to be load balanced.",
      "name": "Domains"
    },
    {
      "description": "Pools are logical collections of datacenters hosting target applications.",
      "name": "Pools"
    },
    {
      "description": "Datacenter are collections of Members that share the same geographical location.",
      "name": "Datacenters"
    },
    {
      "description": "Members are IP/Port endpoints of the applications to be load balanced.",
      "name": "Members"
    },
    {
      "description": "Monitors are health checks that influce load balancing decisions.",
      "name": "Monitors"
    },
    {
      "description": "Administrative API",
      "name": "Administrative"
    }
  ]
}`))
}
