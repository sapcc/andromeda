// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AkamaiTotalDNSRequests akamai total dns requests
//
// swagger:model akamai_total_dns_requests
type AkamaiTotalDNSRequests struct {

	// datacenters
	Datacenters []*AkamaiTotalDNSRequestsDatacentersItems0 `json:"datacenters" db:"datacenters"`

	// Name of the Akamai GTM property
	PropertyName string `json:"property_name,omitempty" db:"property_name,omitempty"`

	// Time range for the metrics data
	TimeRange string `json:"time_range,omitempty" db:"time_range,omitempty"`

	// Total number of DNS requests for the property
	TotalRequests int64 `json:"total_requests,omitempty" db:"total_requests,omitempty"`
}

// Validate validates this akamai total dns requests
func (m *AkamaiTotalDNSRequests) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatacenters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AkamaiTotalDNSRequests) validateDatacenters(formats strfmt.Registry) error {
	if swag.IsZero(m.Datacenters) { // not required
		return nil
	}

	for i := 0; i < len(m.Datacenters); i++ {
		if swag.IsZero(m.Datacenters[i]) { // not required
			continue
		}

		if m.Datacenters[i] != nil {
			if err := m.Datacenters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datacenters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("datacenters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this akamai total dns requests based on the context it is used
func (m *AkamaiTotalDNSRequests) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDatacenters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AkamaiTotalDNSRequests) contextValidateDatacenters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Datacenters); i++ {

		if m.Datacenters[i] != nil {
			if err := m.Datacenters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datacenters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("datacenters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AkamaiTotalDNSRequests) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AkamaiTotalDNSRequests) UnmarshalBinary(b []byte) error {
	var res AkamaiTotalDNSRequests
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AkamaiTotalDNSRequestsDatacentersItems0 akamai total DNS requests datacenters items0
//
// swagger:model AkamaiTotalDNSRequestsDatacentersItems0
type AkamaiTotalDNSRequestsDatacentersItems0 struct {

	// ID of the datacenter
	DatacenterID string `json:"datacenter_id,omitempty" db:"datacenter_id,omitempty"`

	// Nickname of the datacenter
	DatacenterNickname string `json:"datacenter_nickname,omitempty" db:"datacenter_nickname,omitempty"`

	// Percentage of total requests for this datacenter
	Percentage float32 `json:"percentage,omitempty" db:"percentage,omitempty"`

	// Number of requests for this datacenter
	Requests int64 `json:"requests,omitempty" db:"requests,omitempty"`

	// Status of the datacenter
	Status string `json:"status,omitempty" db:"status,omitempty"`

	// Target IP address for the datacenter
	TargetIP string `json:"target_ip,omitempty" db:"target_ip,omitempty"`
}

// Validate validates this akamai total DNS requests datacenters items0
func (m *AkamaiTotalDNSRequestsDatacentersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this akamai total DNS requests datacenters items0 based on context it is used
func (m *AkamaiTotalDNSRequestsDatacentersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AkamaiTotalDNSRequestsDatacentersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AkamaiTotalDNSRequestsDatacentersItems0) UnmarshalBinary(b []byte) error {
	var res AkamaiTotalDNSRequestsDatacentersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
