// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Geomap geomap
//
// swagger:model geomap
type Geomap struct {

	// Country to datacenter assignments.
	Assignments []*GeomapAssignmentsItems0 `json:"assignments" db:"assignments"`

	// The UTC date and timestamp when the resource was created.
	// Example: 2020-05-11T17:21:34
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty" db:"created_at,omitempty"`

	// Datacenter ID
	// Required: true
	// Format: uuid
	DefaultDatacenter *strfmt.UUID `json:"default_datacenter" db:"default_datacenter"`

	// The id of the resource.
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty" db:"id,omitempty"`

	// Human-readable name of the resource.
	// Max Length: 255
	Name *string `json:"name,omitempty" db:"name,omitempty"`

	// The ID of the project owning this resource.
	// Example: fa84c217f361441986a220edf9b1e337
	// Max Length: 32
	// Min Length: 32
	ProjectID *string `json:"project_id,omitempty" db:"project_id,omitempty"`

	// Provider driver for the backend solution
	// Example: akamai
	// Enum: [akamai f5]
	Provider string `json:"provider,omitempty" db:"provider,omitempty"`

	// provisioning status
	// Read Only: true
	// Enum: [PENDING_CREATE PENDING_UPDATE PENDING_DELETE ACTIVE ERROR]
	ProvisioningStatus string `json:"provisioning_status,omitempty" db:"provisioning_status,omitempty"`

	// Visibility of datacenter between different projects
	// Enum: [private shared]
	Scope *string `json:"scope,omitempty" db:"scope,omitempty"`

	// The UTC date and timestamp when the resource was created.
	// Example: 2020-09-09T14:52:15
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty" db:"updated_at,omitempty"`
}

// Validate validates this geomap
func (m *Geomap) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultDatacenter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvisioningStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Geomap) validateAssignments(formats strfmt.Registry) error {
	if swag.IsZero(m.Assignments) { // not required
		return nil
	}

	for i := 0; i < len(m.Assignments); i++ {
		if swag.IsZero(m.Assignments[i]) { // not required
			continue
		}

		if m.Assignments[i] != nil {
			if err := m.Assignments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Geomap) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Geomap) validateDefaultDatacenter(formats strfmt.Registry) error {

	if err := validate.Required("default_datacenter", "body", m.DefaultDatacenter); err != nil {
		return err
	}

	if err := validate.FormatOf("default_datacenter", "body", "uuid", m.DefaultDatacenter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Geomap) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Geomap) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", *m.Name, 255); err != nil {
		return err
	}

	return nil
}

func (m *Geomap) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.MinLength("project_id", "body", *m.ProjectID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("project_id", "body", *m.ProjectID, 32); err != nil {
		return err
	}

	return nil
}

var geomapTypeProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["akamai","f5"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		geomapTypeProviderPropEnum = append(geomapTypeProviderPropEnum, v)
	}
}

const (

	// GeomapProviderAkamai captures enum value "akamai"
	GeomapProviderAkamai string = "akamai"

	// GeomapProviderF5 captures enum value "f5"
	GeomapProviderF5 string = "f5"
)

// prop value enum
func (m *Geomap) validateProviderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, geomapTypeProviderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Geomap) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	// value enum
	if err := m.validateProviderEnum("provider", "body", m.Provider); err != nil {
		return err
	}

	return nil
}

var geomapTypeProvisioningStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PENDING_CREATE","PENDING_UPDATE","PENDING_DELETE","ACTIVE","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		geomapTypeProvisioningStatusPropEnum = append(geomapTypeProvisioningStatusPropEnum, v)
	}
}

const (

	// GeomapProvisioningStatusPENDINGCREATE captures enum value "PENDING_CREATE"
	GeomapProvisioningStatusPENDINGCREATE string = "PENDING_CREATE"

	// GeomapProvisioningStatusPENDINGUPDATE captures enum value "PENDING_UPDATE"
	GeomapProvisioningStatusPENDINGUPDATE string = "PENDING_UPDATE"

	// GeomapProvisioningStatusPENDINGDELETE captures enum value "PENDING_DELETE"
	GeomapProvisioningStatusPENDINGDELETE string = "PENDING_DELETE"

	// GeomapProvisioningStatusACTIVE captures enum value "ACTIVE"
	GeomapProvisioningStatusACTIVE string = "ACTIVE"

	// GeomapProvisioningStatusERROR captures enum value "ERROR"
	GeomapProvisioningStatusERROR string = "ERROR"
)

// prop value enum
func (m *Geomap) validateProvisioningStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, geomapTypeProvisioningStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Geomap) validateProvisioningStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ProvisioningStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateProvisioningStatusEnum("provisioning_status", "body", m.ProvisioningStatus); err != nil {
		return err
	}

	return nil
}

var geomapTypeScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["private","shared"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		geomapTypeScopePropEnum = append(geomapTypeScopePropEnum, v)
	}
}

const (

	// GeomapScopePrivate captures enum value "private"
	GeomapScopePrivate string = "private"

	// GeomapScopeShared captures enum value "shared"
	GeomapScopeShared string = "shared"
)

// prop value enum
func (m *Geomap) validateScopeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, geomapTypeScopePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Geomap) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	// value enum
	if err := m.validateScopeEnum("scope", "body", *m.Scope); err != nil {
		return err
	}

	return nil
}

func (m *Geomap) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this geomap based on the context it is used
func (m *Geomap) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssignments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvisioningStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Geomap) contextValidateAssignments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Assignments); i++ {

		if m.Assignments[i] != nil {
			if err := m.Assignments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Geomap) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Geomap) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Geomap) contextValidateProvisioningStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "provisioning_status", "body", string(m.ProvisioningStatus)); err != nil {
		return err
	}

	return nil
}

func (m *Geomap) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Geomap) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Geomap) UnmarshalBinary(b []byte) error {
	var res Geomap
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GeomapAssignmentsItems0 Assignment.
//
// swagger:model GeomapAssignmentsItems0
type GeomapAssignmentsItems0 struct {

	// ISO 3166 2-Letter Country code.
	// Max Length: 2
	// Min Length: 2
	Country string `json:"country,omitempty" db:"country,omitempty"`

	// Datacenter ID
	// Format: uuid
	Datacenter strfmt.UUID `json:"datacenter,omitempty" db:"datacenter,omitempty"`
}

// Validate validates this geomap assignments items0
func (m *GeomapAssignmentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatacenter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GeomapAssignmentsItems0) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := validate.MinLength("country", "body", m.Country, 2); err != nil {
		return err
	}

	if err := validate.MaxLength("country", "body", m.Country, 2); err != nil {
		return err
	}

	return nil
}

func (m *GeomapAssignmentsItems0) validateDatacenter(formats strfmt.Registry) error {
	if swag.IsZero(m.Datacenter) { // not required
		return nil
	}

	if err := validate.FormatOf("datacenter", "body", "uuid", m.Datacenter.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this geomap assignments items0 based on context it is used
func (m *GeomapAssignmentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GeomapAssignmentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GeomapAssignmentsItems0) UnmarshalBinary(b []byte) error {
	var res GeomapAssignmentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
