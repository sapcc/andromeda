// Code generated by go-swagger; DO NOT EDIT.

// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Datacenter datacenter
//
// swagger:model datacenter
type Datacenter struct {

	// The administrative state of the resource, which is up (true) or down (false). Default is true.
	AdminStateUp *bool `json:"admin_state_up,omitempty" db:"admin_state_up,omitempty"`

	// city
	// Example: Berlin
	// Max Length: 255
	City *string `json:"city" db:"city"`

	// continent
	// Example: EU
	// Max Length: 255
	Continent *string `json:"continent" db:"continent"`

	// country
	// Example: DE
	// Max Length: 2
	Country *string `json:"country" db:"country"`

	// The UTC date and timestamp when the resource was created.
	// Example: 2020-05-11T17:21:34
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty" db:"created_at,omitempty"`

	// The id of the resource.
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty" db:"id,omitempty"`

	// latitude
	// Example: 52.526055
	Latitude *float64 `json:"latitude" db:"latitude"`

	// longitude
	// Example: 13.403454
	Longitude *float64 `json:"longitude" db:"longitude"`

	// meta
	// Read Only: true
	Meta int64 `json:"meta,omitempty" db:"meta,omitempty"`

	// Human-readable name of the resource.
	// Max Length: 255
	Name *string `json:"name,omitempty" db:"name,omitempty"`

	// The ID of the project owning this resource.
	// Example: fa84c217f361441986a220edf9b1e337
	// Max Length: 32
	// Min Length: 32
	ProjectID *string `json:"project_id,omitempty" db:"project_id,omitempty"`

	// Provider driver for the backend solution
	// Example: akamai
	// Enum: [akamai f5]
	Provider string `json:"provider,omitempty" db:"provider,omitempty"`

	// provisioning status
	// Read Only: true
	// Enum: [PENDING_CREATE PENDING_UPDATE PENDING_DELETE ACTIVE ERROR]
	ProvisioningStatus string `json:"provisioning_status,omitempty" db:"provisioning_status,omitempty"`

	// Visibility of datacenter between different projects
	// Enum: [private shared]
	Scope *string `json:"scope,omitempty" db:"scope,omitempty"`

	// state or province
	// Example: Berlin
	// Max Length: 255
	StateOrProvince *string `json:"state_or_province" db:"state_or_province"`

	// The UTC date and timestamp when the resource was created.
	// Example: 2020-09-09T14:52:15
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty" db:"updated_at,omitempty"`
}

// Validate validates this datacenter
func (m *Datacenter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContinent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvisioningStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateOrProvince(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Datacenter) validateCity(formats strfmt.Registry) error {
	if swag.IsZero(m.City) { // not required
		return nil
	}

	if err := validate.MaxLength("city", "body", *m.City, 255); err != nil {
		return err
	}

	return nil
}

func (m *Datacenter) validateContinent(formats strfmt.Registry) error {
	if swag.IsZero(m.Continent) { // not required
		return nil
	}

	if err := validate.MaxLength("continent", "body", *m.Continent, 255); err != nil {
		return err
	}

	return nil
}

func (m *Datacenter) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("country", "body", *m.Country, 2); err != nil {
		return err
	}

	return nil
}

func (m *Datacenter) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Datacenter) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Datacenter) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", *m.Name, 255); err != nil {
		return err
	}

	return nil
}

func (m *Datacenter) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.MinLength("project_id", "body", *m.ProjectID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("project_id", "body", *m.ProjectID, 32); err != nil {
		return err
	}

	return nil
}

var datacenterTypeProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["akamai","f5"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		datacenterTypeProviderPropEnum = append(datacenterTypeProviderPropEnum, v)
	}
}

const (

	// DatacenterProviderAkamai captures enum value "akamai"
	DatacenterProviderAkamai string = "akamai"

	// DatacenterProviderF5 captures enum value "f5"
	DatacenterProviderF5 string = "f5"
)

// prop value enum
func (m *Datacenter) validateProviderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, datacenterTypeProviderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Datacenter) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	// value enum
	if err := m.validateProviderEnum("provider", "body", m.Provider); err != nil {
		return err
	}

	return nil
}

var datacenterTypeProvisioningStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PENDING_CREATE","PENDING_UPDATE","PENDING_DELETE","ACTIVE","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		datacenterTypeProvisioningStatusPropEnum = append(datacenterTypeProvisioningStatusPropEnum, v)
	}
}

const (

	// DatacenterProvisioningStatusPENDINGCREATE captures enum value "PENDING_CREATE"
	DatacenterProvisioningStatusPENDINGCREATE string = "PENDING_CREATE"

	// DatacenterProvisioningStatusPENDINGUPDATE captures enum value "PENDING_UPDATE"
	DatacenterProvisioningStatusPENDINGUPDATE string = "PENDING_UPDATE"

	// DatacenterProvisioningStatusPENDINGDELETE captures enum value "PENDING_DELETE"
	DatacenterProvisioningStatusPENDINGDELETE string = "PENDING_DELETE"

	// DatacenterProvisioningStatusACTIVE captures enum value "ACTIVE"
	DatacenterProvisioningStatusACTIVE string = "ACTIVE"

	// DatacenterProvisioningStatusERROR captures enum value "ERROR"
	DatacenterProvisioningStatusERROR string = "ERROR"
)

// prop value enum
func (m *Datacenter) validateProvisioningStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, datacenterTypeProvisioningStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Datacenter) validateProvisioningStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ProvisioningStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateProvisioningStatusEnum("provisioning_status", "body", m.ProvisioningStatus); err != nil {
		return err
	}

	return nil
}

var datacenterTypeScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["private","shared"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		datacenterTypeScopePropEnum = append(datacenterTypeScopePropEnum, v)
	}
}

const (

	// DatacenterScopePrivate captures enum value "private"
	DatacenterScopePrivate string = "private"

	// DatacenterScopeShared captures enum value "shared"
	DatacenterScopeShared string = "shared"
)

// prop value enum
func (m *Datacenter) validateScopeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, datacenterTypeScopePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Datacenter) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	// value enum
	if err := m.validateScopeEnum("scope", "body", *m.Scope); err != nil {
		return err
	}

	return nil
}

func (m *Datacenter) validateStateOrProvince(formats strfmt.Registry) error {
	if swag.IsZero(m.StateOrProvince) { // not required
		return nil
	}

	if err := validate.MaxLength("state_or_province", "body", *m.StateOrProvince, 255); err != nil {
		return err
	}

	return nil
}

func (m *Datacenter) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this datacenter based on the context it is used
func (m *Datacenter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvisioningStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Datacenter) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Datacenter) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Datacenter) contextValidateMeta(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "meta", "body", int64(m.Meta)); err != nil {
		return err
	}

	return nil
}

func (m *Datacenter) contextValidateProvisioningStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "provisioning_status", "body", string(m.ProvisioningStatus)); err != nil {
		return err
	}

	return nil
}

func (m *Datacenter) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Datacenter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Datacenter) UnmarshalBinary(b []byte) error {
	var res Datacenter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
