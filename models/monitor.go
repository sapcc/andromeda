// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 SAP SE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Monitor monitor
//
// swagger:model monitor
type Monitor struct {

	// The administrative state of the resource, which is up (true) or down (false). Default is true.
	AdminStateUp *bool `json:"admin_state_up,omitempty" db:"admin_state_up,omitempty"`

	// The UTC date and timestamp when the resource was created.
	// Example: 2020-05-11T17:21:34
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty" db:"created_at,omitempty"`

	// The domain name, which be injected into the HTTP Host Header to the backend server for HTTP health check. Only used for HTTP/S monitors.
	// Example: example.org
	// Max Length: 255
	// Format: hostname
	DomainName *strfmt.Hostname `json:"domain_name,omitempty" db:"domain_name,omitempty"`

	// HTTP method to use for monitor checks. Only used for HTTP/S monitors.
	// Enum: [GET POST PUT HEAD PATCH DELETE OPTIONS]
	HTTPMethod *string `json:"http_method,omitempty" db:"http_method,omitempty"`

	// The id of the resource.
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty" db:"id,omitempty"`

	// The interval, in seconds, between health checks.
	// Example: 10
	// Maximum: 86399
	// Minimum: 10
	Interval *int64 `json:"interval,omitempty" db:"interval,omitempty"`

	// Human-readable name of the resource.
	// Max Length: 255
	Name *string `json:"name,omitempty" db:"name,omitempty"`

	// ID of the pool to check members
	// Format: uuid
	PoolID *strfmt.UUID `json:"pool_id,omitempty" db:"pool_id,omitempty"`

	// The ID of the project owning this resource.
	// Example: fa84c217f361441986a220edf9b1e337
	// Max Length: 32
	// Min Length: 32
	ProjectID *string `json:"project_id,omitempty" db:"project_id,omitempty"`

	// provisioning status
	// Read Only: true
	// Enum: [PENDING_CREATE PENDING_UPDATE PENDING_DELETE ACTIVE ERROR]
	ProvisioningStatus string `json:"provisioning_status,omitempty" db:"provisioning_status,omitempty"`

	// Specifies the text string that the monitor expects to receive from the target member.
	// Example: HTTP/1.
	// Max Length: 255
	Receive *string `json:"receive,omitempty" db:"receive,omitempty"`

	// Specifies the text string that the monitor sends to the target member. For HTTP/S monitors, this is a GET request and must be a HTTP path, e.g. `/status`.
	// Example: /stats
	// Max Length: 255
	Send *string `json:"send,omitempty" db:"send,omitempty"`

	// The time in total, in seconds, after which a health check times out.
	// Example: 30
	// Maximum: 60
	// Minimum: 0
	Timeout *int64 `json:"timeout,omitempty" db:"timeout,omitempty"`

	// Type of the health check monitor.
	// Example: HTTP
	// Enum: [HTTP HTTPS ICMP TCP UDP]
	Type *string `json:"type,omitempty" db:"type,omitempty"`

	// The UTC date and timestamp when the resource was created.
	// Example: 2020-09-09T14:52:15
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty" db:"updated_at,omitempty"`
}

// Validate validates this monitor
func (m *Monitor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomainName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoolID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvisioningStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Monitor) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Monitor) validateDomainName(formats strfmt.Registry) error {
	if swag.IsZero(m.DomainName) { // not required
		return nil
	}

	if err := validate.MaxLength("domain_name", "body", m.DomainName.String(), 255); err != nil {
		return err
	}

	if err := validate.FormatOf("domain_name", "body", "hostname", m.DomainName.String(), formats); err != nil {
		return err
	}

	return nil
}

var monitorTypeHTTPMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GET","POST","PUT","HEAD","PATCH","DELETE","OPTIONS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		monitorTypeHTTPMethodPropEnum = append(monitorTypeHTTPMethodPropEnum, v)
	}
}

const (

	// MonitorHTTPMethodGET captures enum value "GET"
	MonitorHTTPMethodGET string = "GET"

	// MonitorHTTPMethodPOST captures enum value "POST"
	MonitorHTTPMethodPOST string = "POST"

	// MonitorHTTPMethodPUT captures enum value "PUT"
	MonitorHTTPMethodPUT string = "PUT"

	// MonitorHTTPMethodHEAD captures enum value "HEAD"
	MonitorHTTPMethodHEAD string = "HEAD"

	// MonitorHTTPMethodPATCH captures enum value "PATCH"
	MonitorHTTPMethodPATCH string = "PATCH"

	// MonitorHTTPMethodDELETE captures enum value "DELETE"
	MonitorHTTPMethodDELETE string = "DELETE"

	// MonitorHTTPMethodOPTIONS captures enum value "OPTIONS"
	MonitorHTTPMethodOPTIONS string = "OPTIONS"
)

// prop value enum
func (m *Monitor) validateHTTPMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, monitorTypeHTTPMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Monitor) validateHTTPMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.HTTPMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateHTTPMethodEnum("http_method", "body", *m.HTTPMethod); err != nil {
		return err
	}

	return nil
}

func (m *Monitor) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Monitor) validateInterval(formats strfmt.Registry) error {
	if swag.IsZero(m.Interval) { // not required
		return nil
	}

	if err := validate.MinimumInt("interval", "body", *m.Interval, 10, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("interval", "body", *m.Interval, 86399, false); err != nil {
		return err
	}

	return nil
}

func (m *Monitor) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", *m.Name, 255); err != nil {
		return err
	}

	return nil
}

func (m *Monitor) validatePoolID(formats strfmt.Registry) error {
	if swag.IsZero(m.PoolID) { // not required
		return nil
	}

	if err := validate.FormatOf("pool_id", "body", "uuid", m.PoolID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Monitor) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.MinLength("project_id", "body", *m.ProjectID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("project_id", "body", *m.ProjectID, 32); err != nil {
		return err
	}

	return nil
}

var monitorTypeProvisioningStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PENDING_CREATE","PENDING_UPDATE","PENDING_DELETE","ACTIVE","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		monitorTypeProvisioningStatusPropEnum = append(monitorTypeProvisioningStatusPropEnum, v)
	}
}

const (

	// MonitorProvisioningStatusPENDINGCREATE captures enum value "PENDING_CREATE"
	MonitorProvisioningStatusPENDINGCREATE string = "PENDING_CREATE"

	// MonitorProvisioningStatusPENDINGUPDATE captures enum value "PENDING_UPDATE"
	MonitorProvisioningStatusPENDINGUPDATE string = "PENDING_UPDATE"

	// MonitorProvisioningStatusPENDINGDELETE captures enum value "PENDING_DELETE"
	MonitorProvisioningStatusPENDINGDELETE string = "PENDING_DELETE"

	// MonitorProvisioningStatusACTIVE captures enum value "ACTIVE"
	MonitorProvisioningStatusACTIVE string = "ACTIVE"

	// MonitorProvisioningStatusERROR captures enum value "ERROR"
	MonitorProvisioningStatusERROR string = "ERROR"
)

// prop value enum
func (m *Monitor) validateProvisioningStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, monitorTypeProvisioningStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Monitor) validateProvisioningStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ProvisioningStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateProvisioningStatusEnum("provisioning_status", "body", m.ProvisioningStatus); err != nil {
		return err
	}

	return nil
}

func (m *Monitor) validateReceive(formats strfmt.Registry) error {
	if swag.IsZero(m.Receive) { // not required
		return nil
	}

	if err := validate.MaxLength("receive", "body", *m.Receive, 255); err != nil {
		return err
	}

	return nil
}

func (m *Monitor) validateSend(formats strfmt.Registry) error {
	if swag.IsZero(m.Send) { // not required
		return nil
	}

	if err := validate.MaxLength("send", "body", *m.Send, 255); err != nil {
		return err
	}

	return nil
}

func (m *Monitor) validateTimeout(formats strfmt.Registry) error {
	if swag.IsZero(m.Timeout) { // not required
		return nil
	}

	if err := validate.MinimumInt("timeout", "body", *m.Timeout, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("timeout", "body", *m.Timeout, 60, false); err != nil {
		return err
	}

	return nil
}

var monitorTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HTTP","HTTPS","ICMP","TCP","UDP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		monitorTypeTypePropEnum = append(monitorTypeTypePropEnum, v)
	}
}

const (

	// MonitorTypeHTTP captures enum value "HTTP"
	MonitorTypeHTTP string = "HTTP"

	// MonitorTypeHTTPS captures enum value "HTTPS"
	MonitorTypeHTTPS string = "HTTPS"

	// MonitorTypeICMP captures enum value "ICMP"
	MonitorTypeICMP string = "ICMP"

	// MonitorTypeTCP captures enum value "TCP"
	MonitorTypeTCP string = "TCP"

	// MonitorTypeUDP captures enum value "UDP"
	MonitorTypeUDP string = "UDP"
)

// prop value enum
func (m *Monitor) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, monitorTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Monitor) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *Monitor) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this monitor based on the context it is used
func (m *Monitor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvisioningStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Monitor) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Monitor) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Monitor) contextValidateProvisioningStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "provisioning_status", "body", string(m.ProvisioningStatus)); err != nil {
		return err
	}

	return nil
}

func (m *Monitor) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Monitor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Monitor) UnmarshalBinary(b []byte) error {
	var res Monitor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
