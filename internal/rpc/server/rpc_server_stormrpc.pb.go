// SPDX-FileCopyrightText: Copyright 2025 SAP SE or an SAP affiliate company
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-stormrpc. DO NOT EDIT.

package server

import (
	context "context"
	fmt "fmt"
	stormrpc "github.com/actatum/stormrpc"
	rpcmodels "github.com/sapcc/andromeda/internal/rpcmodels"
)

// RPCServerClient is the client API for RPCServer service.
type RPCServerClient interface {
	UpdateProvisioningStatus(ctx context.Context, in *ProvisioningStatusRequest, opts ...stormrpc.CallOption) (*ProvisioningStatusResponse, error)
	UpdateMemberStatus(ctx context.Context, in *MemberStatusRequest, opts ...stormrpc.CallOption) (*MemberStatusResponse, error)
	GetDomains(ctx context.Context, in *SearchRequest, opts ...stormrpc.CallOption) (*DomainsResponse, error)
	GetPools(ctx context.Context, in *SearchRequest, opts ...stormrpc.CallOption) (*PoolsResponse, error)
	GetMonitors(ctx context.Context, in *SearchRequest, opts ...stormrpc.CallOption) (*MonitorsResponse, error)
	GetDatacenters(ctx context.Context, in *SearchRequest, opts ...stormrpc.CallOption) (*DatacentersResponse, error)
	GetMembers(ctx context.Context, in *SearchRequest, opts ...stormrpc.CallOption) (*MembersResponse, error)
	GetGeomaps(ctx context.Context, in *SearchRequest, opts ...stormrpc.CallOption) (*GeomapsResponse, error)
	UpdateDatacenterMeta(ctx context.Context, in *DatacenterMetaRequest, opts ...stormrpc.CallOption) (*rpcmodels.Datacenter, error)
}

type rPCServerClient struct {
	c *stormrpc.Client
}

func NewRPCServerClient(c *stormrpc.Client) RPCServerClient {
	return &rPCServerClient{c}
}

func (c *rPCServerClient) UpdateProvisioningStatus(ctx context.Context, in *ProvisioningStatusRequest, opts ...stormrpc.CallOption) (*ProvisioningStatusResponse, error) {
	var out ProvisioningStatusResponse
	r, err := stormrpc.NewRequest("rpc.RPCServer.UpdateProvisioningStatus", in, stormrpc.WithEncodeProto())
	if err != nil {
		return nil, err
	}

	resp := c.c.Do(ctx, r, opts...)
	if resp.Err != nil {
		return nil, resp.Err
	}

	if err = resp.Decode(&out); err != nil {
		return nil, err
	}

	return &out, nil
}

func (c *rPCServerClient) UpdateMemberStatus(ctx context.Context, in *MemberStatusRequest, opts ...stormrpc.CallOption) (*MemberStatusResponse, error) {
	var out MemberStatusResponse
	r, err := stormrpc.NewRequest("rpc.RPCServer.UpdateMemberStatus", in, stormrpc.WithEncodeProto())
	if err != nil {
		return nil, err
	}

	resp := c.c.Do(ctx, r, opts...)
	if resp.Err != nil {
		return nil, resp.Err
	}

	if err = resp.Decode(&out); err != nil {
		return nil, err
	}

	return &out, nil
}

func (c *rPCServerClient) GetDomains(ctx context.Context, in *SearchRequest, opts ...stormrpc.CallOption) (*DomainsResponse, error) {
	var out DomainsResponse
	r, err := stormrpc.NewRequest("rpc.RPCServer.GetDomains", in, stormrpc.WithEncodeProto())
	if err != nil {
		return nil, err
	}

	resp := c.c.Do(ctx, r, opts...)
	if resp.Err != nil {
		return nil, resp.Err
	}

	if err = resp.Decode(&out); err != nil {
		return nil, err
	}

	return &out, nil
}

func (c *rPCServerClient) GetPools(ctx context.Context, in *SearchRequest, opts ...stormrpc.CallOption) (*PoolsResponse, error) {
	var out PoolsResponse
	r, err := stormrpc.NewRequest("rpc.RPCServer.GetPools", in, stormrpc.WithEncodeProto())
	if err != nil {
		return nil, err
	}

	resp := c.c.Do(ctx, r, opts...)
	if resp.Err != nil {
		return nil, resp.Err
	}

	if err = resp.Decode(&out); err != nil {
		return nil, err
	}

	return &out, nil
}

func (c *rPCServerClient) GetMonitors(ctx context.Context, in *SearchRequest, opts ...stormrpc.CallOption) (*MonitorsResponse, error) {
	var out MonitorsResponse
	r, err := stormrpc.NewRequest("rpc.RPCServer.GetMonitors", in, stormrpc.WithEncodeProto())
	if err != nil {
		return nil, err
	}

	resp := c.c.Do(ctx, r, opts...)
	if resp.Err != nil {
		return nil, resp.Err
	}

	if err = resp.Decode(&out); err != nil {
		return nil, err
	}

	return &out, nil
}

func (c *rPCServerClient) GetDatacenters(ctx context.Context, in *SearchRequest, opts ...stormrpc.CallOption) (*DatacentersResponse, error) {
	var out DatacentersResponse
	r, err := stormrpc.NewRequest("rpc.RPCServer.GetDatacenters", in, stormrpc.WithEncodeProto())
	if err != nil {
		return nil, err
	}

	resp := c.c.Do(ctx, r, opts...)
	if resp.Err != nil {
		return nil, resp.Err
	}

	if err = resp.Decode(&out); err != nil {
		return nil, err
	}

	return &out, nil
}

func (c *rPCServerClient) GetMembers(ctx context.Context, in *SearchRequest, opts ...stormrpc.CallOption) (*MembersResponse, error) {
	var out MembersResponse
	r, err := stormrpc.NewRequest("rpc.RPCServer.GetMembers", in, stormrpc.WithEncodeProto())
	if err != nil {
		return nil, err
	}

	resp := c.c.Do(ctx, r, opts...)
	if resp.Err != nil {
		return nil, resp.Err
	}

	if err = resp.Decode(&out); err != nil {
		return nil, err
	}

	return &out, nil
}

func (c *rPCServerClient) GetGeomaps(ctx context.Context, in *SearchRequest, opts ...stormrpc.CallOption) (*GeomapsResponse, error) {
	var out GeomapsResponse
	r, err := stormrpc.NewRequest("rpc.RPCServer.GetGeomaps", in, stormrpc.WithEncodeProto())
	if err != nil {
		return nil, err
	}

	resp := c.c.Do(ctx, r, opts...)
	if resp.Err != nil {
		return nil, resp.Err
	}

	if err = resp.Decode(&out); err != nil {
		return nil, err
	}

	return &out, nil
}

func (c *rPCServerClient) UpdateDatacenterMeta(ctx context.Context, in *DatacenterMetaRequest, opts ...stormrpc.CallOption) (*rpcmodels.Datacenter, error) {
	var out rpcmodels.Datacenter
	r, err := stormrpc.NewRequest("rpc.RPCServer.UpdateDatacenterMeta", in, stormrpc.WithEncodeProto())
	if err != nil {
		return nil, err
	}

	resp := c.c.Do(ctx, r, opts...)
	if resp.Err != nil {
		return nil, resp.Err
	}

	if err = resp.Decode(&out); err != nil {
		return nil, err
	}

	return &out, nil
}

// RPCServerServer is the server API for RPCServer service.
type RPCServerServer interface {
	UpdateProvisioningStatus(context.Context, *ProvisioningStatusRequest) (*ProvisioningStatusResponse, error)
	UpdateMemberStatus(context.Context, *MemberStatusRequest) (*MemberStatusResponse, error)
	GetDomains(context.Context, *SearchRequest) (*DomainsResponse, error)
	GetPools(context.Context, *SearchRequest) (*PoolsResponse, error)
	GetMonitors(context.Context, *SearchRequest) (*MonitorsResponse, error)
	GetDatacenters(context.Context, *SearchRequest) (*DatacentersResponse, error)
	GetMembers(context.Context, *SearchRequest) (*MembersResponse, error)
	GetGeomaps(context.Context, *SearchRequest) (*GeomapsResponse, error)
	UpdateDatacenterMeta(context.Context, *DatacenterMetaRequest) (*rpcmodels.Datacenter, error)
}

func RegisterRPCServerServer(s *stormrpc.Server, srv RPCServerServer) {
	for _, handler := range rPCServerHandlers {
		handler.SetService(srv)
		s.Handle(handler.Route(), handler.HandlerFunc())
	}
}

type _RPCServer_UpdateProvisioningStatus_Handler struct {
	route string
	svc   interface{}
}

func (h *_RPCServer_UpdateProvisioningStatus_Handler) HandlerFunc() stormrpc.HandlerFunc {
	return func(ctx context.Context, r stormrpc.Request) stormrpc.Response {
		var in ProvisioningStatusRequest
		if err := r.Decode(&in); err != nil {
			return stormrpc.NewErrorResponse(r.Reply, fmt.Errorf("error decoding request"))
		}

		out, err := h.svc.(RPCServerServer).UpdateProvisioningStatus(ctx, &in)
		if err != nil {
			return stormrpc.NewErrorResponse(r.Reply, err)
		}

		resp, err := stormrpc.NewResponse(r.Reply, out, stormrpc.WithEncodeProto())
		if err != nil {
			return stormrpc.NewErrorResponse(r.Reply, err)
		}

		return resp
	}
}
func (h *_RPCServer_UpdateProvisioningStatus_Handler) Route() string {
	return h.route
}
func (h *_RPCServer_UpdateProvisioningStatus_Handler) SetService(svc interface{}) {
	h.svc = svc
}

type _RPCServer_UpdateMemberStatus_Handler struct {
	route string
	svc   interface{}
}

func (h *_RPCServer_UpdateMemberStatus_Handler) HandlerFunc() stormrpc.HandlerFunc {
	return func(ctx context.Context, r stormrpc.Request) stormrpc.Response {
		var in MemberStatusRequest
		if err := r.Decode(&in); err != nil {
			return stormrpc.NewErrorResponse(r.Reply, fmt.Errorf("error decoding request"))
		}

		out, err := h.svc.(RPCServerServer).UpdateMemberStatus(ctx, &in)
		if err != nil {
			return stormrpc.NewErrorResponse(r.Reply, err)
		}

		resp, err := stormrpc.NewResponse(r.Reply, out, stormrpc.WithEncodeProto())
		if err != nil {
			return stormrpc.NewErrorResponse(r.Reply, err)
		}

		return resp
	}
}
func (h *_RPCServer_UpdateMemberStatus_Handler) Route() string {
	return h.route
}
func (h *_RPCServer_UpdateMemberStatus_Handler) SetService(svc interface{}) {
	h.svc = svc
}

type _RPCServer_GetDomains_Handler struct {
	route string
	svc   interface{}
}

func (h *_RPCServer_GetDomains_Handler) HandlerFunc() stormrpc.HandlerFunc {
	return func(ctx context.Context, r stormrpc.Request) stormrpc.Response {
		var in SearchRequest
		if err := r.Decode(&in); err != nil {
			return stormrpc.NewErrorResponse(r.Reply, fmt.Errorf("error decoding request"))
		}

		out, err := h.svc.(RPCServerServer).GetDomains(ctx, &in)
		if err != nil {
			return stormrpc.NewErrorResponse(r.Reply, err)
		}

		resp, err := stormrpc.NewResponse(r.Reply, out, stormrpc.WithEncodeProto())
		if err != nil {
			return stormrpc.NewErrorResponse(r.Reply, err)
		}

		return resp
	}
}
func (h *_RPCServer_GetDomains_Handler) Route() string {
	return h.route
}
func (h *_RPCServer_GetDomains_Handler) SetService(svc interface{}) {
	h.svc = svc
}

type _RPCServer_GetPools_Handler struct {
	route string
	svc   interface{}
}

func (h *_RPCServer_GetPools_Handler) HandlerFunc() stormrpc.HandlerFunc {
	return func(ctx context.Context, r stormrpc.Request) stormrpc.Response {
		var in SearchRequest
		if err := r.Decode(&in); err != nil {
			return stormrpc.NewErrorResponse(r.Reply, fmt.Errorf("error decoding request"))
		}

		out, err := h.svc.(RPCServerServer).GetPools(ctx, &in)
		if err != nil {
			return stormrpc.NewErrorResponse(r.Reply, err)
		}

		resp, err := stormrpc.NewResponse(r.Reply, out, stormrpc.WithEncodeProto())
		if err != nil {
			return stormrpc.NewErrorResponse(r.Reply, err)
		}

		return resp
	}
}
func (h *_RPCServer_GetPools_Handler) Route() string {
	return h.route
}
func (h *_RPCServer_GetPools_Handler) SetService(svc interface{}) {
	h.svc = svc
}

type _RPCServer_GetMonitors_Handler struct {
	route string
	svc   interface{}
}

func (h *_RPCServer_GetMonitors_Handler) HandlerFunc() stormrpc.HandlerFunc {
	return func(ctx context.Context, r stormrpc.Request) stormrpc.Response {
		var in SearchRequest
		if err := r.Decode(&in); err != nil {
			return stormrpc.NewErrorResponse(r.Reply, fmt.Errorf("error decoding request"))
		}

		out, err := h.svc.(RPCServerServer).GetMonitors(ctx, &in)
		if err != nil {
			return stormrpc.NewErrorResponse(r.Reply, err)
		}

		resp, err := stormrpc.NewResponse(r.Reply, out, stormrpc.WithEncodeProto())
		if err != nil {
			return stormrpc.NewErrorResponse(r.Reply, err)
		}

		return resp
	}
}
func (h *_RPCServer_GetMonitors_Handler) Route() string {
	return h.route
}
func (h *_RPCServer_GetMonitors_Handler) SetService(svc interface{}) {
	h.svc = svc
}

type _RPCServer_GetDatacenters_Handler struct {
	route string
	svc   interface{}
}

func (h *_RPCServer_GetDatacenters_Handler) HandlerFunc() stormrpc.HandlerFunc {
	return func(ctx context.Context, r stormrpc.Request) stormrpc.Response {
		var in SearchRequest
		if err := r.Decode(&in); err != nil {
			return stormrpc.NewErrorResponse(r.Reply, fmt.Errorf("error decoding request"))
		}

		out, err := h.svc.(RPCServerServer).GetDatacenters(ctx, &in)
		if err != nil {
			return stormrpc.NewErrorResponse(r.Reply, err)
		}

		resp, err := stormrpc.NewResponse(r.Reply, out, stormrpc.WithEncodeProto())
		if err != nil {
			return stormrpc.NewErrorResponse(r.Reply, err)
		}

		return resp
	}
}
func (h *_RPCServer_GetDatacenters_Handler) Route() string {
	return h.route
}
func (h *_RPCServer_GetDatacenters_Handler) SetService(svc interface{}) {
	h.svc = svc
}

type _RPCServer_GetMembers_Handler struct {
	route string
	svc   interface{}
}

func (h *_RPCServer_GetMembers_Handler) HandlerFunc() stormrpc.HandlerFunc {
	return func(ctx context.Context, r stormrpc.Request) stormrpc.Response {
		var in SearchRequest
		if err := r.Decode(&in); err != nil {
			return stormrpc.NewErrorResponse(r.Reply, fmt.Errorf("error decoding request"))
		}

		out, err := h.svc.(RPCServerServer).GetMembers(ctx, &in)
		if err != nil {
			return stormrpc.NewErrorResponse(r.Reply, err)
		}

		resp, err := stormrpc.NewResponse(r.Reply, out, stormrpc.WithEncodeProto())
		if err != nil {
			return stormrpc.NewErrorResponse(r.Reply, err)
		}

		return resp
	}
}
func (h *_RPCServer_GetMembers_Handler) Route() string {
	return h.route
}
func (h *_RPCServer_GetMembers_Handler) SetService(svc interface{}) {
	h.svc = svc
}

type _RPCServer_GetGeomaps_Handler struct {
	route string
	svc   interface{}
}

func (h *_RPCServer_GetGeomaps_Handler) HandlerFunc() stormrpc.HandlerFunc {
	return func(ctx context.Context, r stormrpc.Request) stormrpc.Response {
		var in SearchRequest
		if err := r.Decode(&in); err != nil {
			return stormrpc.NewErrorResponse(r.Reply, fmt.Errorf("error decoding request"))
		}

		out, err := h.svc.(RPCServerServer).GetGeomaps(ctx, &in)
		if err != nil {
			return stormrpc.NewErrorResponse(r.Reply, err)
		}

		resp, err := stormrpc.NewResponse(r.Reply, out, stormrpc.WithEncodeProto())
		if err != nil {
			return stormrpc.NewErrorResponse(r.Reply, err)
		}

		return resp
	}
}
func (h *_RPCServer_GetGeomaps_Handler) Route() string {
	return h.route
}
func (h *_RPCServer_GetGeomaps_Handler) SetService(svc interface{}) {
	h.svc = svc
}

type _RPCServer_UpdateDatacenterMeta_Handler struct {
	route string
	svc   interface{}
}

func (h *_RPCServer_UpdateDatacenterMeta_Handler) HandlerFunc() stormrpc.HandlerFunc {
	return func(ctx context.Context, r stormrpc.Request) stormrpc.Response {
		var in DatacenterMetaRequest
		if err := r.Decode(&in); err != nil {
			return stormrpc.NewErrorResponse(r.Reply, fmt.Errorf("error decoding request"))
		}

		out, err := h.svc.(RPCServerServer).UpdateDatacenterMeta(ctx, &in)
		if err != nil {
			return stormrpc.NewErrorResponse(r.Reply, err)
		}

		resp, err := stormrpc.NewResponse(r.Reply, out, stormrpc.WithEncodeProto())
		if err != nil {
			return stormrpc.NewErrorResponse(r.Reply, err)
		}

		return resp
	}
}
func (h *_RPCServer_UpdateDatacenterMeta_Handler) Route() string {
	return h.route
}
func (h *_RPCServer_UpdateDatacenterMeta_Handler) SetService(svc interface{}) {
	h.svc = svc
}

var rPCServerHandlers = []handler{
	&_RPCServer_UpdateProvisioningStatus_Handler{route: "rpc.RPCServer.UpdateProvisioningStatus"},
	&_RPCServer_UpdateMemberStatus_Handler{route: "rpc.RPCServer.UpdateMemberStatus"},
	&_RPCServer_GetDomains_Handler{route: "rpc.RPCServer.GetDomains"},
	&_RPCServer_GetPools_Handler{route: "rpc.RPCServer.GetPools"},
	&_RPCServer_GetMonitors_Handler{route: "rpc.RPCServer.GetMonitors"},
	&_RPCServer_GetDatacenters_Handler{route: "rpc.RPCServer.GetDatacenters"},
	&_RPCServer_GetMembers_Handler{route: "rpc.RPCServer.GetMembers"},
	&_RPCServer_GetGeomaps_Handler{route: "rpc.RPCServer.GetGeomaps"},
	&_RPCServer_UpdateDatacenterMeta_Handler{route: "rpc.RPCServer.UpdateDatacenterMeta"},
}

type handler interface {
	Route() string
	HandlerFunc() stormrpc.HandlerFunc
	SetService(interface{})
}
