// Code generated by protoc-gen-stormrpc. DO NOT EDIT.

package agent

import (
	context "context"
	fmt "fmt"
	stormrpc "github.com/actatum/stormrpc"
	rpcmodels "github.com/sapcc/andromeda/internal/rpcmodels"
)

// RPCAgentClient is the client API for RPCAgent service.
type RPCAgentClient interface {
	// Sync synchronizes the agent with the Andromeda backend.
	Sync(ctx context.Context, in *rpcmodels.SyncRequest, opts ...stormrpc.CallOption) (*rpcmodels.SyncResponse, error)
}

type rPCAgentClient struct {
	c *stormrpc.Client
}

func NewRPCAgentClient(c *stormrpc.Client) RPCAgentClient {
	return &rPCAgentClient{c}
}

func (c *rPCAgentClient) Sync(ctx context.Context, in *rpcmodels.SyncRequest, opts ...stormrpc.CallOption) (*rpcmodels.SyncResponse, error) {
	var out rpcmodels.SyncResponse
	r, err := stormrpc.NewRequest("rpc.RPCAgent.Sync", in, stormrpc.WithEncodeProto())
	if err != nil {
		return nil, err
	}

	resp := c.c.Do(ctx, r, opts...)
	if resp.Err != nil {
		return nil, resp.Err
	}

	if err = resp.Decode(&out); err != nil {
		return nil, err
	}

	return &out, nil
}

// RPCAgentServer is the server API for RPCAgent service.
type RPCAgentServer interface {
	// Sync synchronizes the agent with the Andromeda backend.
	Sync(context.Context, *rpcmodels.SyncRequest) (*rpcmodels.SyncResponse, error)
}

func RegisterRPCAgentServer(s *stormrpc.Server, srv RPCAgentServer) {
	for _, handler := range rPCAgentHandlers {
		handler.SetService(srv)
		s.Handle(handler.Route(), handler.HandlerFunc())
	}
}

type _RPCAgent_Sync_Handler struct {
	route string
	svc   interface{}
}

func (h *_RPCAgent_Sync_Handler) HandlerFunc() stormrpc.HandlerFunc {
	return func(ctx context.Context, r stormrpc.Request) stormrpc.Response {
		var in rpcmodels.SyncRequest
		if err := r.Decode(&in); err != nil {
			return stormrpc.NewErrorResponse(r.Reply, fmt.Errorf("error decoding request"))
		}

		out, err := h.svc.(RPCAgentServer).Sync(ctx, &in)
		if err != nil {
			return stormrpc.NewErrorResponse(r.Reply, err)
		}

		resp, err := stormrpc.NewResponse(r.Reply, out, stormrpc.WithEncodeProto())
		if err != nil {
			return stormrpc.NewErrorResponse(r.Reply, err)
		}

		return resp
	}
}
func (h *_RPCAgent_Sync_Handler) Route() string {
	return h.route
}
func (h *_RPCAgent_Sync_Handler) SetService(svc interface{}) {
	h.svc = svc
}

var rPCAgentHandlers = []handler{
	&_RPCAgent_Sync_Handler{route: "rpc.RPCAgent.Sync"},
}

type handler interface {
	Route() string
	HandlerFunc() stormrpc.HandlerFunc
	SetService(interface{})
}
